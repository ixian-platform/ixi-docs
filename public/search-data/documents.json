[
  {
    "slug": "/api-docs",
    "title": "API Documents",
    "description": "Discover the API commands available for interacting with the Ixian Core and DLT.",
    "content": "### What's inside?\n\n* Ixian Core Generic API Commands\n* Ixian DLT Specific API Commands\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/add-transaction",
    "title": "Add Transaction",
    "description": "",
    "content": "## Add Transaction\n\nGenerates a new IXI transaction to transfer funds between wallets. Multiple 'from' wallets with different amounts may be specified, as well as multiple target wallets and amounts.\n\nNote: If you do not specify `from`, the required funds and fee will be deducted from the node's addresses (the order depends on the particular implementation). Multiple addresses may be used if the first one chosen does not have sufficient funds.\r\nAlternatively, if you do specify `from`, your total amount must include the required transaction fee. The transaction fee may be calculated in multiple ways:\n\n* Call the API `createrawtransaction`, which will generate a transaction object but not send it to the network. In this way you can measure the object's size and calculate an appropriate fee. This API takes the same parameters as `addtransaction`.\n* Call the API `calculatetransactionfee`, which will return the required fee amount for the given transaction. This API takes the same parameters as `addtransaction`.\n* Use the `autofee` parameter, which will deduct the required transaction fee from the first specified `from` address. The address must have sufficient funds to cover both the amount and fee. You can change the order of `from` addresses to ensure this.\n\nNote: If using the `primaryAddress` parameter, the chosen address (public key) must be a valid signer for all addresses in the `from` list. This is the case if all the `from` addresses were derived from `primaryAddress` via the `generatenewaddress` API. Mixing of `from` addresses from different keypairs is not supported, nor is mixing non-multisig and multisig wallets.\n\n### Method: `addtransaction`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| to | String | Yes | List of Base58 encoded recipient addresses with their amounts. Amounts are separated by '*' character. Addresses are separated by '-' character (i.e. address1\\_amount1-address2\\_amount2) |\r\n| from | String | No | List of Base58 encoded sending addresses with their amounts. Amounts are separated by '*' character. Addresses are separated by '-' character (i.e. address1\\_amount1-address2\\_amount2). All addresses must belong to the same private key. If no from parameter is specified, it will be automatically generated, where the addresses with least $IXI will be spent first. |\r\n| primaryAddress | String | No | Specify if the node is using a wallet with multiple keypairs in order to select the keypair (public key) which will be used to sign the transaction. The chosen primary address must be a valid signer for all addresses listed in the `from` field. |\r\n| fee | Number | No | Transaction fee, specified in $IXI per kB. If no fee parameter is specified, the default (which is also the minimum) 0.00005 $IXI per kB will be used. |\r\n| autofee | Boolean | No | If specified, the system will automatically deduct the required fee from the first address given in `from`. This parameter is not required if you have included the appropriate fees somewhere in the `from` list, or are not specifying the `from` list at all. |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Output:\n\n* success: transaction details are returned as a JSON object and the error field is set to null:\n* fail JSON encoded details with a non-null error and a null result:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_ADDRESS\\_OR\\_KEY | Addresses specified in the `from` parameter does not belong to this node, or the address in the `to` parameter was invalid.  |\r\n| RPC\\_INVALID\\_PARAMS | Invalid `from` amounts, or invalid `to` amounts were specified. |\r\n| RPC\\_VERIFY\\_ERROR | The transaction does not pass verification - this usually means that no usable `\"from\"` addresses were present, or there was something wrong with the signing key. |\r\n| RPC\\_WALLET\\_INSUFFICIENT\\_FUNDS | Address or addresses specified have insufficient balance to be used for the transaction. |\r\n| RPC\\_INTERNAL\\_ERROR | An unexpected error occurred within the node. Please see the node log for details. |\n\n### Example:\n\nGET http://localhost:8081/addtransaction?from=1JKZFqQs4yiH6Dq4bfom7xcpL6zG53DrjcY6HD9QJ6cRWmXdq\\_10000-1PC5kubyLvTmsf16CugqHpBG8B8PK4YjcfSjjLMqbUi8YvkQ\\_5000\\&to=153xXfVi1sznPcRqJur8tutgrZecNVYGSzetp47bQvRfNuDix\\_15000\\&autofee=true\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"11-284bKK4GvGV9stfEGqu1CP4A9T3tTzrbkUsUd2JestPVE3KDPM5Um7sn3Dfv4\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"11\",\r\n    \"nonce\": \"313950\",\r\n    \"signature\": \"54b6315260a94dfec4...a166a16472040dae03\",\r\n    \"pubKey\": \"JHgSS7hbUNnYWsqz8m...wi5i2EPPWjtyTRYRN\",\r\n    \"timestamp\": \"1711936575\",\r\n    \"type\": \"0\",\r\n    \"amount\": \"515000.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"c81b2017498e7c838d1d2d960c80e2c18a102959680414dd37ef143bcc777d7796b171d873683f93425a91fd\",\r\n    \"from\": {\r\n      \"1\": \"515000.01000000\"\r\n    },\r\n    \"to\": {\r\n      \"153xXfVi1sznPcRqJur8tutgrZecNVYGSzetp47bQvRfNuDix\": \"15000.00000000\",\r\n      \"4L5vswa8yS9VKsZzDJ2ry9gWY7KQon5bkvhG1CUuepkwvcy1xQmLsHA9DPmCDbufr\": \"500000.00000000\"\r\n    },\r\n    \"fee\": \"0.01000000\",\r\n    \"totalAmount\": \"515000.01000000\"\r\n  }\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/blacklist-peer",
    "title": "Blacklist Peer",
    "description": "",
    "content": "## Blacklist Peer\n\nBlacklists peer.\n\n### Method: `blacklistPeer`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| host | String | No | Host address to blacklist. |\r\n| wallet | String | No | Base58 Wallet address of host to blacklist. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with \"OK\" in result field on success.\n\n### Example:\n\nGET http://localhost:8081/blacklistPeer\n\n```\n{\r\n  \"result\": \"OK\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/calculate-transaction-fee",
    "title": "Calculate Transaction Fee",
    "description": "",
    "content": "## Calculate Transaction Fee\n\nThis method takes the same parameters as `addtransaction`, except for `autofee`. It does not generate a Transaction object, but rather calculates the size of the resulting Transaction object and therefore the total fee required to send it. The fee is returned as a decimal number in `result`.\n\nNote: If you do not specify `from`, the required funds and fee will be deducted from the node's addresses (the order is implementation-defined). Multiple addresses may be used if the first one chosen does not have sufficient funds. If the order (and amounts) matters, then use the `from` parameter and specify manually.\n\nNote: If using the `primaryAddress` parameter, the chosen address (public key) must be a valid signer for all addresses in the `from` list. This is the case if all the `from` addresses were derived from `primaryAddress` via the `generatenewaddress` API. Mixing of `from` addresses from different keypairs is not supported, nor is mixing non-multisig and multisig wallets.\n\n### Method: `calculatetransactionfee`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| to | String | Yes | List of Base58 encoded recipient addresses with their amounts. Amounts are separated by '*' character. Addresses are separated by '-' character (i.e. address1\\_amount1-address2\\_amount2) |\r\n| from | String | No | List of Base58 encoded sending addresses with their amounts. Amounts are separated by '*' character. Addresses are separated by '-' character (i.e. address1\\_amount1-address2\\_amount2). All addresses must belong to the same private key. If no from parameter is specified, it will be automatically generated, where the addresses with least $IXI will be spent first. |\r\n| primaryAddress | String | No | Specify if the node is using a wallet with multiple keypairs in order to select the keypair (public key) which will be used to sign the transaction. The chosen primary address must be a valid signer for all addresses listed in the `from` field. |\r\n| fee | Number | No | Transaction fee, specified in $IXI per kB. If no fee parameter is specified, the default (which is also the minimum) 0.00005 $IXI per kB will be used. |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Output:\n\n* success: required total transaction fee is calculated and returned as a number in result.\n* fail JSON encoded details with a non-null error and a null result:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_ADDRESS\\_OR\\_KEY | Addresses specified in the `from` parameter does not belong to this node, or `to` address is invalid. |\r\n| RPC\\_INVALID\\_PARAMS | Invalid `from` amounts, or invalid `to` amounts were specified. |\r\n| RPC\\_VERIFY\\_ERROR | The transaction does not pass verification - this usually means that no usable `from` addresses were present, or there was something wrong with the signing key. |\r\n| RPC\\_WALLET\\_INSUFFICIENT\\_FUNDS | Address or addresses specified have insufficient balance to be used for the transaction. |\r\n| RPC\\_TRANSACTION\\_ERROR | An error occurred while adding the transaction, check the message and log file for details. |\r\n| RPC\\_INTERNAL\\_ERROR | An unexpected error occurred within the node. Please see the node log for details. |\n\n### Example:\n\nGET http://localhost:8081/calculatetransactionfee?from=1JKZFqQs4yiH6Dq4bfom7xcpL6zG53DrjcY6HD9QJ6cRWmXdq\\_10000-1PC5kubyLvTmsf16CugqHpBG8B8PK4YjcfSjjLMqbUi8YvkQ\\_5000\\&to=153xXfVi1sznPcRqJur8tutgrZecNVYGSzetp47bQvRfNuDix\\_15000\n\n```\n{\r\n\t\"result\": \"0.00005\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/clear-peer-blacklist",
    "title": "Clear Peer Blacklist",
    "description": "",
    "content": "## Clear Peer Blacklist\n\nClears peer blacklist.\n\n### Method: `clearPeerBlacklist`\n\n### Input parameters:\n\nNone.\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with \"OK\" in result field on success.\n\n### Example:\n\nGET http://localhost:8081/clearPeerBlacklist\n\n```\n{\r\n  \"result\": \"OK\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/clients",
    "title": "Clients",
    "description": "",
    "content": "## Clients\n\nReturns a list of clients that are connected to this node.\n\n### Method: `clients`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: list of clients JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/clients\n\n```\n{\r\n\t\"result\": [\r\n\t\t\"172.20.207.81:55700\",\r\n\t\t\"172.20.207.81:55859\",\r\n\t\t...\r\n\t],\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/connect",
    "title": "Connect",
    "description": "",
    "content": "## Connect\n\nInitiates a network connection to the specified address and port.\n\nNote: The `to` parameter must include both a host address and a port. The host address may be a fully qualified domain name (FQDN) or an IP address, but port must be present in both cases.\n\n### Method: `connect`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| to | String | Yes | Hostname or IP address and port of the target Ixian node. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMS | The required parameter `\"to\"` was not supplied. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object containinly only the string \"Connecting to node `to`\" as the result.\n\n### Example:\n\nGET http://localhost:8081/connect?to=192.168.1.25:10234\n\n```\n{\r\n\t\"result\": \"Connecting to node 192.168.1.25\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/create-raw-transaction",
    "title": "Create Raw Transaction",
    "description": "",
    "content": "## Create Raw Transaction\n\nGenerates a new IXI transaction, but doesn't add it to the Transaction Pool. This enables manual TX fee calculations and features such as offline transactions.\n\nNote: If you do not specify `from`, the required funds and fee will be deducted from the node's addresses (the order is unspecified). Multiple addresses may be used if the first one chosen does not have sufficient funds.\r\nIf you do specify `from`, it will not include any transaction fees. It is up to the caller of this API to examine the returned Transaction object and add the fee in the `from` list. This allows greater flexibility than `autofee` or not specifying the `from` list.\r\nNote: The transaction can be returned in a raw (binary) form, encoded as a hexadecimal string. In order to convert it into a JSON object, use the API call [Decode Raw Transaction](https://projectixian.github.io/api_docs/core_decode_raw_transaction.html), or supply the parameter `json` when creating the raw transaction.\r\nNote: The returned transaction is not signed.\n\nNote: If using the `primaryAddress` parameter, the chosen address (public key) must be a valid signer for all addresses in the `from` list. This is the case if all the `from` addresses were derived from `primaryAddress` via the `generatenewaddress` API.\n\n### Method: `createrawtransaction`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| to | String | Yes | List of Base58 encoded recipient addresses with their amounts. Amounts are separated by '*' character. Addresses are separated by '-' character (i.e. address1\\_amount1-address2\\_amount2) |\r\n| from | String | No | List of Base58 encoded sending addresses with their amounts. Amounts are separated by '*' character. Addresses are separated by '-' character (i.e. address1\\_amount1-address2\\_amount2). All addresses must belong to the same private key. If no from parameter is specified, it will be automatically generated, where the addresses with least $IXI will be spent first. |\r\n| primaryAddress | String | No | Specify if the node is using a wallet with multiple keypairs in order to select the keypair (public key) which will be used to sign the transaction. The chosen primary address must be a valid signer for all addresses listed in the `from` field. |\r\n| fee | Number | No | Transaction fee, specified in $IXI per kB. If no fee parameter is specified, the default (which is also the minimum) 0.00005 $IXI per kB will be used. |\r\n| autofee | Boolean | No | If specified, the system will automatically deduct the required fee from the first address given in `from`. This parameter is not required if you have included the appropriate fees somewhere in the `from` list, or are not specifying the `from` list at all. |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\r\n| json | Boolean | No | If specified, the transaction will be returned as a JSON transaction object and not encoded as a hexstring. |\n\n### Output:\n\n* success: transaction is returned as a hexadecimal string or a JSON object and the error field is set to null. This transaction is not added to the network.\n* fail JSON encoded details with a non-null error and a null result:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_ADDRESS\\_OR\\_KEY | Addresses specified in the `from` parameter does not belong to this node, or an invalid `to` address was specified. |\r\n| RPC\\_INVALID\\_PARAMS | Invalid `from` amounts, or invalid `to` amounts were specified. |\r\n| RPC\\_VERIFY\\_ERROR | The transaction does not pass verification - this usually means that no usable `from` addresses were present, or there was something wrong with the signing key. |\r\n| RPC\\_WALLET\\_INSUFFICIENT\\_FUNDS | Address or addresses specified have insufficient balance to be used for the transaction. |\r\n| RPC\\_TRANSACTION\\_ERROR | An error occurred while adding the transaction, check the message and log file for details. |\r\n| RPC\\_INTERNAL\\_ERROR | An unexpected error occurred within the node. Please see the node log for details. |\n\n### Example:\n\nGET http://localhost:8081/createrawtransaction?from=1JKZFqQs4yiH6Dq4bfom7xcpL6zG53DrjcY6HD9QJ6cRWmXdq\\_10000-1PC5kubyLvTmsf16CugqHpBG8B8PK4YjcfSjjLMqbUi8YvkQ\\_5000\\&to=153xXfVi1sznPcRqJur8tutgrZecNVYGSzetp47bQvRfNuDix\\_15000\n\n```\n{\r\n\t\"result\": \"0300000...0ad2a25212b003ef0259697760e0\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/decode-raw-transaction",
    "title": "Decode Raw Transaction",
    "description": "",
    "content": "## Decode Raw Transaction\n\nThis is a convenience function which converts a hex-encoded transaction from its raw format into a JSON object, so that it may be parsed or analyzed.\n\nNote: This method accepts both a signed or an unsigned raw transaction and will return the appropriate fields in the JSON object.\n\n### Method: `decoderawtransaction`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| transaction | string | Yes | The encoded transaction, as returned by [Create Raw Transaction](https://projectixian.github.io/api_docs/core_create_raw_transaction.html) |\n\n### Output:\n\n* success: transaction details are returned as a JSON object and the error field is set to null. This transaction is not added to the network.\n* fail JSON encoded details with a non-null error and a null result:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMETER | The `transaction` parameter is missing or does not represent a valid transaction object. |\n\n### Example:\n\nGET http://localhost:8081/decoderawtransaction?transaction=0300000...0ad2a25212b003ef0259697760e0\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"13-jbFyKmVfFtV86rjMnbxrmYuUzn3D7T3s6hZU1HfzbjPMT2A4jHhkR56CLsER\",\r\n    \"version\": 3,\r\n    \"blockHeight\": \"13\",\r\n    \"nonce\": \"7535\",\r\n    \"pubKey\": \"3zzdr4iT48AbaVudpGjZQi22fGiz4XupTfweGiiFjGNVVqfx6h4M2CF9H6bKjqTjj\",\r\n    \"timestamp\": \"1551519157\",\r\n    \"type\": \"0\",\r\n    \"amount\": \"10000.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"2d8368037d16aba9b650f3fd5a61a937505a1b43a6989d7ba500e72d7f60d0a2988fc5c5afe997015b8529ec\",\r\n    \"from\": {\r\n      \"1\": \"10000.00005000\"\r\n    },\r\n    \"to\": {\r\n      \"5EVv1FqciHzJtPQbA8kBTaPzdSCzLVJ2X6oBTFA198au1qjoML6TjYz75h8w2QUv1\": \"10000.00000000\"\r\n    },\r\n    \"fee\": \"0.00005000\",\r\n    \"totalAmount\": \"10000.00005000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/extend-name-registration",
    "title": "Extend Name Registration",
    "description": "",
    "content": "## Extend Name Registration\n\nExtend name registration for a specified amount of time.\n\n### Method: `extendName`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| name | String | Yes | Name to be registered. |\r\n| extensionTime | Number | Yes | Time in blocks to extend the name for. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the transaction in result field, which extends a name.\n\n### Example:\n\nGET http://localhost:8081/extendname?name=test\\&extensionTime=864000\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"446-iSQxh1KZf5bHADpfg9rFnBQWJksF8jtNbQEGMkvR92rskETRK46cvov29Rko\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"446\",\r\n    \"nonce\": \"93785\",\r\n    \"signature\": \"5155031ee73...13e3f077009811\",\r\n    \"pubKey\": \"JHgSS7hbUN...Ywi5i2EPPWjtyTRYRN\",\r\n    \"data\": \"0341409...02f0d00\",\r\n    \"timestamp\": \"1711931901\",\r\n    \"type\": \"4\",\r\n    \"amount\": \"50000.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"7f72ba1ae8b47b3efb5283fbef7256d861d9e8c2fbdf436faedb4042769991500f41ab8b066dd159a4fcaabc\",\r\n    \"from\": {\r\n      \"1\": \"50000.01000000\"\r\n    },\r\n    \"to\": {\r\n      \"125D6XDzTZzQUWsyQZmQZmQZmQZmQZmQZmQZmQZmQZmQb8t25\": \"50000.00000000\"\r\n    },\r\n    \"fee\": \"0.01000000\",\r\n    \"totalAmount\": \"50000.01000000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/generate-new-address",
    "title": "Generate New Address",
    "description": "",
    "content": "## Generate New Address\n\nGenerates new address for receiving and spending $IXI, using the chosen public key. The parameter `address` controls which keypair will be used to generate a new address. The specified address must have a public and private keypair loaded in the running node or client.\n\nNote: The required 'nonce' value used to generate a new address is determined automatically.\n\n### Method: `generatenewaddress`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| address | String | No | Primary address (key pair) which will be used to generate a new address. |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: new address in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/generatenewaddress\n\n```\n{\r\n\t\"result\": \"1KXcNjfyChUPhMK5Wnkj8ZQ6GQCiYs65uBaWkK9jdCvrWuDgS\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/get-activity",
    "title": "Get Activity",
    "description": "",
    "content": "## Get Activity\n\nRetrieves the activity for the currently loaded wallet with optional filtering on type and paging support.\n\n### Method: `activity`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| fromIndex | Number | No | Starting index (used for splitting the results into pages). |\r\n| count | Number | No | Number of results to fetch. By itself, this parameter is useful for fetching only the recent history, but combined with `fromIndex` this parameters enables fetching results in pages. |\r\n| type | Number | No | Type of the activity to fetch as a number. See below. |\r\n| orderBy | String | No | Ordering method of requested data. Can be \"insertedTimestamp\", \"timestamp\" or \"blockheight\". Default is \"insertedTimestamp\". |\r\n| descending | Boolean | No | Ordering direction of requested data, set to \"true\" for descending order. Default is ascending order.  |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Activity Types\n\n| Id | Type | Detail |\r\n| --- | --- | --- |\r\n| 100 | TransactionReceived | A transaction has been received. (Destination address belongs to the currently loaded wallet. |\r\n| 101 | TransactionSent | A transaction has been sent from the currently loaded wallet. |\r\n| 200 | MiningReward | A mining reward has been received by the currently loaded wallet. |\r\n| 201 | StakingReward | A staking reward has been received by the currently loaded wallet. |\r\n| 202 | TxFeeReward | A transaction fee reward has been received by the currently loaded wallet. |\r\n| 300 | ContactRequest | A contact request has been received. |\n\n### Output:\n\n* activity details are returned as a JSON object and the error field is set to null:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Example:\n\nGET http://localhost:8081/activity\n\n```\n{\r\n  \"result\": [\r\n    {\r\n      \"seedHash\": \"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZFYZkO\",\r\n      \"wallet\": \"4iMKArchGjmLsZFsj2tYrBgPjjypvEwquB2pnbEvYAyihSeEi1FN5XBsWru2iKDXK\",\r\n      \"from\": \"1ixianinfinimine234234234234234234234234234242HP\",\r\n      \"toList\": \"||4iMKArchGjmLsZFsj2tYrBgPjjypvEwquB2pnbEvYAyihSeEi1FN5XBsWru2iKDXK:/tkU||5DY8ZF2Y1xbB2n7V7c3z8pcAoLAsScAVAiZdcnqBPbLuGHiq9RWamn83hautJvEoy:ZEwj||4C62hPSVNHTXe4aMtgoFYZ3KVCNXmkCr7MmJRprWukvtUSWTsMsm6UaPLqmiVtnh1:7tI/||4L5vswa8yS9VKsZzDJ2ry9gWY7KQon5bkvhG1CUuepkwvcy1xQmLsHA9DPmCDbufr:mDW5AA==\",\r\n      \"type\": 201,\r\n      \"data\": \"APyudjHAmnhQfZitq5BY8vgA1PboOXgm10RmMaeGWaHiltRiQdXyrWoA4pE9OKTq\",\r\n      \"value\": \"0.01366526\",\r\n      \"timestamp\": 1709254781,\r\n      \"status\": 2,\r\n      \"blockHeight\": 30383,\r\n      \"txid\": \"stk-30377-30382-HBEF6nRAb4qudWecJQnopZCfseUGYXp2KKVvpcbCNYZSAmqCTw4cpcqN7aN5\",\r\n      \"id\": \"EvniSJUZje4PU46HAqybNoQpZ8mKrpUULcY6oniijR3XehRovo9TSw2fBBMG\"\r\n    },\r\n    ...\r\n  ],\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/get-block-height",
    "title": "Get Block Height",
    "description": "",
    "content": "## Get Block Height\n\nReturns the number of Ixian blocks generated so far, usually named 'Block Height'.\n\n### Method: `blockheight`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: number of Ixian blocks since the Genesis block\n\n### Example:\n\nGET http://localhost:8081/blockheight\n\n```\n{\r\n\t\"result\": 432178,\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/get-presence",
    "title": "Get Presence",
    "description": "",
    "content": "## Get Presence\n\nReturns presence information of the specified wallet.\n\n### Method: `getPresence`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the wallet bytes encoded as a hexadecimal string.\n\n### Example:\n\nGET http://localhost:8081/getPresence?wallet=4iMKArchGjmLsZFsj2tYrBgPjjypvEwquB2pnbEvYAyihSeEi1FN5XBsWru2iKDXK\n\n```\n{\r\n  \"result\": {\r\n    \"version\": 1,\r\n    \"wallet\": {\r\n      \"version\": 1,\r\n      \"addressWithChecksum\": \"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZFYZkO\",\r\n      \"addressNoChecksum\": \"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZF\",\r\n      \"nonce\": null,\r\n      \"pubKey\": null\r\n    },\r\n    \"pubkey\": \"AQAAAAAAAgAA7Gd0ZN...Wdu7w/us52kDAAAAAQAB\",\r\n    \"metadata\": null,\r\n    \"addresses\": [\r\n      {\r\n        \"version\": 2,\r\n        \"device\": \"aSKhScV0tkOaIq0IjNZyWw==\",\r\n        \"address\": \"10.23.11.2:10000\",\r\n        \"type\": \"M\",\r\n        \"nodeVersion\": \"xdc-0.9.2a\",\r\n        \"lastSeenTime\": 1711928565,\r\n        \"signature\": \"ynRhobTOXAMys...M5YmAZxzeNF30vLQudLCY=\"\r\n      }\r\n    ],\r\n    \"powSolution\": {\r\n      \"blockNum\": 271,\r\n      \"solution\": \"z6qt1qRGHMwi2w+dX+gWnPHtIJhM4rmDlBqjQ7VjNuiRUzD2OxcHRs6oVzSjSSbEg2LuQghDGUfAPrZ08M8/DA==\",\r\n      \"signingPubKey\": \"AgAAAAAAAQAAlpmt...AqfHk5HQMAAAABAAE=\",\r\n      \"checksum\": \"4eNPs8p1lda/BsCCfCeUy9EVs1bZrP9RgH+zWAWSZuF02obk/XhhSHGQRNJVmqs0/mGkqyucT19gIRXCJAAAAA==\",\r\n      \"difficulty\": \"116843993.98621778\",\r\n      \"bits\": 3901456573219758000\r\n    }\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/get-total-balance",
    "title": "Get Total Balance",
    "description": "",
    "content": "## Get Total Balance\n\nGets the total balance of IXIcoins in all currently loaded wallets on this Ixian client. Essentially, this retrieves all your Ixian assets available to you on the chosen node or client.\n\n### Method: `gettotalbalance`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object containinly the number of total IxiCoins in local wallets\n\n### Example:\n\nGET http://localhost:8081/gettotalbalance\n\n```\n{\r\n\t\"result\": \"100000000.00000000\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/get-viewing-wallet",
    "title": "Get Viewing Wallet",
    "description": "",
    "content": "## Get Viewing Wallet\n\nRetrieves the currently loaded wallet as a viewing wallet in hexadecimal string. The wallet is encrypted with the user's password and the value is prefixed with the string `IXIHEX`.\n\n### Method: `getViewingWallet`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the viewing wallet bytes encoded as a hexadecimal string.\n\n### Example:\n\nGET http://localhost:8081/getViewingWallet\n\n```\n{\r\n  \"result\": \"IXIHEX0200000050090...cab76cfb758a14\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/get-wallet-backup",
    "title": "Get Wallet Backup",
    "description": "",
    "content": "## Get Wallet Backup\n\nRetrieves the currently loaded wallet as a hexadecimal string. The wallet is encrypted with the user's password and the value is prefixed with the string `IXIHEX`.\n\n### Method: `getwalletbackup`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the wallet bytes encoded as a hexadecimal string.\n\n### Example:\n\nGET http://localhost:8081/getwalletbackup\n\n```\n{\r\n  \"result\": \"IXIHEX05000000013844...cab76cfb758a14\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands",
    "title": "Ixian Core Generic API Commands",
    "description": "Ixian Core Generic API Commands",
    "content": ""
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/isolate",
    "title": "Isolate",
    "description": "",
    "content": "## Isolate\n\nStops all network operations and disconnects all clients and servers.\n\n### Method: `isolate`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\nNone\n\n### Output:\n\n* a JSON object containinly only the string \"Isolating from network now.\" as the result.\n\n### Example:\n\nGET http://localhost:8081/isolate\n\n```\n{\r\n\t\"result\": \"Isolating from network now.\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/list-wallets",
    "title": "List Wallets",
    "description": "",
    "content": "## List Wallets\n\nLists all loaded wallets.\n\n### Method: `listWallets`\n\n### Input parameters:\n\nNone.\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with list of loaded wallets in result field on success.\n\n### Example:\n\nGET http://localhost:8081/listWallets\n\n```\n{\r\n  \"result\": [\r\n    \"3WFuwLRowdZBTUUGqmUvSfx14U1tT1c2bcpSV3vai7ghi4fQ4jy4Jjf9xq3Gg\"\r\n  ],\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/load-wallet",
    "title": "Load Wallet",
    "description": "",
    "content": "## Load Wallet\n\nLoads another wallet from file. If wallet is already loaded, it won't reload it but just return it's primary address.\n\n### Method: `loadWallet`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| file | String | Yes | Filename of the wallet file. |\r\n| password | String | Yes | Password of the provided wallet. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_WALLET\\_ERROR | An error occurred. File doesn't exist, is incorrect or incorrect password is used. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the wallet bytes encoded as a hexadecimal string.\n\n### Example:\n\nGET http://localhost:8081/loadWallet\n\n```\n{\r\n  \"result\": \"4iMKArchGjmLsZFsj2tYrBgPjjypvEwquB2pnbEvYAyihSeEi1FN5XBsWru2iKDXK\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/my-public-key",
    "title": "My Public Key",
    "description": "",
    "content": "## My Public Key\n\nReturns the primary public key of this node.\n\n### Method: `mypubkey`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: public key in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/mypubkey\n\n```\n{\r\n\t\"result\": \"00020000...5d1e69cb503000000010001\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/my-wallet",
    "title": "My Wallet",
    "description": "",
    "content": "## My Wallet\n\nReturns all the loaded (unlocked) wallets in the node's wallet file and their balances.\n\n### Method: `mywallet`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON-encoded list of wallets and balances, with the error field set to null\n\n### Example:\n\nGET http://localhost:8081/mywallet\n\n```\n{\r\n\t\"result\": {\r\n\t\t\"1JKZFqQs4yiH6Dq4bfom7xcpL6zG53DrjcY6HD9QJ6cRWmXdq\": \"99880008.39139947\",\r\n\t\t\"1PC5kubyLvTmsf16CugqHpBG8B8PK4YjcfSjjLMqbUi8YvkQ5\": \"11240.00000000\"\r\n\t},\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/pause-network-client",
    "title": "Pause Network Client",
    "description": "",
    "content": "## Pause Network Client\n\nDisconnects from all servers.\n\n### Method: `pauseClient`\n\n### Input parameters:\n\nNone.\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the string \"Network Client paused.\" in result field.\n\n### Example:\n\nGET http://localhost:8081/pauseClient\n\n```\n{\r\n  \"result\": \"Network Client paused.\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/reconnect",
    "title": "Reconnect",
    "description": "",
    "content": "## Reconnect\n\nStops all network operations, disconnects all clients and servers, then restarts the networking and attempts to reconnect to the network.\n\n### Method: `reconnect`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\nNone\n\n### Output:\n\n* a JSON object containinly only the string \"Reconnecting node to network now.\" as the result.\n\n### Example:\n\nGET http://localhost:8081/reconnect\n\n```\n{\r\n\t\"result\": \"Reconnecting node to network now.\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/recover-registered-name",
    "title": "Recover Registered Name",
    "description": "",
    "content": "## Recover Registered Name\n\nRecover a registered name, by using a recovery key.\n\n### Method: `recoverName`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| name | String | Yes | Name to be registered. |\r\n| nextRecoveryHash | String | No | Next Recovery hash in HEX. |\r\n| nextPkHash | String | No | Next Public Key hash in HEX. |\r\n| sigPk | String | No | Signature Public Key hash in HEX. |\r\n| sig | String | No | Signature in HEX. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the transaction in result field, which recovers a name.\n\n### Example:\n\nGET http://localhost:8081/recoverName?name=test\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"416-GmLELpqteeTLv551uUtyLADHGw2SxgfPH5EBQn8YVe2PjMZFJqaFYW1GQbCa\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"416\",\r\n    \"nonce\": \"501522\",\r\n    \"signature\": \"b58cc4abea30a...ba2a6a0ab227b63e2a9b9439259d7453fc38d\",\r\n    \"pubKey\": \"JHgSS7hbUNnYWs...U2j3NFmiMazymoYwi5i2EPPWjtyTRYRN\",\r\n    \"data\": \"0541409be670f...a1c2d7f598025146472a435e47b48edb5b23f5bd\",\r\n    \"timestamp\": \"1711930988\",\r\n    \"type\": \"4\",\r\n    \"amount\": \"0.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"307c3363308fee26da1464b54d4235e101bf2c4c31488d8c7d285f6d4385219c8ad99ad22e6c521abbdd29af\",\r\n    \"from\": {\r\n      \"1\": \"0.01500000\"\r\n    },\r\n    \"to\": {\r\n      \"125D6XDzTZzQUWsyQZmQZmQZmQZmQZmQZmQZmQZmQZmQb8t25\": \"0.00000000\"\r\n    },\r\n    \"fee\": \"0.01500000\",\r\n    \"totalAmount\": \"0.01500000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/register-name",
    "title": "Register Name",
    "description": "",
    "content": "## Register Name\n\nRegister an Ixian Name.\n\n### Method: `registerName`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| name | String | Yes | Name to be registered. |\r\n| registrationTime | Number | Yes | Registration time in blocks. |\r\n| capacity | Number | Yes | Capacity in kB. |\r\n| recoveryHash | String | No | Recovery hash in HEX. |\r\n| pkHash | String | No | PublicKey hash in HEX. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the transaction in result field, which registers a name.\n\n### Example:\n\nGET http://localhost:8081/registerName?name=test\\&registrationTime=864000\\&capacity=10\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"403-yjSY9heSFDLcrvu7yXu3jfKkw4xJoe6YpCULZw3zC4FS89YCEseFByShUANt\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"403\",\r\n    \"nonce\": \"40792\",\r\n    \"signature\": \"a3861219705...863b3d2ccd178097981c95b\",\r\n    \"pubKey\": \"JHgSS7hbUN...3NFmiMazymoYwi5i2EPPWjtyTRYRN\",\r\n    \"data\": \"0141409b...7cdda12e4dd6fe9fbf004331aa46a645\",\r\n    \"timestamp\": \"1711930571\",\r\n    \"type\": \"4\",\r\n    \"amount\": \"50000.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"ae7c44383cb5a488088abc188f06eb3bf652d4e90922019da84e34e0f2c37b80aff6b83761f8d260b0c93b91\",\r\n    \"from\": {\r\n      \"1\": \"50000.01000000\"\r\n    },\r\n    \"to\": {\r\n      \"125D6XDzTZzQUWsyQZmQZmQZmQZmQZmQZmQZmQZmQZmQb8t25\": \"50000.00000000\"\r\n    },\r\n    \"fee\": \"0.01000000\",\r\n    \"totalAmount\": \"50000.01000000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/resume-network-client",
    "title": "Resume Network Client",
    "description": "",
    "content": "## Resume Network Client\n\nStarts connecting to servers again.\n\n### Method: `resumeClient`\n\n### Input parameters:\n\nNone.\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the string \"Network Client resumed.\" in result field.\n\n### Example:\n\nGET http://localhost:8081/resumeClient\n\n```\n{\r\n  \"result\": \"Network Client resumed.\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/send-raw-transaction",
    "title": "Send Raw Transaction",
    "description": "",
    "content": "## Send Raw Transaction\n\nTakes a hexadecimal representation of a valid, signed transaction and sends it to the network. In order to generate a valid transaction value, use the methods [Create Raw Transaction](#create-raw-transaction) and [Sign Raw Transaction](#sign-raw-transaction).\n\n### Method: `sendrawtransaction`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| transaction | string | Yes | The encoded transaction, as returned by [Create Raw Transaction](#create-raw-transaction) |\n\n### Output:\n\n* success: transaction details are returned as a JSON object and the error field is set to null\n* fail JSON encoded details with a non-null error and a null result\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMETER | The `transaction` parameter is missing or does not represent a valid transaction object. |\r\n| RPC\\_VERIFY\\_ERROR | The transaction was not valid, or an unexpected error has occurred in the node. Please see the node's log for details. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Example:\n\nGET http://localhost:8081/sendrawtransaction?transaction=03000000000000000e313...cd149493f0d973b7d7bb9b6\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"13-jbFyKmVfFtV86rjMnbxrmYuUzn3D7T3s6hZU1HfzbjPMT2A4jHhkR56CLsER\",\r\n    \"version\": 3,\r\n    \"blockHeight\": \"13\",\r\n    \"nonce\": \"7535\",\r\n    \"signature\": \"36d459...985ec859bb6ca\",\r\n    \"pubKey\": \"3zzdr4iT48AbaVudpGjZQi22fGiz4XupTfweGiiFjGNVVqfx6h4M2CF9H6bKjqTjj\",\r\n    \"timestamp\": \"1551519157\",\r\n    \"type\": \"0\",\r\n    \"amount\": \"10000.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"2d8368037d16aba9b650f3fd5a61a937505a1b43a6989d7ba500e72d7f60d0a2988fc5c5afe997015b8529ec\",\r\n    \"from\": {\r\n      \"1\": \"10000.00005000\"\r\n    },\r\n    \"to\": {\r\n      \"5EVv1FqciHzJtPQbA8kBTaPzdSCzLVJ2X6oBTFA198au1qjoML6TjYz75h8w2QUv1\": \"10000.00000000\"\r\n    },\r\n    \"fee\": \"0.00005000\",\r\n    \"totalAmount\": \"10000.00005000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/servers",
    "title": "Servers",
    "description": "",
    "content": "## Servers\n\nReturns a list of servers that this node is connected to.\n\n### Method: `servers`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: list of servers JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/servers\n\n```\n{\r\n\t\"result\": [\r\n\t\t\"172.20.207.81:10000\",\r\n\t\t\"172.20.207.81:10002\",\r\n\t\t...\r\n\t],\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/shutdown",
    "title": "Shutdown",
    "description": "",
    "content": "## Shutdown\n\nGracefully shuts down the running Ixian executable and closes the program.\r\nNote: It is not possible to 'revive' the node after this command without access to the remote computer's OS.\n\n### Method: `shutdown`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object containinly only the string \"Node shutdown\" as the result.\n\n### Example:\n\nGET http://localhost:8081/shutdown\n\n```\n{\r\n\t\"result\": \"Node shutdown\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/sign",
    "title": "Sign",
    "description": "",
    "content": "## Sign\n\nSigns a specified string.\n\n### Method: `sign`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| message or hash | String | Yes | Message or hash to be signed. |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the wallet bytes encoded as a hexadecimal string.\n\n### Example:\n\nGET http://localhost:8081/sign?message=test\n\n```\n{\r\n  \"result\": \"5237481874cdf80...e3a3b89fce20f735b749eda9fb2cc6\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/sign-raw-transaction",
    "title": "Sign Raw Transaction",
    "description": "",
    "content": "## Sign Raw Transaction\n\nApplies the node's signature to a raw transaction and returns a modified hexadecimal value.\n\nNote: If a signed transaction is given as an input, the signature is overwritten.\n\n### Method: `signrawtransaction`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| transaction | string | Yes | The encoded transaction, as returned by [Create Raw Transaction](https://projectixian.github.io/api_docs/core_create_raw_transaction.html) |\n\n### Output:\n\n* success: transaction is returned as a hexadecimal string and the error field is set to null. This transaction is not added to the network.\n* fail JSON encoded details with a non-null error and a null result:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMETER | The `transaction` parameter is missing or does not represent a valid transaction object. |\n\n### Example:\n\nGET http://localhost:8081/signrawtransaction?transaction=0300000...0ad2a25212b003ef0259697760e0\n\n```\n{\r\n  \"result\": \"03000000000000000e313...cd149493f0d973b7d7bb9b6\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/status",
    "title": "Status",
    "description": "",
    "content": "## Status\n\nReturns the status of the node.\n\n### Method: `status`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| verbose | Boolean | No | Additional details are returned. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: status JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/status\n\n```\n{\r\n  \"result\":{\r\n    \"Core Version\":\"xcore-0.9.2a\",\r\n    \"Node Version\":\"xsbc-0.8.0\",\r\n    \"Network type\":\"main\",\r\n    \"My time\":1711921632,\r\n    \"Network time difference\":0,\r\n    \"Real network time difference\":0,\r\n    \"My External IP\":\"10.11.12.13\",\r\n    \"My Listening Port\":15235,\r\n    \"Core Status\":1,\r\n    \"Block Height\":4094011,\r\n    \"Block Version\":10,\r\n    \"Network Block Height\":4094011,\r\n    \"Node Type\":\"C\",\r\n    \"Connectable\":true,\r\n    \"Queues\":{\r\n      \"RcvLow\":0,\r\n      \"RcvMedium\":0,\r\n      \"RcvHigh\":0,\r\n      \"SendClients\":0,\r\n      \"SendServers\":0,\r\n      \"Logging\":0,\r\n      \"Pending Transactions\":0\r\n    },\r\n    \"Presences\":1,\r\n    \"Masters\":0,\r\n    \"Relays\":0,\r\n    \"Clients\":1,\r\n    \"Network Clients\":[\r\n      \"10.10.1.3:1212\",\r\n      \"10.10.1.4:1312\"\r\n    ],\r\n    \"Network Servers\":[\r\n      \"10.10.1.1:1012\",\r\n      \"10.10.1.2:1012\"\r\n    ]\r\n  },\r\n  \"error\":null,\r\n  \"id\":null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/unload-wallet",
    "title": "Unload Wallet",
    "description": "",
    "content": "## Unload Wallet\n\nUnloads specified wallet.\n\n### Method: `unloadWallet`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with \"OK\" string, if wallet was unloaded in result field.\n* a JSON object with \"FAIL\" string in result field, if wallet can't be unloaded.\n\n### Example:\n\nGET http://localhost:8081/unloadWallet\n\n```\n{\r\n  \"result\": \"OK\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/update-name-capacity",
    "title": "Update Name Capacity",
    "description": "",
    "content": "## Update Name Capacity\n\nUpdate Name Capacity for a specified amount.\n\n### Method: `extendName`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| name | String | Yes | Name to be registered. |\r\n| newCapacity | Number | Yes | New capacity in kB. |\r\n| nextPkHash | String | No | Next Public Key hash in HEX. |\r\n| sigPk | String | No | Signature Public Key hash in HEX. |\r\n| sig | String | No | Signature in HEX. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the transaction in result field, which updates the capacity.\n\n### Example:\n\nGET http://localhost:8081/updateNameCapacity?name=test\\&newCapacity=200\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"12-YgoasugxF3umGU4592jJisYRX2iU4xguC5QWa44UvCg4jZt1PT6MAeTQCVgL\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"12\",\r\n    \"nonce\": \"890022\",\r\n    \"signature\": \"a36e4270f8f48020e5b7add97f852...88a750a4ab9238d1528a610658da\",\r\n    \"pubKey\": \"JHgSS7hbUNnYWsXgTbs2qz8mDm...U2U2j3NFmiMazymoYwi5i2EPPWjtyTRYRN\",\r\n    \"data\": \"0441409be670f26e...5a7b27e5cb8c69d376b9190c8d9b56dbfea1614\",\r\n    \"timestamp\": \"1711934655\",\r\n    \"type\": \"4\",\r\n    \"amount\": \"1000000.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"61747aba78eb1febfeb542789f35f66733d8ef5bc692a84d56fec4264f0723f708b5dca8d9c40b1672f6ab01\",\r\n    \"from\": {\r\n      \"1\": \"1000000.01500000\"\r\n    },\r\n    \"to\": {\r\n      \"125D6XDzTZzQUWsyQZmQZmQZmQZmQZmQZmQZmQZmQZmQb8t25\": \"1000000.00000000\"\r\n    },\r\n    \"fee\": \"0.01500000\",\r\n    \"totalAmount\": \"1000000.01500000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/update-name-records",
    "title": "Update Name Records",
    "description": "",
    "content": "## Update Name Records\n\nUpdate Name Records.\n\n### Method: `updateNameRecord`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| name | String | Yes | Name to be registered. |\r\n| records\\[] | Array | Yes | Array of records \\[ \"key,TTL,data\" ]. |\r\n| nextPkHash | String | No | Next Public Key hash in HEX. |\r\n| sigPk | String | No | Signature Public Key hash in HEX. |\r\n| sig | String | No | Signature in HEX. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the transaction in result field, which updates the name records.\n\n### Example:\n\nGET http://localhost:8081/updateNameRecord?name=test\\&records\\[]=abc,2,testData1\\&records\\[]=def,3,testData2\\&records\\[]=ghi,3,testData3\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"12-uFz12W98ebdbtMg9egjP5p9f1zWgF3tkQ9YAbCB13LNE6WJmPUM59rDctZ1r\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"12\",\r\n    \"nonce\": \"953806\",\r\n    \"signature\": \"3b3faa9a726f0818fa1795be...865d7ff8701b28b059b39c4112cd2\",\r\n    \"pubKey\": \"JHgSS7hbUNnYWsXgTbs2qz8mD...FmiMazymoYwi5i2EPPWjtyTRYRN\",\r\n    \"data\": \"0241409be670f26e3a9d0fa3e...f34df22cd7fbb324\",\r\n    \"timestamp\": \"1711936613\",\r\n    \"type\": \"4\",\r\n    \"amount\": \"0.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"a0ba16873ebe68f2f1f319d9f199dbb453a53275aae5f4aad2fcbe0ae533e524cc1c2507498df1448af53599\",\r\n    \"from\": {\r\n      \"1\": \"0.01500000\"\r\n    },\r\n    \"to\": {\r\n      \"125D6XDzTZzQUWsyQZmQZmQZmQZmQZmQZmQZmQZmQZmQb8t25\": \"0.00000000\"\r\n    },\r\n    \"fee\": \"0.01500000\",\r\n    \"totalAmount\": \"0.01500000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/validate-address",
    "title": "Validate Address",
    "description": "",
    "content": "## Validate Address\n\nEnsures that the given address is in the correct format.\n\n### Method: `validateaddress`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| address | String | Yes | Wallet address to validate |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_ADDRESS\\_OR\\_KEY | The provided vaue does not represent a valid Ixian address, or there was no value provided. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: string \"OK\" in the result field.\n* fail: JSON encoded error details and the result field set to null\n\n### Example:\n\nGET http://localhost:8081/validateaddress?address=4qX7Uot9BbweZh56gVeXWRwoe2Wb6vesNJtZJzm672uHUqucsHENe1849Vy5V4mHg\n\n```\n{\r\n    \"result\": \"OK\",\r\n    \"error\": null,\r\n    \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/verify",
    "title": "Verify",
    "description": "",
    "content": "## Verify\n\nVerifies a specified string.\n\n### Method: `verify`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| message or hash | String | Yes | Message or hash to be verified. |\r\n| publicKey | String | Yes | Public Key as Hex String. |\r\n| signature | String | Yes | Signature as Hex String. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMS | Invalid Parameters are used. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with \"OK\" or \"FAIL\" string in result field.\n\n### Example:\n\nGET http://localhost:8081/verify?message=test\\&publicKey=010000000000020000ec677464d9091f151bbd5d7ac9bc65e37925e3265a89e0e0e211cda42ca1c9ae0271ac114bd4776c6e5924923f17e81583c090893f64a631df03249319d475e27093352b574cd645309d31ccebc1ed1118ca5443e8f8c96fff07e4832490e1790c6d66a630636c79e2a14b45c0ca202692203d4ee3dcfce74cd5adae413e4db52f02b71ea254697295ec03440e5b312f0e2ab3dce1f3317078837912e505729c86db8f9c6629e8037dfe96570087d536e875d8c44b01e808690383e8ae34e70df20aa97b277158ff0b013e453bdb5f591dad1c9442980067d2769fe801486a48a17c87b30fab828aa4ae9af495d0a436df8da8ad786bfac4e20ad98e36b06814cc4c45f806c5ebcfacd686bd9b2614be7420204202ef22bd05410a45fd130b7ce9cf1bf8d7aecf6efdbefe4135161fc00330be211a4b36c550dd633f52fb93acc0b5a805cfc9508a9a22b7aa562747260bfbe05df40d68e7eebc59b9b706e75d83dca9ff18c59756f3d6c304e6e4e861db546fcad35c8856b82614fe90e9ab4a66309ac7086528a0eb808e41bf487c714ad5637f4ab99ad667619d7871dc6e16a1340c07e01f11b80b16b6faed7d028922c69453e5c7d767b2932279aa126edc06b7c79cc1b7bbe913812b02eeea384511a94faef637a4f97e841f324b84d73929ccea9f7051970a9efd93150b5f9080be13b7285809e2bd59dbbbc3fbace76903000000010001\\&signature=5237481874cdf80b43ae5bee7a3e5003b1919c1991f8de841d2f309e4f42b9a36aa290dc452b20702d3f96e30575007299b7ae89773bd924af0f18b31ffa13be0b13d0a1c7c078b72a9ca0319c0c6c7a441c420d9945feb9ec60a437152c9406ac592d1cc3723933f5ff5a65dbf7d58bd53173508b3207ee7305b7157a39c6b3af25122236acf81a94c4446ef8fa1a46ac16b6d0bb2ac86c15571a21da32c6f0b4b362142d68bf9ad17934061a2e601d574a126f48ae7109f27c42af6a22645c47e590b99b86f7925ae2911232307530eb33280671acadfd64494ba783a9ff1374895f85896e9ba60b7f2039782e82c5752ec01dc89640702644ec938bbcea00ea5217cf2c60d7fe23e7744b68a5fb7a3eccdd26304a24a8d7e1bf9ab7d0a52aab9639fa5895e18819a57733176c4a3d08bdeb3c8c0b9347428cb79e9f36fe285973d709d98819de3d0514d77717aef22dd1e413e8938bbe7ce30b60688e93c0f7a48bf4dcc901bf6a20188c0031322452b8c3c005d50baef1b78e8b75068e8034e0553f773d66a9a7ee99d3e80f4541476ae1564d392682d259e4229eb76a1dbd2221d2e044909693c9b41658d3b531d322062a3679f86fbe6dc74b0f4c0d9a95ce8cb3bfae65efa5a726098c8242998789d09cc7d63227105e5931fa5b248bc17f6063da02d9e27a7f9e49752dbfef99e3a3b89fce20f735b749eda9fb2cc6\n\n```\n{\r\n  \"result\": \"OK\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/applied-transaction-list",
    "title": "Applied Transaction List",
    "description": "",
    "content": "## Applied Transaction List\n\nReturns the list of applied transactions in the memory pool.\n\n### Method: `txa`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| fromIndex | Number | No | Starting index (used for splitting the results into pages). |\r\n| count | Number | No | Number of results to fetch. By itself, this parameter is useful for fetching only the recent history, but combined with `fromIndex` this parameters enables fetching results in pages. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: applied transaction list JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/txa\n\n```\n{\r\n  \"result\": {\r\n    \"11-284bKK4GvGV9stfEGqu1CP4A9T3tTzrbkUsUd2JestPVE3KDPM5Um7sn3Dfv4\": {\r\n      \"id\": \"11-284bKK4GvGV9stfEGqu1CP4A9T3tTzrbkUsUd2JestPVE3KDPM5Um7sn3Dfv4\",\r\n      \"version\": 7,\r\n      \"blockHeight\": \"11\",\r\n      \"nonce\": \"313950\",\r\n      \"signature\": \"54b6315260a94dfec40...a166a16472040dae03\",\r\n      \"pubKey\": \"JHgSS7hbUNnYWsXgTbs2...5i2EPPWjtyTRYRN\",\r\n      \"timestamp\": \"1711936575\",\r\n      \"type\": \"0\",\r\n      \"amount\": \"500000.00000000\",\r\n      \"applied\": \"12\",\r\n      \"checksum\": \"c81b2017498e7c838d1d2d960c80e2c18a102959680414dd37ef143bcc777d7796b171d873683f93425a91fd\",\r\n      \"from\": {\r\n        \"1\": \"500000.01000000\"\r\n      },\r\n      \"to\": {\r\n        \"4L5vswa8yS9VKsZzDJ2ry9gWY7KQon5bkvhG1CUuepkwvcy1xQmLsHA9DPmCDbufr\": \"500000.00000000\"\r\n      },\r\n      \"fee\": \"0.01000000\",\r\n      \"totalAmount\": \"500000.01000000\"\r\n    },\r\n    ...\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/count-node-versions",
    "title": "Count Node Versions",
    "description": "",
    "content": "## Status\n\nReturns the Ixian software versions in use on the network.\n\n### Method: `countnodeversions`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* node versions are returned as a JSON object and the error field is set to null:\n\n### Example:\n\nGET http://localhost:8081/countnodeversions\n\n```\n{\r\n  \"result\": {\r\n    \"xdc-0.9.2a\": 35,\r\n    \"xdc-0.9.2\": 21,\r\n    \"xdc-0.9.2b\": 5\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/get-balance",
    "title": "Get Balance",
    "description": "",
    "content": "## Get Balance\n\nReturns balance of the specified address.\n\n### Method: `getbalance`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| address | String | Yes | Base58 encoded wallet address |\n\n### Output:\n\n* success: address balance in the result field and the error field set to null\n* fail: JSON encoded details with a non-null error and a null result:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unexpected error occurred within the node. Please see the node log for details. |\n\nNote: No error is returned if attempting to read the balance for a nonexistant wallet. In this case, a balance of \"0.00000000\" is returned.\n\n### Example:\n\nGET http://localhost:8081/getbalance?address=153xXfVi1sznPcRqJur8tutgrZecNVYGSzetp47bQvRfNuDix\n\n```\n{\r\n\t\"result\": \"0.00102720\",\r\n\t\"error\": null,\r\n\t\"id\":null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/get-best-block-hash",
    "title": "Get Best Block Hash",
    "description": "",
    "content": "## Get Best Block Hash\n\nReturns the latest hash value of the best chain. This function is provided to improve compatibility\r\nwith Bitcoin-based exchanged.\r\nPlease note that Ixian doesn't support the concept of multiple concurrent chains, so this function will always\r\nreturn the latest accepted block's checksum value.\r\nThe only scenario where this API might return incorrect results is in the event of a network split, before the nodes\r\nhave re-connected and performed appropriate chain reorganization.\n\n### Method: `getbestblockhash`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: checksum value of the latest (best) block\n\n### Example:\n\nGET http://localhost:8081/getbestblockhash\n\n```\n{\r\n\t\"result\": \"i0qSovdA0TMJVGZqAZn+aof7Jdlm5c9XEXUbioIvUEY/AJAz0J0wliBL3UM=\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/get-block",
    "title": "Get Block",
    "description": "",
    "content": "## Get Block\n\nReturns specified block data, either as a JSON object or as a binary object converted into hexadecimal.\n\n### Method: `getblock`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| num | Number | Yes | Block number to retrieve. |\r\n| bytes | Boolean | No | If specified, the block data will be returned as a hexadecimal string. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMETER | The specified block number was invalid. |\r\n| RPC\\_INTERNAL\\_ERROR | An unexpected error occurred within the node. Please see the node log for details. |\n\n### Output:\n\n* success: block details are returned as a JSON object and the error field is set to null\n* fail: JSON encoded details with a non-null error and a null result:\n\n### Example:\n\nGET http://localhost:8081/getblock?num=50\n\n```\n{\r\n  \"result\": {\r\n    \"Block Number\": \"50\",\r\n    \"Version\": \"11\",\r\n    \"Block Checksum\": \"aa01845dbc3ab57cede02078499f3dc0c6525bfe2fc10cd120748bca849d7d963db89f3f6d2d98eeeb920fd06289afd785cdc3a63cb3a232c5bee4c48b683404\",\r\n    \"Last Block Checksum\": \"2694d770ee01b7fb6b20d51219c98ff29add7e062b66185a9e51c3969652a3c282bb3235ad1f2c452b1efbb18f4151a3cce05dd0e3f5f0379a157b18e84c1471\",\r\n    \"Wallet State Checksum\": \"086d138f4dbfc4b451e1ab6cf668920616293b50139151d23a74ef82673e73d6a9e14a001f52c87c5e44070e04123604543f6ee2e5ffa916a0fb9560b20dbb63\",\r\n    \"RegName State Checksum\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"Sig freeze Checksum\": \"72d8a439230e2884b5c8ab3672057cde7fd1860d5493519ba69040242657b3a075a18d87cf5e1ca93e9a0727f0a78f05fda46a6c408f428701e0b9f15004965a\",\r\n    \"PoW field\": \"null\",\r\n    \"Timestamp\": \"1711937760\",\r\n    \"Difficulty\": \"11730489520294945089\",\r\n    \"Hashrate\": \"2999\",\r\n    \"Compacted Sigs\": \"False\",\r\n    \"Signature count\": \"3\",\r\n    \"Required Signature count\": \"2\",\r\n    \"Total Signer Difficulty\": \"1013836307.33581639\",\r\n    \"Required Signer Difficulty\": \"5100000.00000000\",\r\n    \"Transaction count\": \"0\",\r\n    \"Transaction amount\": \"0.00000000\",\r\n    \"Total fees\": \"0.05787037\",\r\n    \"Signatures\": \"[{\\\"blockNum\\\":0,\\\"blockHash\\\":null,\\\"signature\\\":\\\"Yf9ba36eXRqwZ7crU4DCbeAexLfjgHo6CNEQ+vIO8EyV+7TQYlfdQmJs1yGXS7fA7WiTev1so7GizwdSH3cZ8aMUf3DncP1xfJnbV93YUnKV+Ky7zH+RlpQCcrvyrwOAD7yZcXMREKdO7k2JieHIFJoyqjCqqic0/xfYNwGC1s2+IilBBRXqpHMi9sicsgfppkVVrzp3OnOy3qHiXYRwvUWzuZA3qUF/t5AlThNFETDfVEz2YI7mMVTpe9cVu0n0cgJpeYcieHZ8JwA9NjHSMJCTNB+LBXWVOMRnsAyoFc7taaukvIDq5295i4DBn07iWNAnySnpynGElC70s3f7Mg==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"AZCQzUzcufMr3dRSxxy9lb+U9DNbgieu6Nk/CRAwn+if2d0zz/SSo/zwRhBhBrIN\\\",\\\"addressNoChecksum\\\":\\\"AZCQzUzcufMr3dRSxxy9lb+U9DNbgieu6Nk/CRAwn+if2d0zz/SSo/zwRhBh\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":10,\\\"solution\\\":\\\"+Jr2wf9M7m/4EYefb5A0EUZclf2dPZrk9DZuzWcweSYYaf9ehfSVGGaJ+ll3GcrdTJfuaooRSr+r9lXEZUAIPA==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAA3zltTaIk+mrWW3ZHcogfs3hKQ0HnhdI5o9jv87I3fdGknkMrt0IkR4rCnQ75u+oIKtgYYQK2EvHdYWuc/Xs0cOxzcDlKmuDnDvvpwoLRRoAeyiLfiru6beM3pGyCwsRbnFq8n0GIbN7ffwUDe/h97a0dov50bPFD1u1lsvPpVa21YUDkf6w4jIFubJWTrgREveqt7Q8JILD95uTpymj1nQrLlUJ77HHy2anWlaww7S08PN6V93+Ogq29ViO28UsvYGfVK8O55ILxXSjyiIGNNXObCUTF7ZrENqj82rZmJZOs+yrv6PEr6Rm2lRjLVJLX7dkEy2pGgPpKsau48uC1zQMAAAABAAE=\\\",\\\"checksum\\\":\\\"tB1TJAdVNjhJBWZ5f92FWJu9v3PBYYy72nh1URtJB2ictNjtMnkGshOcER5z5HoENQmySNIT7y0B5UGQEAAAAA==\\\",\\\"difficulty\\\":\\\"259303038.44875730\\\",\\\"bits\\\":3895772290364812783}},{\\\"blockNum\\\":0,\\\"blockHash\\\":null,\\\"signature\\\":\\\"ZE8zgV9Lfz65APa+R8eoLRUcmbvjTSMg9meO4PeEeZ7Fwf0lFKpmjH5No8asadtc5vQXPWMQPMHSLO/1RNQawZWNJockhbgY4K4OP5MrgQoxDtnbHk13W+NcPjz3VVNX3HZDvJYraCbWYqDrYVMulA3+berwL615g9JMjAxyj/T9jX7APNC8KIoMHhaq0HtjlGyPa4M6OuwLRgsz5bnVcaiiey9ietxjCYt0Z1qBGco2syg9OzJnXVTV1DvQD2pf29dPdNk4UJsuuJxrOxJTGhRhOXKjuIxPw0/Dr2YQYMlJcU8U/0CwFM3DoiHCTYqJL9MCaFyyFHXcUMTa6Dxrmg==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZFYZkO\\\",\\\"addressNoChecksum\\\":\\\"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZF\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":1,\\\"solution\\\":\\\"tMfC+E0J5FblvH5C7Yz89mN9mX7fGwR0Cr4gj8qOdMuN1Qf7MPR+eobmG5wCiJLEktmEDaO4J1FuYSYMhYaCjg==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAA3OJn6RNStxxcmU3kfub1YTPLwSKvLZw1foEYjniQuqWvvLCyKgfGcziaUmuj9sGfGiPKX2Qk2GtTWnTlVr7gRe6lX44kJZ+8jK+DlFV/mVChVWKmUz5NLFPNvK1897QZY2ObB5/vekUUWDzyi9rH53wWHXKHrlGGzHM60uE1jAKznPCQzAMZ3tUhC8VPYon7FORLIH101CdzlrUuMmhLb9tlNYhr894HFjOlDNMkneYpnshdbEIyI6YYojOvQpkKKv0eklRN4nzVPPytuR9+DExQvszf0SGCAf3XxPx8wzI0g13DEoA8mBBCjcTfcBpe+FmILIIIMNrZxjuDkGT7+QMAAAABAAE=\\\",\\\"checksum\\\":\\\"y+kFXtFnU/tEdWOdvuTNs5GDkGVbXVpB/MlZ+VonxzBUYUs5ezWzBMWCyeb16b2mSt0wFankgRS02rUGDQAAAA==\\\",\\\"difficulty\\\":\\\"329717278.65639821\\\",\\\"bits\\\":3894776630873429121}},{\\\"blockNum\\\":0,\\\"blockHash\\\":null,\\\"signature\\\":\\\"e3Ij2Y3RkuA16pbhfbTWmwloMff11IuVzGEsRAcsVkT6wHCgRAZLhQ7w5gXEtsRUsdgBgQowOmJcLKHeOuxVX47RTfCGsSv9CScNXtsrLRysIBhZUjY4W9326U+Qcqa4XDwuu0+kwMInA0++fYqwBBzmH//filvZQge3N85j34hK9BSEXVp91y3b8zxMp8KBuJ+C4buUIQR3XzQ6C7hoc1PERknnYd+FXdU2DONCkkcFRtmiUUxLRj0mXMBvqUj2vu/zkj4lWgp+DLuVI1wc00Q9Q/rVXAH+6w+7qe2DuXfnuNfkd7ojxR47XJjyexdtp9/hqykwpnQCNq7/LReS3w==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"AX/5B43yaFLWKrgwFEvbKh8GK2nm/OHd/WxYoYLncQSWuHo1Ta5Lzw+o57XoCFi8\\\",\\\"addressNoChecksum\\\":\\\"AX/5B43yaFLWKrgwFEvbKh8GK2nm/OHd/WxYoYLncQSWuHo1Ta5Lzw+o57Xo\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":1,\\\"solution\\\":\\\"/r2nTNsRX9+RYQKSeQUbouALPEvkGGU6DDdhQDVT390LpisQ8daqkPgP81bdyLb0t+Sh7LNf/jFlz7EKz4wdBA==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAAs0gqEw13NegI7OOguIOpqdRFqvqrnaRCiqs7KGUHzYtKE/HfisoGj17KDduSxYTLwz0+0g8ZuR6shQshmmo5obbiQuDTHi78vbM3PmPkx/yPhYzi0j/vPZgANnd5R2/EYG29RhOdJDxWIPL2jCgwNc+UsGa8tZF5VVB3fb1frHDHIVV2CYWZoofOOdK9w00mcFUyvZmCQ0BC8elONMd2i2zZZuoKH5mKb9as/pT8juU9PBxcRzrOSL4agWz9Ni70cUF0TccNhFbTdouGmq3HUpv1ux44Tc+sP89Kr3elInP1eeMGM2943LMO3yVh69Ry9FJ8MLwXlDLzOfyK2BEFCQMAAAABAAE=\\\",\\\"checksum\\\":\\\"i3Bkfyxl78asZk0E+/1YbhPVrAFpat8a7BFbBZuBgRhGaorG93d8XAv11ciqcUUhUT7EQpBcmkDI7zQcCgAAAA==\\\",\\\"difficulty\\\":\\\"424815990.23066088\\\",\\\"bits\\\":3893955841501970586}}]\",\r\n    \"Frozen Signatures\": \"[{\\\"blockNum\\\":0,\\\"blockHash\\\":null,\\\"signature\\\":\\\"Yf9ba36eXRqwZ7crU4DCbeAexLfjgHo6CNEQ+vIO8EyV+7TQYlfdQmJs1yGXS7fA7WiTev1so7GizwdSH3cZ8aMUf3DncP1xfJnbV93YUnKV+Ky7zH+RlpQCcrvyrwOAD7yZcXMREKdO7k2JieHIFJoyqjCqqic0/xfYNwGC1s2+IilBBRXqpHMi9sicsgfppkVVrzp3OnOy3qHiXYRwvUWzuZA3qUF/t5AlThNFETDfVEz2YI7mMVTpe9cVu0n0cgJpeYcieHZ8JwA9NjHSMJCTNB+LBXWVOMRnsAyoFc7taaukvIDq5295i4DBn07iWNAnySnpynGElC70s3f7Mg==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"AZCQzUzcufMr3dRSxxy9lb+U9DNbgieu6Nk/CRAwn+if2d0zz/SSo/zwRhBhBrIN\\\",\\\"addressNoChecksum\\\":\\\"AZCQzUzcufMr3dRSxxy9lb+U9DNbgieu6Nk/CRAwn+if2d0zz/SSo/zwRhBh\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":10,\\\"solution\\\":\\\"+Jr2wf9M7m/4EYefb5A0EUZclf2dPZrk9DZuzWcweSYYaf9ehfSVGGaJ+ll3GcrdTJfuaooRSr+r9lXEZUAIPA==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAA3zltTaIk+mrWW3ZHcogfs3hKQ0HnhdI5o9jv87I3fdGknkMrt0IkR4rCnQ75u+oIKtgYYQK2EvHdYWuc/Xs0cOxzcDlKmuDnDvvpwoLRRoAeyiLfiru6beM3pGyCwsRbnFq8n0GIbN7ffwUDe/h97a0dov50bPFD1u1lsvPpVa21YUDkf6w4jIFubJWTrgREveqt7Q8JILD95uTpymj1nQrLlUJ77HHy2anWlaww7S08PN6V93+Ogq29ViO28UsvYGfVK8O55ILxXSjyiIGNNXObCUTF7ZrENqj82rZmJZOs+yrv6PEr6Rm2lRjLVJLX7dkEy2pGgPpKsau48uC1zQMAAAABAAE=\\\",\\\"checksum\\\":\\\"tB1TJAdVNjhJBWZ5f92FWJu9v3PBYYy72nh1URtJB2ictNjtMnkGshOcER5z5HoENQmySNIT7y0B5UGQEAAAAA==\\\",\\\"difficulty\\\":\\\"259303038.44875730\\\",\\\"bits\\\":3895772290364812783}},{\\\"blockNum\\\":0,\\\"blockHash\\\":null,\\\"signature\\\":\\\"ZE8zgV9Lfz65APa+R8eoLRUcmbvjTSMg9meO4PeEeZ7Fwf0lFKpmjH5No8asadtc5vQXPWMQPMHSLO/1RNQawZWNJockhbgY4K4OP5MrgQoxDtnbHk13W+NcPjz3VVNX3HZDvJYraCbWYqDrYVMulA3+berwL615g9JMjAxyj/T9jX7APNC8KIoMHhaq0HtjlGyPa4M6OuwLRgsz5bnVcaiiey9ietxjCYt0Z1qBGco2syg9OzJnXVTV1DvQD2pf29dPdNk4UJsuuJxrOxJTGhRhOXKjuIxPw0/Dr2YQYMlJcU8U/0CwFM3DoiHCTYqJL9MCaFyyFHXcUMTa6Dxrmg==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZFYZkO\\\",\\\"addressNoChecksum\\\":\\\"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZF\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":1,\\\"solution\\\":\\\"tMfC+E0J5FblvH5C7Yz89mN9mX7fGwR0Cr4gj8qOdMuN1Qf7MPR+eobmG5wCiJLEktmEDaO4J1FuYSYMhYaCjg==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAA3OJn6RNStxxcmU3kfub1YTPLwSKvLZw1foEYjniQuqWvvLCyKgfGcziaUmuj9sGfGiPKX2Qk2GtTWnTlVr7gRe6lX44kJZ+8jK+DlFV/mVChVWKmUz5NLFPNvK1897QZY2ObB5/vekUUWDzyi9rH53wWHXKHrlGGzHM60uE1jAKznPCQzAMZ3tUhC8VPYon7FORLIH101CdzlrUuMmhLb9tlNYhr894HFjOlDNMkneYpnshdbEIyI6YYojOvQpkKKv0eklRN4nzVPPytuR9+DExQvszf0SGCAf3XxPx8wzI0g13DEoA8mBBCjcTfcBpe+FmILIIIMNrZxjuDkGT7+QMAAAABAAE=\\\",\\\"checksum\\\":\\\"y+kFXtFnU/tEdWOdvuTNs5GDkGVbXVpB/MlZ+VonxzBUYUs5ezWzBMWCyeb16b2mSt0wFankgRS02rUGDQAAAA==\\\",\\\"difficulty\\\":\\\"329717278.65639821\\\",\\\"bits\\\":3894776630873429121}},{\\\"blockNum\\\":0,\\\"blockHash\\\":null,\\\"signature\\\":\\\"e3Ij2Y3RkuA16pbhfbTWmwloMff11IuVzGEsRAcsVkT6wHCgRAZLhQ7w5gXEtsRUsdgBgQowOmJcLKHeOuxVX47RTfCGsSv9CScNXtsrLRysIBhZUjY4W9326U+Qcqa4XDwuu0+kwMInA0++fYqwBBzmH//filvZQge3N85j34hK9BSEXVp91y3b8zxMp8KBuJ+C4buUIQR3XzQ6C7hoc1PERknnYd+FXdU2DONCkkcFRtmiUUxLRj0mXMBvqUj2vu/zkj4lWgp+DLuVI1wc00Q9Q/rVXAH+6w+7qe2DuXfnuNfkd7ojxR47XJjyexdtp9/hqykwpnQCNq7/LReS3w==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"AX/5B43yaFLWKrgwFEvbKh8GK2nm/OHd/WxYoYLncQSWuHo1Ta5Lzw+o57XoCFi8\\\",\\\"addressNoChecksum\\\":\\\"AX/5B43yaFLWKrgwFEvbKh8GK2nm/OHd/WxYoYLncQSWuHo1Ta5Lzw+o57Xo\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":1,\\\"solution\\\":\\\"/r2nTNsRX9+RYQKSeQUbouALPEvkGGU6DDdhQDVT390LpisQ8daqkPgP81bdyLb0t+Sh7LNf/jFlz7EKz4wdBA==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAAs0gqEw13NegI7OOguIOpqdRFqvqrnaRCiqs7KGUHzYtKE/HfisoGj17KDduSxYTLwz0+0g8ZuR6shQshmmo5obbiQuDTHi78vbM3PmPkx/yPhYzi0j/vPZgANnd5R2/EYG29RhOdJDxWIPL2jCgwNc+UsGa8tZF5VVB3fb1frHDHIVV2CYWZoofOOdK9w00mcFUyvZmCQ0BC8elONMd2i2zZZuoKH5mKb9as/pT8juU9PBxcRzrOSL4agWz9Ni70cUF0TccNhFbTdouGmq3HUpv1ux44Tc+sP89Kr3elInP1eeMGM2943LMO3yVh69Ry9FJ8MLwXlDLzOfyK2BEFCQMAAAABAAE=\\\",\\\"checksum\\\":\\\"i3Bkfyxl78asZk0E+/1YbhPVrAFpat8a7BFbBZuBgRhGaorG93d8XAv11ciqcUUhUT7EQpBcmkDI7zQcCgAAAA==\\\",\\\"difficulty\\\":\\\"424815990.23066088\\\",\\\"bits\\\":3893955841501970586}}]\",\r\n    \"Frozen Signature count\": \"3\",\r\n    \"Sig Checksum\": \"2b5052b73871467441cba99f42214f4ea2507695f281070bc267abb3deef6d9117e6022451e707918991ea3418d3c9c3893a342ddaa1973c8fbc44268966bec4\",\r\n    \"Signer Bits\": \"0000000000000000\",\r\n    \"TX IDs\": \"[]\",\r\n    \"Last Superblock\": \"0\",\r\n    \"Last Superblock checksum\": \"null\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/get-block-count",
    "title": "Get Block Count",
    "description": "",
    "content": "## Get Block Count\n\nReturns the number of Ixian blocks generated so far. This function is provided to improve exchange compatibility\r\nwith Bitcoin-based and derivative technology.\n\n### Method: `getblockcount`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: number of Ixian blocks since the Genesis block\n\n### Example:\n\nGET http://localhost:8081/getblockcount\n\n```\n{\r\n\t\"result\": 432178,\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/get-full-block",
    "title": "Get Full Block",
    "description": "",
    "content": "## Get Full Block\n\nReturns specified block data with full transactions and superblock data included.\n\n### Method: `getfullblock`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| num | Number | Yes | Block number to retrieve. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMETER | The specified block number was invalid. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred while fetching the block. |\n\n### Output:\n\n* success: block details are returned as a JSON object and the error field is set to null\n* fail: JSON encoded details with a non-null error and a null result:\n\n### Example:\n\nGET http://localhost:8081/getfullblock?num=12\n\n```\n{\r\n  \"result\": {\r\n    \"Block Number\": \"12\",\r\n    \"Version\": \"11\",\r\n    \"Block Checksum\": \"fd6885d31d98d6ece1af2625e62f3b0518de6fb0c3ca5398c8a3d9af1d558b0c02bda7603b3ffc615d69f7eef24c766ddd6b27b2504d1fe7fe4113595d19a92a\",\r\n    \"Last Block Checksum\": \"83a701bebaee8733ffe4a8e1871a0e2e813f3ac3acaef4c889f00b80a106319a8e045b3fc5810605cafaee270b8572852e6d63ceefd451f90ae61c95863df03b\",\r\n    \"Wallet State Checksum\": \"2600672b98467ef7125aeaecbf34b3bab13a3ff56f6ff8d30341acabe1c2e1576f4a1fe0b8c618cf4673397bdec62d84b924d1efca83890cd69a16b4ea37ed75\",\r\n    \"RegName State Checksum\": \"ef0dd1be8dcc9fb9fec8991857ca70d1426e915c3662147e22d58af1001af8f28400832c662788eb2ec1e7347b61a356d275897c13239c727dc50fa92379adcc\",\r\n    \"Sig freeze Checksum\": \"ae5f2adb4c253a075606685f0db901d5ecdf4013411d44fd8a260e4b9724079bd0734988080dababe0551bd20ede307ac2bca5cd868c3d9a2bc3f85b7d529243\",\r\n    \"PoW field\": \"null\",\r\n    \"Timestamp\": \"1711936599\",\r\n    \"Difficulty\": \"11730489520294945089\",\r\n    \"Hashrate\": \"2999\",\r\n    \"Compacted Sigs\": \"False\",\r\n    \"Signature count\": \"2\",\r\n    \"Required Signature count\": \"2\",\r\n    \"Total Signer Difficulty\": \"754533268.88705909\",\r\n    \"Required Signer Difficulty\": \"5100000.00000000\",\r\n    \"Transaction count\": \"2\",\r\n    \"Transaction amount\": \"550000.00000000\",\r\n    \"Total fees\": \"0.02000000\",\r\n    \"Signatures\": \"[{\\\"blockNum\\\":0,\\\"blockHash\\\":null,\\\"signature\\\":\\\"RuEvTDOeQWJLSnDS2t8yUB1wY7X10Mjd00F2ommDXHs+hTWgBy9UQkYonLSLDkspLgEK/NWew4Tu9NvmocmfY5Ofg0q6rbZ9XFhsDU8f/YG6dCq0qsE6FurWdFANRdjm1CZ2scpUCqRgOGaqIlAn3VwgWiR0agLzlunNf5wZyU+Cf6Nr9xa7+6uKmGi2cVR6VADAY8o4UlMnRdU8HpAR2IpAcR7gj82MjAVwiqQA8qO5TMvvT4AkDI2PygbeZBYElZBQad3Mwm5nYn/QugHXJav9s6VcD42CgawpRpgh07UJACEPbdxQIvAFBGk2r+foP3TTdBZxYhGLrlF7IzXkGQ==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZFYZkO\\\",\\\"addressNoChecksum\\\":\\\"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZF\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":1,\\\"solution\\\":\\\"tMfC+E0J5FblvH5C7Yz89mN9mX7fGwR0Cr4gj8qOdMuN1Qf7MPR+eobmG5wCiJLEktmEDaO4J1FuYSYMhYaCjg==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAA3OJn6RNStxxcmU3kfub1YTPLwSKvLZw1foEYjniQuqWvvLCyKgfGcziaUmuj9sGfGiPKX2Qk2GtTWnTlVr7gRe6lX44kJZ+8jK+DlFV/mVChVWKmUz5NLFPNvK1897QZY2ObB5/vekUUWDzyi9rH53wWHXKHrlGGzHM60uE1jAKznPCQzAMZ3tUhC8VPYon7FORLIH101CdzlrUuMmhLb9tlNYhr894HFjOlDNMkneYpnshdbEIyI6YYojOvQpkKKv0eklRN4nzVPPytuR9+DExQvszf0SGCAf3XxPx8wzI0g13DEoA8mBBCjcTfcBpe+FmILIIIMNrZxjuDkGT7+QMAAAABAAE=\\\",\\\"checksum\\\":\\\"y+kFXtFnU/tEdWOdvuTNs5GDkGVbXVpB/MlZ+VonxzBUYUs5ezWzBMWCyeb16b2mSt0wFankgRS02rUGDQAAAA==\\\",\\\"difficulty\\\":\\\"329717278.65639821\\\",\\\"bits\\\":3894776630873429121}},{\\\"blockNum\\\":0,\\\"blockHash\\\":null,\\\"signature\\\":\\\"aQzJdOPvHswoh/5oBdsLQjy99sX1uuwAEb/DiLIbFjChnJ4QbEbVXKw/VtavR4Ii61sN5y+py4WQ4fGxPejzX8r5Psl9cMLlK2vpUKhriqjJlfcvztsADPfw37ZzJAURZH1l5YUiiZan8u1269RPzKUFTwYAZtC47y1UVf49NLnh5zczv86gatpNJKNeWFuG+eJGUK+4j3DbA+PeyPbkXVYsuUzSyH24bCMFVRArdPE0hIHSQ3ojX0MMwoRtNZGK8iMSGsYZ1+Vg1gmJuDqi0vBMbYYFktn5Novpy9x1oKyh6TLwfxafe0aN6TZT08uF/Gs5YOMaY1L7Mm6/Wfefaw==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"AX/5B43yaFLWKrgwFEvbKh8GK2nm/OHd/WxYoYLncQSWuHo1Ta5Lzw+o57XoCFi8\\\",\\\"addressNoChecksum\\\":\\\"AX/5B43yaFLWKrgwFEvbKh8GK2nm/OHd/WxYoYLncQSWuHo1Ta5Lzw+o57Xo\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":1,\\\"solution\\\":\\\"/r2nTNsRX9+RYQKSeQUbouALPEvkGGU6DDdhQDVT390LpisQ8daqkPgP81bdyLb0t+Sh7LNf/jFlz7EKz4wdBA==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAAs0gqEw13NegI7OOguIOpqdRFqvqrnaRCiqs7KGUHzYtKE/HfisoGj17KDduSxYTLwz0+0g8ZuR6shQshmmo5obbiQuDTHi78vbM3PmPkx/yPhYzi0j/vPZgANnd5R2/EYG29RhOdJDxWIPL2jCgwNc+UsGa8tZF5VVB3fb1frHDHIVV2CYWZoofOOdK9w00mcFUyvZmCQ0BC8elONMd2i2zZZuoKH5mKb9as/pT8juU9PBxcRzrOSL4agWz9Ni70cUF0TccNhFbTdouGmq3HUpv1ux44Tc+sP89Kr3elInP1eeMGM2943LMO3yVh69Ry9FJ8MLwXlDLzOfyK2BEFCQMAAAABAAE=\\\",\\\"checksum\\\":\\\"i3Bkfyxl78asZk0E+/1YbhPVrAFpat8a7BFbBZuBgRhGaorG93d8XAv11ciqcUUhUT7EQpBcmkDI7zQcCgAAAA==\\\",\\\"difficulty\\\":\\\"424815990.23066088\\\",\\\"bits\\\":3893955841501970586}}]\",\r\n    \"Frozen Signatures\": \"[{\\\"blockNum\\\":0,\\\"blockHash\\\":null,\\\"signature\\\":\\\"RuEvTDOeQWJLSnDS2t8yUB1wY7X10Mjd00F2ommDXHs+hTWgBy9UQkYonLSLDkspLgEK/NWew4Tu9NvmocmfY5Ofg0q6rbZ9XFhsDU8f/YG6dCq0qsE6FurWdFANRdjm1CZ2scpUCqRgOGaqIlAn3VwgWiR0agLzlunNf5wZyU+Cf6Nr9xa7+6uKmGi2cVR6VADAY8o4UlMnRdU8HpAR2IpAcR7gj82MjAVwiqQA8qO5TMvvT4AkDI2PygbeZBYElZBQad3Mwm5nYn/QugHXJav9s6VcD42CgawpRpgh07UJACEPbdxQIvAFBGk2r+foP3TTdBZxYhGLrlF7IzXkGQ==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZFYZkO\\\",\\\"addressNoChecksum\\\":\\\"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZF\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":1,\\\"solution\\\":\\\"tMfC+E0J5FblvH5C7Yz89mN9mX7fGwR0Cr4gj8qOdMuN1Qf7MPR+eobmG5wCiJLEktmEDaO4J1FuYSYMhYaCjg==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAA3OJn6RNStxxcmU3kfub1YTPLwSKvLZw1foEYjniQuqWvvLCyKgfGcziaUmuj9sGfGiPKX2Qk2GtTWnTlVr7gRe6lX44kJZ+8jK+DlFV/mVChVWKmUz5NLFPNvK1897QZY2ObB5/vekUUWDzyi9rH53wWHXKHrlGGzHM60uE1jAKznPCQzAMZ3tUhC8VPYon7FORLIH101CdzlrUuMmhLb9tlNYhr894HFjOlDNMkneYpnshdbEIyI6YYojOvQpkKKv0eklRN4nzVPPytuR9+DExQvszf0SGCAf3XxPx8wzI0g13DEoA8mBBCjcTfcBpe+FmILIIIMNrZxjuDkGT7+QMAAAABAAE=\\\",\\\"checksum\\\":\\\"y+kFXtFnU/tEdWOdvuTNs5GDkGVbXVpB/MlZ+VonxzBUYUs5ezWzBMWCyeb16b2mSt0wFankgRS02rUGDQAAAA==\\\",\\\"difficulty\\\":\\\"329717278.65639821\\\",\\\"bits\\\":3894776630873429121}},{\\\"blockNum\\\":0,\\\"blockHash\\\":null,\\\"signature\\\":\\\"aQzJdOPvHswoh/5oBdsLQjy99sX1uuwAEb/DiLIbFjChnJ4QbEbVXKw/VtavR4Ii61sN5y+py4WQ4fGxPejzX8r5Psl9cMLlK2vpUKhriqjJlfcvztsADPfw37ZzJAURZH1l5YUiiZan8u1269RPzKUFTwYAZtC47y1UVf49NLnh5zczv86gatpNJKNeWFuG+eJGUK+4j3DbA+PeyPbkXVYsuUzSyH24bCMFVRArdPE0hIHSQ3ojX0MMwoRtNZGK8iMSGsYZ1+Vg1gmJuDqi0vBMbYYFktn5Novpy9x1oKyh6TLwfxafe0aN6TZT08uF/Gs5YOMaY1L7Mm6/Wfefaw==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"AX/5B43yaFLWKrgwFEvbKh8GK2nm/OHd/WxYoYLncQSWuHo1Ta5Lzw+o57XoCFi8\\\",\\\"addressNoChecksum\\\":\\\"AX/5B43yaFLWKrgwFEvbKh8GK2nm/OHd/WxYoYLncQSWuHo1Ta5Lzw+o57Xo\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":1,\\\"solution\\\":\\\"/r2nTNsRX9+RYQKSeQUbouALPEvkGGU6DDdhQDVT390LpisQ8daqkPgP81bdyLb0t+Sh7LNf/jFlz7EKz4wdBA==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAAs0gqEw13NegI7OOguIOpqdRFqvqrnaRCiqs7KGUHzYtKE/HfisoGj17KDduSxYTLwz0+0g8ZuR6shQshmmo5obbiQuDTHi78vbM3PmPkx/yPhYzi0j/vPZgANnd5R2/EYG29RhOdJDxWIPL2jCgwNc+UsGa8tZF5VVB3fb1frHDHIVV2CYWZoofOOdK9w00mcFUyvZmCQ0BC8elONMd2i2zZZuoKH5mKb9as/pT8juU9PBxcRzrOSL4agWz9Ni70cUF0TccNhFbTdouGmq3HUpv1ux44Tc+sP89Kr3elInP1eeMGM2943LMO3yVh69Ry9FJ8MLwXlDLzOfyK2BEFCQMAAAABAAE=\\\",\\\"checksum\\\":\\\"i3Bkfyxl78asZk0E+/1YbhPVrAFpat8a7BFbBZuBgRhGaorG93d8XAv11ciqcUUhUT7EQpBcmkDI7zQcCgAAAA==\\\",\\\"difficulty\\\":\\\"424815990.23066088\\\",\\\"bits\\\":3893955841501970586}}]\",\r\n    \"Frozen Signature count\": \"2\",\r\n    \"Sig Checksum\": \"4b5c92cbf7be019353dc2ab9d59435f631b88f5de4fb08008e7a6aaee743b2566da7120d0e9600cff00857261318e3c78060ce2a129ea35b75a9f6babe6a6456\",\r\n    \"Signer Bits\": \"0000000000000000\",\r\n    \"TX IDs\": \"[\\\"11-284bKK4GvGV9stfEGqu1CP4A9T3tTzrbkUsUd2JestPVE3KDPM5Um7sn3Dfv4\\\",\\\"11-2HJD6X8nJoe1sDNHkPspSLBK3Qsi5wp9HBCViYe3VCTFPrcH9zLFPZG43VgsE\\\"]\",\r\n    \"Last Superblock\": \"0\",\r\n    \"Last Superblock checksum\": \"null\",\r\n    \"Transactions\": \"[{\\\"id\\\":\\\"11-284bKK4GvGV9stfEGqu1CP4A9T3tTzrbkUsUd2JestPVE3KDPM5Um7sn3Dfv4\\\",\\\"version\\\":7,\\\"blockHeight\\\":\\\"11\\\",\\\"nonce\\\":\\\"313950\\\",\\\"signature\\\":\\\"54b6315260a94dfec40ef12dc63d506f7a464744f5b30c142d0999a0ab04b059e7a56e651e3c86be45e0f86d33cdec8a3add2e03104dee23358853ab3f0280954507fe1981e0692f4f93eb019311a11cfe1275517b6cf854be21b255a31c434f33437be06231d92165bb17e2aee9dc88ad8581b528ce246ab98a83fc6c266bb5ab80afcacec51c24091eda469c50612ae0bfad8be9deb6d42a9bbebdedccbd9504d7adc8df5d85ffd51877163f6ec3feb86f0be54e3d60b7ae11ad72007f1c4c280caaaeb9cf009fec22218be663d43a822c8156a9024f5e6091e9be2309f1e779fd1b35a7c6b93bd15e7099db9254a4bb265cad80a38016f32d97e6c2b6bb30c20eef49c35631e67cf0a3345fb05477ab8586e3a74dc7962f1246a676d6eeeaaf9406fb3267f72fab670caa3633f4c862b032e74c9bf80a1f035e7813468b991736c74f81007a15f48fde931d450b6e4aec19f2a1e1ef79e0b7d5e209b219883d7fa5d47c757e9c9dd2f5ca443e551eb18184c72e77461bc066dc1ff535d74b86c01fc33bcfc06af5eb0a104e05726bf1d75d34ceba9a66f2e4592974a4df5a17232acc73467783abc17e147921fccd14fd2fd9e058b5275ad723777864264f601350328758576cfc74c6dc997523d29664b39026e8ee417b85fff52f0ef42ffa6af94b8ea4327140a1e88dd9c0434d0fb0c125f6b11ba166a16472040dae03\\\",\\\"pubKey\\\":\\\"JHgSS7hbUNnYWsXgTbs2qz8mDmgPK8PnzXCTz7TZY81Sv14nRiRMrYyfbTPXWEjVRudMRo67MCyuis4wF7L6AcJUonnr6CRW5cLtCYXXxZbEpe6fvTyfJKYACxyXhVqtSNC7dxeoHN7hFPxX9MCjrupv9setJp4LswHbUmpuzqavg24F5mE3EMHts2njt3UVjX3gkmU5JQiXvQR52KdYBK6rQ3Q82d2Y4hvLcatkBhFJGwt87hUY2UM9aSyn3oCEtFE9d3vSXHYU4HcCJG8oWfcdStMgf2s9ewSB1peuRqjaAzyT6Eft7SBgMLkyQTRWgU6vh2Dd54FeMTKMkMCCX3JqrUZXmiJqijNGduttk9a4dSP4vMYyoi7DFS3dGmMiZ8x7EjygnUQrd4CJUY2B7kzaMun3XkaYwFARY2YrQH3phEsW9rYKuKxec6zR3R4yhTEtRQybLg4ZqD4MvHTW629VvSeQFgLyunf9s9isG7eX1MQqyAyxtz8qJw4uz4AKAr3dgrTi37j7qbPQqSXzaApxE3MXtB91WjYybDPwsXzKvEGYRSJsf6LHfVHKbTpfQ3HQ5aMCYBQJwo4FNf8x9dg1fgcNTpSosiUWhEi75JUDu6DMCzGWBBiR6DNT6PwGrjNnAyU3WAg9mCxLHoiiZjx6pc2EgPircSd1AgpNvgMohdU2U2j3NFmiMazymoYwi5i2EPPWjtyTRYRN\\\",\\\"timestamp\\\":\\\"1711936575\\\",\\\"type\\\":\\\"0\\\",\\\"amount\\\":\\\"500000.00000000\\\",\\\"applied\\\":\\\"12\\\",\\\"checksum\\\":\\\"c81b2017498e7c838d1d2d960c80e2c18a102959680414dd37ef143bcc777d7796b171d873683f93425a91fd\\\",\\\"from\\\":{\\\"1\\\":\\\"500000.01000000\\\"},\\\"to\\\":{\\\"4L5vswa8yS9VKsZzDJ2ry9gWY7KQon5bkvhG1CUuepkwvcy1xQmLsHA9DPmCDbufr\\\":\\\"500000.00000000\\\"},\\\"fee\\\":\\\"0.01000000\\\",\\\"totalAmount\\\":\\\"500000.01000000\\\"},{\\\"id\\\":\\\"11-2HJD6X8nJoe1sDNHkPspSLBK3Qsi5wp9HBCViYe3VCTFPrcH9zLFPZG43VgsE\\\",\\\"version\\\":7,\\\"blockHeight\\\":\\\"11\\\",\\\"nonce\\\":\\\"586146\\\",\\\"signature\\\":\\\"961868522d63d355ef24512a41eef70f6f92a2d43c2177a0174702e870d02604863adfc3e127291384fe57982103d52470015e5fc967ddf2da6cf50ab2005d732b65cea75ae0dde9b402172a4b122ba52dad1e1886fe228e80f572646839aa253b5e2b4224ea925cad02bfbac87042182df8b4449e6fb118d978eb59201e89bcc3940a03e7b81b4b222a6e6a03821d6b3bd5505135d1fb85a9ad69d4fae023caec218a7ca0bb9b387c386bb28df37d90ffb17831b77868b8f837fb14b7bdd6e7f923ec4bd363cb6c65f23e19946ae8f9fa150332fb01209b75c7d5ebc57749868318d67671578f8ec2827c5247bad48f7fd34d71494c2b02f46c614da69ea585cea8fabcf11a147e7b1ea7d7d6869bdaeec225fb58b1026e2e88c1b6d27e63045268f3e897f289ebd780af20f661a5ca609537ad1ac51f5e2f2b261be1c1b818dfe6c42b9aff3891fabd531e2137a018e73042461a60cec92761cc197fea2dd413500b78f2b39d0ffc9b313ba9aaeefdaa5f9917f2093d45afa69fc2bcd12342085f0d7122323d2783d459ba97a0be94424bb8d414e7f951cead56a4c5803a7be5d6a66e684fc5ec2bb733bf6b0c6cf2a14f91128ae045e6cedfbcbb15f9002541e4204f3d5f83df7ac9625099461164a6005323f714684f62a1c2bccb3fc5b3e082663342746fc234e5f75ab0ba4a04ef2e84af91b6664f9ad8dd00ac501406\\\",\\\"pubKey\\\":\\\"JHgSS7hbUNnYWsXgTbs2qz8mDmgPK8PnzXCTz7TZY81Sv14nRiRMrYyfbTPXWEjVRudMRo67MCyuis4wF7L6AcJUonnr6CRW5cLtCYXXxZbEpe6fvTyfJKYACxyXhVqtSNC7dxeoHN7hFPxX9MCjrupv9setJp4LswHbUmpuzqavg24F5mE3EMHts2njt3UVjX3gkmU5JQiXvQR52KdYBK6rQ3Q82d2Y4hvLcatkBhFJGwt87hUY2UM9aSyn3oCEtFE9d3vSXHYU4HcCJG8oWfcdStMgf2s9ewSB1peuRqjaAzyT6Eft7SBgMLkyQTRWgU6vh2Dd54FeMTKMkMCCX3JqrUZXmiJqijNGduttk9a4dSP4vMYyoi7DFS3dGmMiZ8x7EjygnUQrd4CJUY2B7kzaMun3XkaYwFARY2YrQH3phEsW9rYKuKxec6zR3R4yhTEtRQybLg4ZqD4MvHTW629VvSeQFgLyunf9s9isG7eX1MQqyAyxtz8qJw4uz4AKAr3dgrTi37j7qbPQqSXzaApxE3MXtB91WjYybDPwsXzKvEGYRSJsf6LHfVHKbTpfQ3HQ5aMCYBQJwo4FNf8x9dg1fgcNTpSosiUWhEi75JUDu6DMCzGWBBiR6DNT6PwGrjNnAyU3WAg9mCxLHoiiZjx6pc2EgPircSd1AgpNvgMohdU2U2j3NFmiMazymoYwi5i2EPPWjtyTRYRN\\\",\\\"data\\\":\\\"0141409be670f26e3a9d0fa3e4da555e334e7b5db53d6fd88e9e2e13d5b6a0f5e3ed2166b39cf6dce8e8282a30ae5e11bab9d92676d134fe5edff4c73235e2aec6b7c5fd002f0d000a2d01bec1923ea08fa066e56ba46557a9b5ecf3da82c484b7010d77a1650e7cdda12e4dd6fe9fbf004331aa46a6452d01bec1923ea08fa066e56ba46557a9b5ecf3da82c484b7010d77a1650e7cdda12e4dd6fe9fbf004331aa46a645\\\",\\\"timestamp\\\":\\\"1711936582\\\",\\\"type\\\":\\\"4\\\",\\\"amount\\\":\\\"50000.00000000\\\",\\\"applied\\\":\\\"12\\\",\\\"checksum\\\":\\\"e4823660dd8a05e6fdcba47b0ee8811ab28aa76ee386df3622e2450faa174bca797fbb65b73ac44da97546fd\\\",\\\"from\\\":{\\\"1\\\":\\\"50000.01000000\\\"},\\\"to\\\":{\\\"125D6XDzTZzQUWsyQZmQZmQZmQZmQZmQZmQZmQZmQZmQb8t25\\\":\\\"50000.00000000\\\"},\\\"fee\\\":\\\"0.01000000\\\",\\\"totalAmount\\\":\\\"50000.01000000\\\"}]\",\r\n    \"Superblock segments\": \"{}\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n\nNote: The block format is essentially the same as for the method `getlastblocks` and the transaction details are the same as for the method `gettransaction`.\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/get-last-blocks",
    "title": "Get Last Blocks",
    "description": "",
    "content": "## Get Last Blocks\n\nReturns the last 10 blocks as JSON objects.\n\n### Method: `getlastblocks`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred while fetching one or more of the blocks. |\n\n### Output:\n\n* success: list of blocks in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result:\n\n### Example:\n\nGET http://localhost:8081/getlastblocks\n\n```\n{\r\n  \"result\": [\r\n    {\r\n      \"Block Number\": \"141\",\r\n      \"Version\": \"11\",\r\n      \"Block Checksum\": \"5ac6e40110fed2f51247e9e4c4d88aaed40210930b8107c2613e3c23f11d670ec6308aa596737d3b875e8d36f5ac4c27bcc89108160f01f6766c50a87b40e8ff\",\r\n      \"Last Block Checksum\": \"992e330ab42a476f5d2bbd040a68f97fad85f5dde467918813ba8a91f6fe4cdbfcc9380a62cb716df21ac49438842efa1c63377dd709b13302a9cab0e909b186\",\r\n      \"Wallet State Checksum\": \"086d138f4dbfc4b451e1ab6cf668920616293b50139151d23a74ef82673e73d6a9e14a001f52c87c5e44070e04123604543f6ee2e5ffa916a0fb9560b20dbb63\",\r\n      \"RegName State Checksum\": \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n      \"Sig freeze Checksum\": \"86f20b9fb5f2c3bb251da877718cdfa3a5f56e0cf14f5793ae5ee9177e3b57acd9db7b6b65ecae303eb7bab745405773a5045964b734e6fe45a7208bde1ad95a\",\r\n      \"PoW field\": \"null\",\r\n      \"Timestamp\": \"1711940528\",\r\n      \"Difficulty\": \"11730489520294945089\",\r\n      \"Hashrate\": \"2999\",\r\n      \"Compacted Sigs\": \"False\",\r\n      \"Signature count\": \"3\",\r\n      \"Required Signature count\": \"2\",\r\n      \"Total Signer Difficulty\": \"497037650.71164806\",\r\n      \"Required Signer Difficulty\": \"5100000.00000000\",\r\n      \"Transaction count\": \"0\",\r\n      \"Transaction amount\": \"0.00000000\",\r\n      \"Total fees\": \"0.05787037\",\r\n      \"Signatures\": \"[{\\\"blockNum\\\":141,\\\"blockHash\\\":\\\"WsbkARD+0vUSR+nkxNiKrtQCEJMLgQfCYT48I/EdZw7GMIqllnN9O4dejTb1rEwnvMiRCBYPAfZ2bFCoe0Do/w==\\\",\\\"signature\\\":\\\"W4IrIKPr0sjDslfZE/JQrIw8KBg5TFKlwrPt3KmZUNPtOO0Fk4s/zUdvuP5cOyFhk0B5HzxB2zNVJ2k/hyZjClmT0KcxjxfjEBpWgchzK/pFQ/Vjia3LmRnacoaZeqh6MHxU5dc+4ZgM2e7cLxuAZFtCgzWHL9Oq8n+rees87nuT/ikWjhp2s/sxRsg2dipsQ9kbfK+wEbSiuVAYWb33qO5oic9ckZLxQGTUaEZrzZaFQc+A8OXr3a8M75mmYyQd3tg6+YL8HMufEB7gU659gXYJjv/QMfKP5M33IGP26gdhv67HdjXjPSQWUzN8/7ELU7/CMO7YBYhuDUgDF0oKsw==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"AZCQzUzcufMr3dRSxxy9lb+U9DNbgieu6Nk/CRAwn+if2d0zz/SSo/zwRhBhBrIN\\\",\\\"addressNoChecksum\\\":\\\"AZCQzUzcufMr3dRSxxy9lb+U9DNbgieu6Nk/CRAwn+if2d0zz/SSo/zwRhBh\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":63,\\\"solution\\\":\\\"+Jr2wf9M7m/4EYefb5A0EUZclf2dPZrk9DZuzWcweSYYaf9ehfSVGGaJ+ll3GcrdTJfuaooRSr+r9lXEawFJUw==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAAwxG9K0FsStvIr81nN+lqw8QazZseS2nDcpxjgJDFz8nLTgCbM5PmmGUpGqIOwLd9ZMrCnztPGRwtq60ZxmTuF/aIP7CZbxX2i7AFGwaGcp0G2SOLqRYlkwQpNdtNcBVQjnRCu/k0IPebxZZZzPbwAqkLH1YaeCzfAobEdWHSwvJF4uXIWHlsh/rUHX5/pqd8iM1f+1ZLCzjFpH4o86oQNWv5BHYaqFw9espkcYpm76jsLExYHztSWuw8kJOeJPcSNWCHsZzVEwxanQYRz8dn7XUb17dsO9Yn28R2OYzfIePiyucJYNsYhTyrwRrj1aimi8b1zlK7m34T7ISjRu9gDQMAAAABAAE=\\\",\\\"checksum\\\":\\\"ZItPJoBgarW5wC25NojMkPM2nRhQJAUVOcI6GwSHQlj31eu48ixaYeln7d+ap5sQUvhoO+hsOUDPqflTEgAAAA==\\\",\\\"difficulty\\\":\\\"234338752.83116645\\\",\\\"bits\\\":3896268959389794361}},{\\\"blockNum\\\":141,\\\"blockHash\\\":\\\"WsbkARD+0vUSR+nkxNiKrtQCEJMLgQfCYT48I/EdZw7GMIqllnN9O4dejTb1rEwnvMiRCBYPAfZ2bFCoe0Do/w==\\\",\\\"signature\\\":\\\"RMwZE9XpcMkrO7uo4wecVXkWSN5k8WfQERGv/tWZnK8Tv/3IgsBp34ghcHq3eq2bDN8MwFtRs1xztsy9n5oTb01SG038QZc8Z+H9g2eHPJpU/1LBB2euIil0TjWxLgX4u5mmmiGXMmkS6fYebYniskN9C7pbOiAdf+rN6Ea2QYatlTTGRPtra4QeBMidrjVpjOnwVuqAuQIIKIuBENu4jSptd6UNV8y/eGFVoo7/iBUqrJ6704lnLeaxWM0oFyjXBiYFVCHFpXObnfQCp2gJjaY1568OIxmqK8kluzyisGHqhHmgfsEKtXmweJhC6HOByen2lAYXpA2hvnOErBWSOA==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZFYZkO\\\",\\\"addressNoChecksum\\\":\\\"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZF\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":54,\\\"solution\\\":\\\"tMfC+E0J5FblvH5C7Yz89mN9mX7fGwR0Cr4gj8qOdMuN1Qf7MPR+eobmG5wCiJLEktmEDaO4J1FuYSYMimsDig==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAA4UuqtJql9hKoLWp/ZSHtFhG9NZKWRghWuaPvOkNn6tSjqcv5PtAh8OYdPtCIfdblgbtVyIohBjuwhAP9PL6uDFUnfVgle0z1xjDPLG/kapfXduZNRPbMB4STj/2h4yq71ar62lxNsc/9q8k/ZoDb9dIb62ZJ9zmWXW/+cIMmdd/hK8nzp28BDGKUSkRGkp4SWHw1FuRDXNmKrp5QwnFbxQL4Qiorrm7JF8O3TOLGoCk8ctALDwzAhHeLdvpBL+I1Np6fiuWfAlN1fnfJXnbJfZNWoj6AGdYkDGtA4lmgtBT2C88uWzja8G3yReOOcHlu87wglSEKSGn+3a+5mzeWwQMAAAABAAE=\\\",\\\"checksum\\\":\\\"rNNM7/zYFywZPH/NwhLEWv3qwBc+sf2H7knEwbHDakAT5wp/ltRUE2E4EwtXQk+eaxH9iefLPt2Bbci7QgAAAA==\\\",\\\"difficulty\\\":\\\"64359962.47808522\\\",\\\"bits\\\":3909893896016092478}},{\\\"blockNum\\\":141,\\\"blockHash\\\":\\\"WsbkARD+0vUSR+nkxNiKrtQCEJMLgQfCYT48I/EdZw7GMIqllnN9O4dejTb1rEwnvMiRCBYPAfZ2bFCoe0Do/w==\\\",\\\"signature\\\":\\\"2ftD6+81Fvxj2MaN5nzFUkG+hD8UqE0+jqOOyh0SSbpQm5d1X6K4AZpyAj3a/AcOWeVVpBV3EgsSrB7+haIriXW7AKMs4e1UGugt2ddErSwpVMbZELdov3OEekJoXQGu7vvAmsaarWlJxUyi+CfOVeydkhjr1UMM/qGjITjL65KDzoH/SL73jY+qEwyGBI87EEJ0IFdhYLHVsUOWd6aIAL4kD7gPxUNUoYz3m+s8GDiwm3kP7MLJja9E1rZ7m4ccgl1X83HLJS0kE1GVwdGdNYxWrVzUi7PxLFYu68RvBQ0ahPdGGEKn/rLDH9834qdiZfZaFjNPPu/uk3WJtoZQOw==\\\",\\\"recipientPubKeyOrAddress\\\":{\\\"version\\\":1,\\\"addressWithChecksum\\\":\\\"AX/5B43yaFLWKrgwFEvbKh8GK2nm/OHd/WxYoYLncQSWuHo1Ta5Lzw+o57XoCFi8\\\",\\\"addressNoChecksum\\\":\\\"AX/5B43yaFLWKrgwFEvbKh8GK2nm/OHd/WxYoYLncQSWuHo1Ta5Lzw+o57Xo\\\",\\\"nonce\\\":null,\\\"pubKey\\\":null},\\\"powSolution\\\":{\\\"blockNum\\\":109,\\\"solution\\\":\\\"/r2nTNsRX9+RYQKSeQUbouALPEvkGGU6DDdhQDVT390LpisQ8daqkPgP81bdyLb0t+Sh7LNf/jFlz7EK276yZA==\\\",\\\"signingPubKey\\\":\\\"AgAAAAAAAQAA5asTegwBLItZTX70IZVtEDKAmrrJ93AXV/NVIkbF7/hMPkUn6rDfIaCkSRrOydxADtwexhGkzw6Mvizi1kfQVxHnZQwohGSUGHVgxZB5C6Y9rMawrwpkVlaMD+gliaPGroiOrgoYXBPgC44Jhucq6BWHCvDmP1os7UmiT/cz2qUE2RFrQk/K0enlZUT3vEezqgoqa+FekL6320D+kIS3KPCjRPpHYDBHygASKfAHiuA59p/N+MHj4nViG3RddSSY4/7b02l7WVcSEZnFWz42uvf9g+zRf/fZHc4dOiADUyuz7SLTrHuQVI3GeCMnJQZTUJS/RhwaE+YvhnI+FYq/WQMAAAABAAE=\\\",\\\"checksum\\\":\\\"c573X/+P3d6tR82LkmTUME8crPONQWBxZuyVlStXmKGXN+h5goMYRCFEnoPXROwYE8+uf/pcBTleepmnFQAAAA==\\\",\\\"difficulty\\\":\\\"198338935.40239639\\\",\\\"bits\\\":3897205330183862533}}]\",\r\n      \"Sig Checksum\": \"7be56a933c134a92d5dee43d92b102110313208d24342df4588c03e9f34f0e63dff0a462d091494e9fdeec79c96aecc4b4ebf9aad61a2b422e3df23ed7660357\",\r\n      \"Signer Bits\": \"0000000000000000\",\r\n      \"TX IDs\": \"[]\",\r\n      \"Last Superblock\": \"0\",\r\n      \"Last Superblock checksum\": \"null\"\r\n    },\r\n    ...\r\n  ],\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n\nNote: the resulting block object is exactly the same as for the `getblock` method, except that this method currently does not support returning data as binary hexadecimal strings.\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/get-mining-block",
    "title": "Get Mining Block",
    "description": "",
    "content": "## Get Mining Block\n\nRequests a block to begin working on a PoW solution. This method is primarily meant to support mining pool operation, so that miners do not need to function as DLT nodes and can simply request work units from the pool controller or another designated DLT Node.\n\nThe function only returns the relevant block data required for computing the PoW solution.\n\nNote: In a cooperative pool mining, the solution should incorporate the pool controller's wallet address, so that it can be successfully verified by the DLT network. The pool controller is responsible for further reward payouts based on miner participation or any other metric at the pool's discretion.\n\n## Algorithms\n\n| ID  | Name | Description |\r\n| --- | --- | --- |\r\n| -1 | No algorithm | Stop mining. |\r\n| 0 | lowestDifficulty | Pick the block with the lowest difficulty value. |\r\n| 1 | randomLowestDifficulty | Sort blocks from easiest to hardest and pick a random block within the easiest 500 blocks. |\r\n| 2 | latestBlock | Pick the most recent accepted block. |\r\n| 3 | random | Pick a random block. |\n\n### Method: `getminingblock`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| algo | Number | Yes | ID of the desired mining algorithm |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMETER | The required parameter is missing. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: Data required to compute PoW soltuion for the block.\n* fail: JSON encoded error details and the result field set to null\n\n### Example:\n\nGET http://localhost:8081/getminingblock?algo=1\n\n```\n{\r\n  \"result\": {\r\n    \"num\": 233456,\r\n    \"ver\": 4,\r\n    \"dif\": 11730489520294945000,\r\n    \"chk\": \"vq00ZxZ...QYMCaRmn7GAMhHx4=\",\r\n    \"adr\": \"AVB+ikpJqpX6K+dZriTTbuQ/Tt6Eh4oQ3pKpelESHnGD1T0769Sm/ERgb0kCZoNo\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/get-registered-names-list",
    "title": "Get Registered Names List",
    "description": "",
    "content": "## **Debug only**\n\n## Get Registered Names List\n\nReturns registered names, capped to the first 50 entries. This function is primarily used when debugging or testing and has very little value in production use.\n\n### Method: `regNameList`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: Registered Names as a JSON-encoded list in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/regNameList\n\n```\n{\r\n  \"result\": [\r\n    {\r\n      \"name\": \"409be670f26e3a9d0fa3e4da555e334e7b5db53d6fd88e9e2e13d5b6a0f5e3ed2166b39cf6dce8e8282a30ae5e11bab9d92676d134fe5edff4c73235e2aec6b7c5\",\r\n      \"capacity\": \"10\",\r\n      \"expirationBlockHeight\": \"1728404\",\r\n      \"updatedBlockHeight\": \"447\",\r\n      \"allowSubnames\": \"False\",\r\n      \"subnamePrice\": \"0.00000000\",\r\n      \"subnameFeeRecipient\": \"null\",\r\n      \"dataRecords\": {},\r\n      \"dataMerkleRoot\": \"null\",\r\n      \"recoveryHash\": \"01bec1923ea08fa066e56ba46557a9b5ecf3da82c484b7010d77a1650e7cdda12e4dd6fe9fbf004331aa46a645\",\r\n      \"nextPkHash\": \"01bec1923ea08fa066e56ba46557a9b5ecf3da82c484b7010d77a1650e7cdda12e4dd6fe9fbf004331aa46a645\",\r\n      \"signaturePk\": \"010000000000020000ec...fb682dabdcce76903000000010001\",\r\n      \"signature\": \"10a7c0de5fb682d2838a...25146472a435e47b48edb5b23f5bd\"\r\n    }\r\n  ],\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/get-transaction",
    "title": "Get Transaction",
    "description": "",
    "content": "## Get Transaction\n\nReturns the information about a specified transaction.\n\n### Method: `gettransaction`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| id | String | Yes | Transaction id of the transaction to retrieve |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMETER | The specified transaction id was invalid. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred while fetching the transaction details. |\n\n### Output:\n\n* success: transaction information JSON encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/gettransaction?id=11-284bKK4GvGV9stfEGqu1CP4A9T3tTzrbkUsUd2JestPVE3KDPM5Um7sn3Dfv4\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"11-284bKK4GvGV9stfEGqu1CP4A9T3tTzrbkUsUd2JestPVE3KDPM5Um7sn3Dfv4\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"11\",\r\n    \"nonce\": \"313950\",\r\n    \"signature\": \"54b6315260a94d...6b11ba166a16472040dae03\",\r\n    \"pubKey\": \"JHgSS7hbUNnYWsXgT...ohdU2U2j3NFmiMazymoYwi5i2EPPWjtyTRYRN\",\r\n    \"timestamp\": \"1711936575\",\r\n    \"type\": \"0\",\r\n    \"amount\": \"500000.00000000\",\r\n    \"applied\": \"12\",\r\n    \"checksum\": \"c81b2017498e7c838d1d2d960c80e2c18a102959680414dd37ef143bcc777d7796b171d873683f93425a91fd\",\r\n    \"from\": {\r\n      \"1\": \"500000.01000000\"\r\n    },\r\n    \"to\": {\r\n      \"4L5vswa8yS9VKsZzDJ2ry9gWY7KQon5bkvhG1CUuepkwvcy1xQmLsHA9DPmCDbufr\": \"500000.00000000\"\r\n    },\r\n    \"fee\": \"0.01000000\",\r\n    \"totalAmount\": \"500000.01000000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/get-unspent-transaction-outputs-stats",
    "title": "Get Unspent Transaction Outputs Stats",
    "description": "",
    "content": "## Get Unspent Transaction Outputs Stats\n\nReturns statistical information about unspent transaction outputs for the currently accepted block. This function is provided\r\nto improve compatibility with Bitcoin-based or derivative exchanges.\r\nPlease note that due to the differences in technology, the information returned by this API call differs from the results of calling\r\na similar function in Bitcoin's API.\r\nFor Ixian, only the as-yet unapplied transactions are included in the calculation.\n\n### Method: `gettxoutsetinfo`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: statistics about unapplied transactions\n\n### Example:\n\nGET http://localhost:8081/gettxoutsetinfo\n\n```\n{\r\n\t\"result\": {\r\n\t\t\"height\": 432189,\r\n\t\t\"bestblock\": \"oqXr3eKVDkYao7BxABnOfzYjXvvUIEbWeDXjGNasQl3A2Z2327QU/7sW3rw=\",\r\n\t\t\"transactions\": 44,\r\n\t\t\"txouts\": 49,\r\n\t\t\"total_amount\": \"50000.00005000\"\r\n\t},\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/get-wallet",
    "title": "Get Wallet",
    "description": "",
    "content": "## Get Wallet\n\nReturns the information about a specified address/wallet.\n\n### Method: `getwallet`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| id | String | Yes | Wallet address to retrieve |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\nNote: Attempting to get the details of an invalid value will return empty data (no public key, balance = 0)\n\n### Output:\n\n* success: wallet information JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/getwallet?id=1HT1RvL3bujSsy3q4FR86Kfe8ixwdQVcGf27qcSryUFmV15d3\n\n```\n{\r\n\t\"result\": {\r\n\t\t\"id\": \"1JKZFqQs4yiH6Dq4bfom7xcpL6zG53DrjcY6HD9QJ6cRWmXdq\",\r\n\t\t\"balance\": \"99880008.79095943\",\r\n\t\t\"type\": \"Normal\",\r\n\t\t\"requiredSigs\": \"1\",\r\n\t\t\"allowedSigners\": \"null\",\r\n\t\t\"extraData\": \"null\",\r\n\t\t\"publicKey\": \"00020000...3000000010001\"\r\n\t},\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/get-wallet-list",
    "title": "Get Wallet List",
    "description": "",
    "content": "## **Debug/Testnet only**\n\n## Get Wallet List\n\nReturns wallets from the wallet list, capped to the first 50 entries. This function is primarily used when debugging or testing and has very little value in production use.\n\n### Method: `walletlist`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: wallet information as a JSON-encoded list in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/walletlist\n\n```\n{\r\n  \"result\": [\r\n    {\r\n      \"id\": \"3oCdu1pZxPBFKqnAXAec2D9WqFX7RPDwNF8bWS7KUqmGnXRm7tKWkVUEVJvYhXiZM\",\r\n      \"balance\": \"99900004.29656710\",\r\n      \"type\": \"Normal\",\r\n      \"requiredSigs\": \"1\",\r\n      \"allowedSigners\": \"null\",\r\n      \"extraData\": \"null\",\r\n      \"publicKey\": \"0100000000000200...ee7103000000010001\"\r\n    },\r\n\t...\r\n\t\"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands",
    "title": "Ixian DLT Specific API Commands",
    "description": "Ixian DLT Specific API Commands",
    "content": ""
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/miner-stats",
    "title": "Miner Stats",
    "description": "",
    "content": "## Miner Stats\n\nReturns miner stats of the node.\n\n### Method: `minerstats`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: miner stats JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/minerstats\n\n```\n{\r\n\t\"result\": {\r\n\t\t\"Hashrate\": 101,\r\n\t\t\"Search Mode\": \"randomLowestDifficulty\",\r\n\t\t\"Current Block\": 5,\r\n\t\t\"Current Difficulty\": 11730489520294945089,\r\n\t\t\"Solved Blocks (Local)\":0,\r\n\t\t\"Solved Blocks (Network)\":0,\r\n\t\t\"Empty Blocks\": 135,\r\n\t\t\"Last Solved Block\": 0,\r\n\t\t\"Last Solved Block Time\": \"Never\"\r\n\t},\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/presence-list",
    "title": "Presence List",
    "description": "",
    "content": "## Presence List\n\nReturns the presence list information.\n\n### Method: `pl`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: presence list JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/pl\n\n```\n{\r\n  \"result\": [\r\n    {\r\n      \"version\": 1,\r\n      \"wallet\": {\r\n        \"version\": 1,\r\n        \"addressWithChecksum\": \"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZFYZkO\",\r\n        \"addressNoChecksum\": \"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZF\",\r\n        \"nonce\": null,\r\n        \"pubKey\": null\r\n      },\r\n      \"pubkey\": \"AQAAAAAAAgAA7...u7w/us52kDAAAAAQAB\",\r\n      \"metadata\": null,\r\n      \"addresses\": [\r\n        {\r\n          \"version\": 2,\r\n          \"device\": \"izLPtZb0b0qi3AWT061Ihw==\",\r\n          \"address\": \"10.23.11.2:10000\",\r\n          \"type\": \"M\",\r\n          \"nodeVersion\": \"xdc-0.9.2a\",\r\n          \"lastSeenTime\": 1711940304,\r\n          \"signature\": \"Rxcejj...mrezzoITgxAN9rS5eBg9Y=\"\r\n        }\r\n      ],\r\n      \"powSolution\": {\r\n        \"blockNum\": 54,\r\n        \"solution\": \"tMfC+E0J5FblvH5C7Yz89mN9mX7fGwR0Cr4gj8qOdMuN1Qf7MPR+eobmG5wCiJLEktmEDaO4J1FuYSYMimsDig==\",\r\n        \"signingPubKey\": \"AgAAAAAAAQAA4...AAAABAAE=\",\r\n        \"checksum\": \"rNNM7/zYFywZPH/NwhLEWv3qwBc+sf2H7knEwbHDakAT5wp/ltRUE2E4EwtXQk+eaxH9iefLPt2Bbci7QgAAAA==\",\r\n        \"difficulty\": \"64359962.47808522\",\r\n        \"bits\": 3909893896016092700\r\n      }\r\n    },\r\n    ...\r\n  ],\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/rescan-blockchain",
    "title": "Rescan Blockchain",
    "description": "",
    "content": "## Rescan Blockchain\n\nRescans the entire blockchain and fills the activity file with information relevant to the loaded wallet.\n\n### Method: `rescanblockchain`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| from | Number | No | Start scanning from this blockheight upward. Default 0 |\n\n### Output:\n\n* success: notification that the rescan has been started\n* fail: JSON encoded details with a non-null error and a null result:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_MISC\\_ERROR | Activity scanner is already running. |\n\nNote: Current status of the blockchain rescan can be viewed from the `/status?vv=true` API output, specifically `Blockchain Scanning Active` and `Activity Scanner Last Block`\n\n### Example:\n\nGET http://localhost:8081/rescanblockchain?from=1000000\n\n```\n{\r\n\t\"result\": \"Started activity rescan.\",\r\n\t\"error\": null,\r\n\t\"id\":null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/set-block-selection-algorithm",
    "title": "Set Block Selection Algorithm",
    "description": "",
    "content": "## Status\n\nModifies the running DLT Node or Miner software and changes the way blocks are selected for mining. It is also possible to activate or deactivate mining using this method.\n\n## Algorithms\n\n| ID  | Name | Description |\r\n| --- | --- | --- |\r\n| -1 | No algorithm | Stop mining. |\r\n| 0 | lowestDifficulty | Pick the block with the lowest difficulty value. |\r\n| 1 | randomLowestDifficulty | Sort blocks from easiest to hardest and pick a random block within the easiest 500 blocks. |\r\n| 2 | latestBlock | Pick the most recent accepted block. |\r\n| 3 | random | Pick a random block. |\n\n### Method: `setBlockSelectionAlgorithm`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| algorithm | Number | Yes | New block selection algorithm. See the values above. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: JSON result with all null values\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/setBlockSelectionAlgorithm?algorithm=1\n\n```\n{\r\n\t\"result\": null,\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/status",
    "title": "Status",
    "description": "",
    "content": "## Status\n\nReturns the status of the node.\n\nNote: This function overrides the `status` method of the IXICore implementation and returns more details about the DLT node.\n\n### Method: `status`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| verbose | Boolean | No | Additional details are returned. |\r\n| vv | Boolean | No | Additional details are returned. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: status JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/status\n\n```\n{\r\n  \"result\": {\r\n    \"Core Version\": \"xcore-0.9.2a\",\r\n    \"Node Version\": \"xdc-0.9.2a\",\r\n    \"Network type\": \"test\",\r\n    \"My time\": 1711941545,\r\n    \"Network time difference\": 0,\r\n    \"Real network time difference\": 0,\r\n    \"My External IP\": \"10.23.11.2\",\r\n    \"My Listening Port\": 10000,\r\n    \"Node Deprecation Block Limit\": 4600023,\r\n    \"Update\": \"\",\r\n    \"DLT Status\": \"Active\",\r\n    \"Core Status\": 1,\r\n    \"Block Processor Status\": \"Running\",\r\n    \"Block Height\": 174,\r\n    \"Block Version\": 11,\r\n    \"Block Signature Count\": 3,\r\n    \"Block Total Signer Difficulty\": \"353523619.92054555\",\r\n    \"Block generated seconds ago\": 15,\r\n    \"Network Block Height\": 174,\r\n    \"Node Type\": \"M\",\r\n    \"Connectable\": true,\r\n    \"Required Consensus\": 2,\r\n    \"Signer Difficulty\": \"10000000.00000001\",\r\n    \"Signer Bits\": \"f4caab297fad0137\",\r\n    \"Signer Hashrate\": 159935,\r\n    \"Signer Last PoW Solution\": {\r\n      \"blockNum\": 161,\r\n      \"solution\": \"tMfC+E0J5FblvH5C7Yz89mN9mX7fGwR0Cr4gj8qOdMuN1Qf7MPR+eobmG5wCiJLEktmEDaO4J1FuYSYMlibShw==\",\r\n      \"checksum\": \"F4N1XA+JRPVsgs7GUlh9XSoi4BYRCf+Z+8rDc92p9cGVonc7eutKslw2dSQz9C8z79luWCQkSSL3SXTwpwAAAA==\",\r\n      \"difficulty\": \"25574525.73630105\",\r\n      \"bits\": \"4922f74974f0a736\"\r\n    },\r\n    \"Signer Active PoW Solution\": {\r\n      \"blockNum\": 108,\r\n      \"solution\": \"tMfC+E0J5FblvH5C7Yz89mN9mX7fGwR0Cr4gj8qOdMuN1Qf7MPR+eobmG5wCiJLEktmEDaO4J1FuYSYMlCO4Qg==\",\r\n      \"checksum\": \"AJ5oD5hdeL6gj0J+DXpsE/DDvLPumoHASAE4Hqulo4PDgyNh7MssFSFinZHAGImFhN5tiHJLaP/43arFZAAAAA==\",\r\n      \"difficulty\": \"42620583.04018759\",\r\n      \"bits\": \"68fff8ddaac56436\"\r\n    },\r\n    \"Wallets\": 3,\r\n    \"Presences\": 3,\r\n    \"Supply\": \"199949999.95000000\",\r\n    \"Applied TX Count\": 6,\r\n    \"Unapplied TX Count\": 0,\r\n    \"Names\": 1,\r\n    \"Names Reward Pool\": \"49990.56712969\",\r\n    \"Masters\": 3,\r\n    \"Relays\": 0,\r\n    \"Clients\": 0,\r\n    \"Queues\": {\r\n      \"RcvLow\": 0,\r\n      \"RcvMedium\": 0,\r\n      \"RcvHigh\": 0,\r\n      \"SendClients\": 0,\r\n      \"SendServers\": 0,\r\n      \"Logging\": 1,\r\n      \"Pending Transactions\": 0,\r\n      \"Storage\": 0,\r\n      \"Inventory\": 660,\r\n      \"Inventory Processed\": 660,\r\n      \"Activity\": 0\r\n    },\r\n    \"WS Checksum\": \"4080272478b10685b210220ac65434db2b4d481adc2da3b0bebf2491768efd8327685d672c3e772a5358db700d34456075142f1e7547bfe81f643c3cb8bae1d6\",\r\n    \"RN Checksum\": \"5679fbdcdf5694527dd5f2e36983ca2d6860d32d153b485a1f0529bbb788cecfbf2e5298c1b22bcb020d52de809406db8d54087a708483d3d7435178034aaaa0\",\r\n    \"Blockchain Scanning Active\": false,\r\n    \"Activity Scanner Last Block\": 0,\r\n    \"Network Clients\": [\r\n      \"10.23.11.2:52752\",\r\n      \"10.23.11.2:52811\"\r\n    ],\r\n    \"Network Servers\": []\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/submit-mining-solution",
    "title": "Submit Mining Solution",
    "description": "",
    "content": "## Submit Mining Solution\n\nSubmits the given solution to the PoW mining problem for the specified block.\n\n### Method: `submitminingsolution`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| nonce | String | Yes | Nonce value which satisfies the difficulty. |\r\n| blocknum | Number | Yes | Solved block number. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMETER | One or more of the required parameters are missing. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: Boolean value true in the result field if the solution was accepted, or false if it was not\n* fail: JSON encoded error details and the result field set to null\n\n### Example:\n\nGET http://localhost:8081/submitminingsolution?nonce=ca82dacd91...6460d20b7b2a\\&blocknum=55\n\n```\n{\r\n    \"result\": true,\r\n    \"error\": null,\r\n    \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/supply",
    "title": "Supply",
    "description": "",
    "content": "## Supply\n\nReturns current total $IXI supply in the network.\n\n### Method: `supply`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: IXI supply as a decimal number in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/supply\n\n```\n{\r\n\t\"result\": \"200020026.20262112\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/transaction-list",
    "title": "Transaction List",
    "description": "",
    "content": "## Transaction List\n\nReturns the list of all transactions in the redacted window.\n\n### Method: `tx`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| fromIndex | Number | No | Starting index (used for splitting the results into pages). |\r\n| count | Number | No | Number of results to fetch. By itself, this parameter is useful for fetching only the recent history, but combined with `fromIndex` this parameters enables fetching results in pages. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: transaction list JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/tx\n\n```\n{\r\n  \"result\": {\r\n    \"11-284bKK4GvGV9stfEGqu1CP4A9T3tTzrbkUsUd2JestPVE3KDPM5Um7sn3Dfv4\": {\r\n      \"id\": \"11-284bKK4GvGV9stfEGqu1CP4A9T3tTzrbkUsUd2JestPVE3KDPM5Um7sn3Dfv4\",\r\n      \"version\": 7,\r\n      \"blockHeight\": \"11\",\r\n      \"nonce\": \"313950\",\r\n      \"signature\": \"54b6315260a9c...ae03i5i2EPPWYRbUN\",\r\n      \"pubKey\": \"JHgSS7hbUNnYWsX...i5i2EPPWjtyTRYRN\",\r\n      \"timestamp\": \"1711936575\",\r\n      \"type\": \"0\",\r\n      \"amount\": \"500000.00000000\",\r\n      \"applied\": \"12\",\r\n      \"checksum\": \"c81b2017498e7c838d1d2d960c80e2c18a102959680414dd37ef143bcc777d7796b171d873683f93425a91fd\",\r\n      \"from\": {\r\n        \"1\": \"500000.01000000\"\r\n      },\r\n      \"to\": {\r\n        \"4L5vswa8yS9VKsZzDJ2ry9gWY7KQon5bkvhG1CUuepkwvcy1xQmLsHA9DPmCDbufr\": \"500000.00000000\"\r\n      },\r\n      \"fee\": \"0.01000000\",\r\n      \"totalAmount\": \"500000.01000000\"\r\n    },\r\n    ...\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/unapplied-transaction-list",
    "title": "Unapplied Transaction List",
    "description": "",
    "content": "## Unapplied Transaction List\n\nReturns the list of unapplied transactions in the memory pool.\n\n### Method: `txu`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| fromIndex | Number | No | Starting index (used for splitting the results into pages). |\r\n| count | Number | No | Number of results to fetch. By itself, this parameter is useful for fetching only the recent history, but combined with `fromIndex` this parameters enables fetching results in pages. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: unapplied transaction list JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/txu\n\n```\n{\r\n\t\"result\": {\r\n\t\t\"125-Eau8yftyoMnt316Hb8YJvzc9jZvSLUwdq2UxhppWFpng\": {\r\n\t\t\t\"id\": \"125-Eau8yftyoMnt316Hb8YJvzc9jZvSLUwdq2UxhppWFpng\",\r\n\t\t\t\"version\": 2,\r\n\t\t\t\"blockHeight\": \"125\",\r\n\t\t\t\"nonce\": \"6178\",\r\n\t\t\t\"signature\": \"0b8afc5d9e1..4eb9e9126b612ee730cb686f657434bbc55cc\",\r\n\t\t\t\"pubKey\": \"1JKZFqQs4yiH6Dq4bfom7xcpL6zG53DrjcY6HD9QJ6cRWmXdq\",\r\n\t\t\t\"timeStamp\": \"1548942726\",\r\n\t\t\t\"type\": \"0\",\r\n\t\t\t\"amount\": \"20000.00000000\",\r\n\t\t\t\"applied\":\"0\",\r\n\t\t\t\"checksum\": \"f1cf2631009697fd8724091391e5990a281724393fc37ab6d5091c49d63236fe\",\r\n\t\t\t\"from\": {\r\n\t\t\t\t\"1\": \"20000.00005000\"\r\n\t\t\t},\r\n\t\t\t\"to\": {\r\n\t\t\t\t\"15iYQBgVhq4JeY3TUfNaMBNFkz27UCQWFjjay14C4b3EuHofG\": \"20000.00000000\"\r\n\t\t\t},\r\n\t\t\t\"fee\": \"0.00005000\"\r\n            \"totalAmount\": \"20000.00005000\"\r\n\t\t},\r\n\t\t...\r\n\t},\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-dlt-specific-api-commands/verify-mining-solution",
    "title": "Verify Mining Solution",
    "description": "",
    "content": "## Verify Mining Solution\n\nChecks the given solution against the block's difficulty field to determine if it is valid.\n\n### Method: `verifyminingsolution`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| nonce | String | Yes | Nonce value which satisfies the difficulty. |\r\n| blocknum | Number | Yes | Solved block number. |\r\n| diff | Number | Yes | Difficulty value. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMETER | One or more of the required parameters are missing. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: Boolean value true or false in the result field\n* fail: JSON encoded error details and the result field set to null\n\n### Example:\n\nGET http://localhost:8081/verifyminingsolution?nonce=ca82dacd91...6460d20b7b2a\\&blocknum=55\\&diff=18442206887586635022\n\n```\n{\r\n    \"result\": true,\r\n    \"error\": null,\r\n    \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/guides",
    "title": "Guides",
    "description": "Comprehensive guides to help you navigate and utilize Ixian technologies.",
    "content": "### What's inside?\n\n* Ixian DLT Guides\n* Ixian S2 Guides\n"
  },
  {
    "slug": "/guides/ixian-dlt-guides/dlt-node-configuration-options",
    "title": "DLT Node Configuration options",
    "description": "",
    "content": "## Configuration file\n\nAn alternative to creating a batch or shell script is the Ixian DLT configuration file, which can be used to configure the most important settings.\r\nDefault filename of the config file is **ixian.cfg** but can be changed by using the `--config` CLI parameter\n\nThe format of the file is simple INI (without sections):\n\n* Each option is specified on its own line\n* Option syntax is `option_name = option_value`\n* Whitespace is not important\n* Lines starting with `;` are ignored\n* Option names are case-sensitive\n\nA list of options supported by the config file is:\n\n| Option name | Type | Repeatable | Default | Description |\r\n| --- | --- | --- | --- | --- |\r\n| dltPort | int | No | 10234 | TCP port number for the Master Node, when running on the main network. |\r\n| testnetDltPort | int | No | 11234 | TCP port number for the Master Node, when running on the test network. |\r\n| apiPort | int | No | 8081 | Port for the internal REST API server to listen for commands. Note: This port is only available on the localhost interface (127.0.0.1). |\r\n| apiAllowIp | IPv4 Address | Yes | EMPTY | IP Addresses which are allowed to access the REST API interface. |\r\n| apiBind | Bind Point | Yes | http://localhost:8081 | Additional IP interface on which the internal REST API should listen. The API allows full control over the DLT node, so do not change this unless you are absolutely sure. |\r\n| testnetApiPort | int | No | 8181 | Port for the internal REST API server when the node is operating on the test network. |\r\n| addApiUser | Username:Password | Yes | EMPTY | An additional layer of protection - will require all REST API calls to include the given username and password. |\r\n| externalIp | IP Address | No | EMPTY | Configure this if the external IP address cannot be automatically determined via UPnP. |\r\n| addPeer | Hostname or IP Address | Yes | Seed Nodes | Set this to use different Ixian DLT Mater nodes as seed - this option only has an effect in mainnet mode. |\r\n| addTestnetPeer | Hostname or IP Address | Yes | Seed Nodes | Set this to use different Ixian DLT Mater nodes as seed - this option only has an effect in testnet mode. |\r\n| maxLogSize | int | No | 50 | Size of the Ixian DLT log file (in megabytes), before it is automatically rotated. |\r\n| maxLogCount | int | No | 10 | Number of old (full) log files to keep before deleting the oldest. |\r\n| disableMiner | int | No | 0 | If set to anything other than 0, the built-in Ixian DLT miner will not run. |\r\n| disableWebStart | int | No | 0 | If set to a nonzero value, the DLT node will not open its internal wallet page on startup. |\r\n| forceTimeOffset | int | No | 0 | Forces the local node's time to a different value (when the OS clock does not return the correct time). |\r\n| blockStorage | string | No | sqlite | Selects the storage provider for the block and transaction storage. |\r\n| walletNotify | string | No | EMPTY | OS command to run whenever the local wallet is updated. |\r\n| blockNotify | string | No | EMPTY | OS command to run whenever a new block is received by the DLT node. |\n\nAny repeatable options may be specified more than once. If non-repeatable options are specified multiple times, the last one is used.\n"
  },
  {
    "slug": "/guides/ixian-dlt-guides/dlt-node-data-bootstrap",
    "title": "DLT Node Data Bootstrap",
    "description": "",
    "content": "Note: downloading the bootstrap data files is not a requirement. It is useful in accelerating the synchronization speed of newly deployed Ixian DLT nodes.\n\n## What are magnets\n\nMagnet is a URI scheme for identifying files by their content, via cryptographic hash value rather than by their location.\n\nEach magnet link fetches a torrent file, which then downloads a zip archive containing the Ixian block sequence specified in it's name.\n\n## How to download\n\nYou will need to use a torrent software such as [Transmission](https://transmissionbt.com). It supports Windows, Linux and macOS and has both GUI and commandline support.\r\nFor commandline, install the `transmission-cli` repo package.\n\nFor GUI versions: Choose File -> Open URL and copy paste the magnet URIs below to fetch the torrent.\n\nFor commandline versions: type `transmission-cli MAGNET_LINK_HERE -w ~/Downloads` . Replace `MAGNET_LINK_HERE` with one of the links in the Ixian Data section.\n\n## How to install\n\nIf you have the Ixian DLT node running, make sure you shut it down first.\n\nEach downloaded zip archive is between 5 to 10 GB in size and contains the relevant `data` folder files.\n\nUnzip the archive to the Ixian DLT binary folder. The block sequences share the same first and last block and walletstate files, to make sure the blockchain data is consistent and not altered.\n\nOnce the files are unzipped and the data folder contains the requested block sequences, you can start the Ixian DLT node.\n\n## Ixian Data\n\n### Block 0 to 300,000\n\n`magnet:?xt=urn:btih:4f44f5aed6e584d58f5858f49039469ecb467920&dn=data-0-300k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 300,000 to 500,000\n\n`magnet:?xt=urn:btih:a688ee3fcc2c28ad003a23da506c4e34f4d02580&dn=data-300k-500k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 500,000 to 650,000\n\n`magnet:?xt=urn:btih:30dae142b539777deef038efe49c61af3ed05f44&dn=data-500k-650k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 650,000 to 725,000\n\n`magnet:?xt=urn:btih:662ea8b6e3fd685fb4e36a6895a7655daeea2639&dn=data-650k-725k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 725,000 to 800,000\n\n`magnet:?xt=urn:btih:9253446581cbcf5fd6949850784289b89790d6c9&dn=data-725k-800k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 800,000 to 850,000\n\n`magnet:?xt=urn:btih:cc6459dc8715e3098ae4b32a49d9e8e3bfc4e2c8&dn=data-800k-850k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 850,000 to 900,000\n\n`magnet:?xt=urn:btih:cfc970556465bda4da098dbab9265b0cbfba1ac5&dn=data-850k-900k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 900,000 to 1,000,000\n\n`magnet:?xt=urn:btih:13ee621a54f8ed344dd476aae9ed8a206b350e6a&dn=data-900k-1000k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 1,000,000 to 1,100,000\n\n`magnet:?xt=urn:btih:37c413c7d74775e0d5e10c1addd868ea2cfe0e6c&dn=data-1000k-1100k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 1,100,000 to 1,200,000\n\n`magnet:?xt=urn:btih:aa44b7e7a8477b835cab0040bfa69f6ef5e7b1d1&dn=data-1100k-1200k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 1,200,000 to 1,350,000\n\n`magnet:?xt=urn:btih:0c90a83f158ebf46ba1763d7f793af2b581ad095&dn=data-1200k-1350k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 1,350,000 to 1,500,000\n\n`magnet:?xt=urn:btih:2d8e55b920d1bfa6bf74b1aed388eac8059c30a1&dn=data-1350k-1500k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 1,500,000 to 1,625,000\n\n`magnet:?xt=urn:btih:e5516cbc3cfab18c15c1ae28e0c1c4f21af631d5&dn=data-1500k-1625k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 1,625,000 to 1,700,000\n\n`magnet:?xt=urn:btih:6c5d399bbd516fe69944fc734aeb2cf61584495d&dn=data-1625k-1700k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 1,700,000 to 1,800,000\n\n`magnet:?xt=urn:btih:2f7d0aa58d99ecfb7f5a81de1ff712e1be847d83&dn=data-1700k-1800k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 1,800,000 to 1,850,000\n\n`magnet:?xt=urn:btih:8496a21a4cb737af9b140c9713c0fd5955f01d08&dn=data-1800k-1850k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 1,850,000 to 1,870,000\n\n`magnet:?xt=urn:btih:05f900bbdecac1a3c04b438319012247291d93eb&dn=data-1850k-1870k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 1,870,000 to 1,875,000\n\n`magnet:?xt=urn:btih:4cfe0b87aa3709f67ecc2ad687efc7c31544a715&dn=data-1870k-1875k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n\n### Block 1,875,000 to 1,880,000\n\n`magnet:?xt=urn:btih:58aab9ac003c99b54870d44584f41f70e9c4cbbf&dn=data-1875k-1880k.zip&tr=udp%3A%2F%2Ftracker-udp.gbitt.info%3A80%2Fannounce&tr=http%3A%2F%2Ftracker.gbitt.info%2Fannounce`\n"
  },
  {
    "slug": "/guides/ixian-dlt-guides/dlt-node-setup-on-fedora",
    "title": "DLT Node setup on Fedora",
    "description": "",
    "content": "# Installing an Ixian DLT Node on Linux (Fedora)\n\n## Prerequisites\n\n* Operating system: recent version of Fedora Linux\n* RAM: at least 16 GB\n* CPU: i7/i9/Xeon or AMD equivalent processor with at least 2GHz and at least 8 CPU threads\n* Free Disk Space: 1.5 TB, 2 TB Recommended\n* Internet Connection Speed: 50 Mbps symmetrical or higher, 100 Mbps recommended\n\n## Additional requirements\n\n* Ability to forward a port from the public internet to the machine running the DLT Node. (Default port is TCP 10234.)\n\n## Install required software\n\n1. Install the dotnet 8.0 SDK following the guide for your Linux distribution here: [DotNet Installation Guide](https://learn.microsoft.com/en-us/dotnet/core/install/linux).\n\n2. Install additional required packages:\n\n```\ndnf install gcc git make unzip\n```\n\n3. Prepare a directory for the Ixian Project:\n\n```\nmkdir ~/Ixian\r\ncd ~/Ixian\n```\n\n4. Acquire the latest Ixian sources from github. Two repositories are required to build a DLT Master node:\n\n```\ngit clone -b master https://github.com/ProjectIxian/Ixian-Core.git\r\ngit clone -b master https://github.com/ProjectIxian/Ixian-DLT.git\n```\n\nThe directory structure should look like this:\n\n```\n.\r\n..\r\nIxian-Core\r\nIxian-DLT\n```\n\n5. Switch into the `Ixian-DLT` directory and execute rebuild.sh script:\n\n```\ncd Ixian-DLT\r\nsh rebuild.sh\n```\n\nThe script will build all necessary files, which will be located in '~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/'\n\n6. Ixian DLT Node requires the Argon2 library to function. In order to build one for your system, follow these steps:\r\n   ..a. Obtain the Argon2 source code from github:\n\n```\ncd ~/Ixian\r\ngit clone https://github.com/P-H-C/phc-winner-argon2.git\n```\n\n..b. Compile the Argon2 source:\n\n```\ncd phc-winner-argon2\r\nmake\n```\n\n..c. Copy the resulting Argon2 library to the IxianDLT folder. Please note that the file should be renamed to ‘libargon2.so’:\n\n```\ncp libargon2.so.1 ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/libargon2.so\n```\n\n7. Switch to the Ixian binaries folder:\n\n```\ncd ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/\n```\n\n8. (Optional) Download and unpack the bootstrap data files to enable faster synchronization.\n\nFollow the [Data Bootstrap guide](https://docs.ixian.io/guides/dlt_bootstrap.html) to download and install the latest data files.\n\nThe Ixian DLT node is now ready to start.\n\n## Running the software\n\nSwitch to the Ixian DLT binaries folder and issue the command to start the Ixian DLT software:\n\n```\n./IxianDLT\n```\n\nIf you're on a console-only environment with no GUI, issue this command instead:\n\n```\n./IxianDLT --disableWebStart\n```\n\nAlternatively you can also start the Ixian DLT with this command:\n\n```\ndotnet IxianDLT.dll --disableWebStart\n```\n\nThe output should look like this:\n\n![Ixian Console Output](https://projectixian.github.io/assets/images/guide_deb_1.png)\n\n### Creating a wallet\n\nIf this is the first time that you're starting Ixian DLT, a new wallet will be generated for you. You have to set your new wallet's password to proceed. This password will be used to encrypt the ixian.wal wallet file and will be required every time you start the Ixian DLT node.\n\nIt is recommended to periodically copy the wallet to a safe location, preferably on an offline media (USB Key), or a different machine. The file is encrypted using AES256.\r\nThe wallet file is called **ixian.wal**.\n\n### Verifying the status of the DLT Node\n\nWhile the node is running, it will display a logo and some basic information in the command window. Please do not close this window, as closing it will cause the DLT Node to shut down.\n\n![Ixian Run Information](https://projectixian.github.io/assets/images/guide_deb_1.png)\n\nWhen the Ixian DLT Node first starts, the status text will display **synchronizing** while the software is retrieving the required information from the DLT network. When this process has been completed, the status text will change to **active**.\n\nIf the DLT Node is shut down and later restarted, it will have to synchronize again, but since most of the data will already be stored on the local disk, the synchronization phase will be much shorter.\n\n### Using your Ixian wallet\n\nIn order to interact with the running DLT Node and use the built-in wallet software, open a web browser and navigate to [http://localhost:8081](http://localhost:8081).\n\nIf you have configured a different *API Port*, then change the port number in the link like so: **http://localhost:PORT\\_NUMBER**.\n\nThe Ixian built-in Wallet looks like this:\n\n![Ixian Built-In Wallet](https://projectixian.github.io/assets/images/guide_win_7.png)\n\n## Changing the settings\n\nIxian DLT Node settings are provided on the command line when starting the IxianDLT executable. The most important parameters are:\n\n* **-p** DLT Port: If you are for some reason unable to port-forward the default port, 10234, you may use a different port. The `-p` switch will change which port the software uses for DLT communication.\n* **-i** External IP address: The IxianDLT software will use UPnP to try and determine the external IP address of your node. If this fails for some reason, you can specify the external address using the `-i` option.\n* **-a** API Port: This changes the port on which the node accepts API commands, as well as the port on which the built-in wallet operates. If you provide a different API port, then the built-in wallet for the node will be at **http://localhost:API\\_PORT**.\n* **--threads**: Tells the DLT Node how many threads to create for the internal Ixian Miner. Default is 2. Use `--disableMiner` to prevent the DLT Node from mining IXI Coins.\n* **--disableMiner**: Tells the DLT Node not to start the built-in Ixian Miner.\n* **--help**: Displays a short help with some other, less frequently used command options.\n\nIf you need to run the DLT Node with different settings, it can be tedious to type them out every time you wish to start the software. It is recommended to create a shell script (**.sh**) with the options already set. To do this, follow the guide below:\n\n1. Switch to the unpacked Ixian DLT folder. If you have followed the above instructions for building, the command should be `cd ~/Ixian/Ixian-DLT/IxianDLT/bin/Release`.\n2. Create a new script using your preferred text editor. This example uses *vi*: `vi StartIxian.sh`.\n3. Press *i* to switch the VI editor into *'input mode'*.\n4. Type or paste the IxianDLT command into the file. You may use the command below, which includes the most common options, as the starting point.\r\n   `./IxianDLT -p 10234 -a 8081 --threads 2`\n5. Press `Escape` to exit the input mode, then type `:wq` to save the file and quit the VI editor.\n6. Make the script file executable: `chmod u+x StartIxian.sh`.\n7. Use the new \"StartIxian.sh\" file to start the DLT Node with the specified options `./StartIxian.sh`.\n\n## Upgrading the DLT Node software\n\nWhen a new version is released, you can upgrade the software using the following checklist:\n\nNote: It is recommended to backup the wallet file **ixian.wal** before performing any upgrade or changing any settings on the command line.\n\nNote: We assume that you have followed the above instructions and the Ixian directory names are as follows:\n\n| Directory | Path |\r\n| --- | --- |\r\n| Ixian-Core | ~/Ixian/Ixian-Core |\r\n| Ixian-DLT | ~/Ixian/Ixian-DLT |\r\n| Executable | ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0 |\n\nIf you have placed the Ixian source code folders elsewhere, change them in the below description. Furthermore, if you copied the executable files from the bin/Release folder someplace else, you will need to repeat the copy step to overwrite old executable files with new ones.\n\n0. Save the Ixian wallet file: `cp ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/ixian.wal ~/ixian.wal.backup`.\n1. Shutdown the Ixian DLT Node.\n2. Switch to the Ixian-Core directory: `cd ~/Ixian/Ixian-Core`.\n3. Update the sources to the latest version: `git pull`.\n4. Switch to the Ixian-DLT directory: `cd ~/Ixian/Ixian-DLT`.\n5. Update the sources to the latest version: `git pull`.\n6. Compile the new sources: `sh rebuild.sh`.\n7. Start the Ixian DLT Node again. The node will use the existing wallet file and downloaded data, so it will not need to generate a new wallet or synchronize again.\n\n## Configuration file\n\nSee [DLT Node Configuration options](/guides/dlt_config_params.html) for details.\n"
  },
  {
    "slug": "/guides/ixian-dlt-guides/dlt-node-setup-on-macos",
    "title": "DLT Node setup on macOS",
    "description": "",
    "content": "IxianDLT was tested on macOS 10.15 Catalina and newer\n\n# Installing an Ixian DLT Node on macOS\n\n## Prerequisites\n\n* Operating system: macOS 10.15 or higher\n* RAM: at least 16 GB\n* CPU: i3/i5/i7/Xeon or M series\n* Free Disk Space: 1.5 TB, 2 TB Recommended\n* Internet Connection Speed: 50 Mbps symmetrical or higher, 100 Mbps recommended\n\n## Additional requirements\n\n* Ability to forward a port from the public internet to the machine running the DLT Node. (Default port is TCP 10234.)\n\n## Install required software\n\n1. Install dotnet SDK for macOS from here: [dotnet8.0 download](https://dotnet.microsoft.com/en-us/download/dotnet/8.0).\n\n2. Install git from the [Git Download page](https://git-scm.com/download/mac)\n\n3. Prepare a directory for the Ixian Project. The commands should be executed in the *Terminal*:\n\n```\nmkdir ~/Ixian\r\ncd ~/Ixian\n```\n\n4. Acquire the latest Ixian sources from github. Two repositories are required to build a DLT Master node:\n\n```\ngit clone -b master https://github.com/ProjectIxian/Ixian-Core.git\r\ngit clone -b master https://github.com/ProjectIxian/Ixian-DLT.git\n```\n\nThe directory structure should look like this:\n\n```\n.\r\n..\r\nIxian-Core\r\nIxian-DLT\n```\n\n5. Switch into the `Ixian-DLT` directory and download the required NuGet packages:\n\n```\ncd Ixian-DLT\r\ndotnet restore\n```\n\n6. Compile the DLT Node executable in the ‘Release Configuration’:\n\n```\ndotnet build --configuration Release\n```\n\n7. Ixian DLT Node requires the Argon2 library to function. In order to build one for your system, follow these steps:\r\n   ..a. Obtain the Argon2 source code from github:\n\n```\ncd ~/Ixian\r\ngit clone https://github.com/P-H-C/phc-winner-argon2.git\n```\n\n..b. Compile the Argon2 source:\n\n```\ncd phc-winner-argon2\r\nmake\n```\n\n..c. Copy the resulting Argon2 library to the IxianDLT folder. Please note that the file should be renamed to ‘libargon2.dylib’:\n\n```\ncp libargon2.1.dylib ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/libargon2.dylib\n```\n\n8. Switch to the Ixian binaries folder:\n\n```\ncd ~/Ixian/Ixian-DLT/IxianDLT/bin/Release\n```\n\n9. (Optional) Download and unpack the bootstrap data files to enable faster synchronization.\n\nFollow the [Data Bootstrap guide](https://docs.ixian.io/guides/dlt_bootstrap.html) to download and install the latest data files.\n\nThe Ixian DLT node is now ready to start.\n\n## Running the software\n\nSwitch to the Ixian DLT binaries folder and issue the command to start the Ixian DLT software:\n\n```\n./IxianDLT\n```\n\nIf you're on a console-only environment with no GUI, issue this command instead:\n\n```\n./IxianDLT --disableWebStart\n```\n\nAlternatively you can also start the Ixian DLT with this command:\n\n```\ndotnet IxianDLT.dll --disableWebStart\n```\n\nThe output should look like this:\n\n![Ixian Console Output](https://projectixian.github.io/assets/images/guide_deb_1.png)\n\n### Creating a wallet\n\nIf this is the first time that you're starting Ixian DLT, a new wallet will be generated for you. You have to set your new wallet's password to proceed. This password will be used to encrypt the ixian.wal wallet file and will be required every time you start the Ixian DLT node.\n\nIt is recommended to periodically copy the wallet to a safe location, preferably on an offline media (USB Key), or a different machine. The file is encrypted using AES256.\r\nThe wallet file is called **ixian.wal**.\n\n### Verifying the status of the DLT Node\n\nWhile the node is running, it will display a logo and some basic information in the command window. Please do not close this window, as closing it will cause the DLT Node to shut down.\n\n![Ixian Run Information](https://projectixian.github.io/assets/images/guide_deb_1.png)\n\nWhen the Ixian DLT Node first starts, the status text will display **synchronizing** while the software is retrieving the required information from the DLT network. When this process has been completed, the status text will change to **active**.\n\nIf the DLT Node is shut down and later restarted, it will have to synchronize again, but since most of the data will already be stored on the local disk, the synchronization phase will be much shorter.\n\n### Using your Ixian wallet\n\nIn order to interact with the running DLT Node and use the built-in wallet software, open a web browser and navigate to [http://localhost:8081](http://localhost:8081).\n\nIf you have configured a different *API Port*, then change the port number in the link like so: **http://localhost:PORT\\_NUMBER**.\n\nThe Ixian built-in Wallet looks like this:\n\n![Ixian Built-In Wallet](https://projectixian.github.io/assets/images/guide_win_7.png)\n\n## Changing the settings\n\nIxian DLT Node settings are provided on the command line when starting the IxianDLT executable. The most important parameters are:\n\n* **-p** DLT Port: If you are for some reason unable to port-forward the default port, 10234, you may use a different port. The `-p` switch will change which port the software uses for DLT communication.\n* **-i** External IP address: The IxianDLT software will use UPnP to try and determine the external IP address of your node. If this fails for some reason, you can specify the external address using the `-i` option.\n* **-a** API Port: This changes the port on which the node accepts API commands, as well as the port on which the built-in wallet operates. If you provide a different API port, then the built-in wallet for the node will be at **http://localhost:API\\_PORT**.\n* **--threads**: Tells the DLT Node how many threads to create for the internal Ixian Miner. Default is 2. Use `--disableMiner` to prevent the DLT Node from mining IXI Coins.\n* **--disableMiner**: Tells the DLT Node not to start the built-in Ixian Miner.\n* **--help**: Displays a short help with some other, less frequently used command options.\n\nIf you need to run the DLT Node with different settings, it can be tedious to type them out every time you wish to start the software. It is recommended to create a shell script (**.sh**) with the options already set. To do this, follow the guide below:\n\n1. Switch to the unpacked Ixian DLT folder. If you have followed the above instructions for building, the command should be `cd ~/Ixian/Ixian-DLT/IxianDLT/bin/Release`.\n2. Create a new script using your preferred text editor. This example uses *nano*: `nano StartIxian.sh`.\n3. Type or paste the IxianDLT command into the file. You may use the command below, which includes the most common options, as the starting point.\r\n   `./IxianDLT -p 10234 -a 8081 --threads 2`\n4. Save the file and quit the editor. For *nano*, the command is `Ctrl-X`, then `Y`.\n5. Make the script file executable: `chmod u+x StartIxian.sh`.\n6. Use the new \"StartIxian.sh\" file to start the DLT Node with the specified options `./StartIxian.sh`.\n\n## Upgrading the DLT Node software\n\nWhen a new version is released, you can upgrade the software using the following checklist:\n\n0. Save the ixian wallet file: `cp ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/ixian.wal ~/ixian.wal.backup`.\n1. Shutdown the Ixian DLT Node.\n2. Switch to the Ixian-Core directory: `cd ~/Ixian/Ixian-Core`.\n3. Update the sources to the latest version: `git pull`.\n4. Switch to the Ixian-DLT directory: `cd ~/Ixian/Ixian-DLT`.\n5. Update the sources to the latest version: `git pull`.\n6. Update nuget packages: `dotnet restore`.\n7. Compile the new sources: `dotnet build --configuration Release`.\n8. Start the Ixian DLT Node again. The node will use the existing wallet file and downloaded data, so it will not need to generate a new wallet or synchronize again.\n\nNote: It is recommended to backup the wallet file **ixian.wal** before performing any upgrade or changing any settings on the command line.\n\n## Configuration file\n\nSee [DLT Node Configuration options](/guides/dlt_config_params.html) for details.\n"
  },
  {
    "slug": "/guides/ixian-dlt-guides/dlt-node-setup-on-redhat-centos",
    "title": "DLT Node setup on RedHat/Centos",
    "description": "",
    "content": "Note: This guide should work for most rpm-based distributions, such as:\n\n* CentOS\n* RedHat\n* Oracle Linux\n\n# Installing an Ixian DLT Node on Linux (RedHat/CentOS clones)\n\n## Prerequisites\n\n* Operating system: recent, rpm-based Linux distribution, such as RedHat or CentOS\n* RAM: at least 16 GB\n* CPU: i7/i9/Xeon or AMD equivalent processor with at least 2GHz and at least 8 CPU threads\n* Free Disk Space: 1.5 TB, 2 TB Recommended\n* Internet Connection Speed: 50 Mbps symmetrical or higher, 100 Mbps recommended\n\n## Additional requirements\n\n* Ability to forward a port from the public internet to the machine running the DLT Node. (Default port is TCP 10234.)\n\n## Install required software\n\n1. Install the dotnet 8.0 SDK following the guide for your Linux distribution here: [DotNet Installation Guide](https://learn.microsoft.com/en-us/dotnet/core/install/linux).\n\n2. Install additional required packages:\n\n```\nsudo yum install gcc git make unzip\n```\n\n3. Prepare a directory for the Ixian Project:\n\n```\nmkdir ~/Ixian\r\ncd ~/Ixian\n```\n\n4. Acquire the latest Ixian sources from github. Two repositories are required to build a DLT Master node:\n\n```\ngit clone -b master https://github.com/ProjectIxian/Ixian-Core.git\r\ngit clone -b master https://github.com/ProjectIxian/Ixian-DLT.git\n```\n\nThe directory structure should look like this:\n\n```\n.\r\n..\r\nIxian-Core\r\nIxian-DLT\n```\n\n5. Switch into the `Ixian-DLT` directory and execute rebuild.sh script:\n\n```\ncd Ixian-DLT\r\nsh rebuild.sh\n```\n\nThe script will build all necessary files, which will be located in '~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/'\n\n6. Ixian DLT Node requires the Argon2 library to function. In order to build one for your system, follow these steps:\r\n   ..a. Obtain the Argon2 source code from github:\n\n```\ncd ~/Ixian\r\ngit clone https://github.com/P-H-C/phc-winner-argon2.git\n```\n\n..b. Compile the Argon2 source:\n\n```\ncd phc-winner-argon2\r\nmake\n```\n\n..c. Copy the resulting Argon2 library to the IxianDLT folder. Please note that the file should be renamed to ‘libargon2.so’:\n\n```\ncp libargon2.so.1 ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/libargon2.so\n```\n\n7. Switch to the Ixian binaries folder:\n\n```\ncd ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/\n```\n\n8. (Optional) Download and unpack the bootstrap data files to enable faster synchronization.\n\nFollow the [Data Bootstrap guide](https://docs.ixian.io/guides/dlt_bootstrap.html) to download and install the latest data files.\n\nThe Ixian DLT node is now ready to start.\n\n## Running the software\n\nSwitch to the Ixian DLT binaries folder and issue the command to start the Ixian DLT software:\n\n```\n./IxianDLT\n```\n\nIf you're on a console-only environment with no GUI, issue this command instead:\n\n```\n./IxianDLT --disableWebStart\n```\n\nAlternatively you can also start the Ixian DLT with this command:\n\n```\ndotnet IxianDLT.dll --disableWebStart\n```\n\nThe output should look like this:\n\n![Ixian Console Output](https://projectixian.github.io/assets/images/guide_deb_1.png)\n\n### Creating a wallet\n\nIf this is the first time that you're starting Ixian DLT, a new wallet will be generated for you. You have to set your new wallet's password to proceed. This password will be used to encrypt the ixian.wal wallet file and will be required every time you start the Ixian DLT node.\n\nIt is recommended to periodically copy the wallet to a safe location, preferably on an offline media (USB Key), or a different machine. The file is encrypted using AES256.\r\nThe wallet file is called **ixian.wal**.\n\n### Verifying the status of the DLT Node\n\nWhile the node is running, it will display a logo and some basic information in the command window. Please do not close this window, as closing it will cause the DLT Node to shut down.\n\n![Ixian Run Information](https://projectixian.github.io/assets/images/guide_deb_1.png)\n\nWhen the Ixian DLT Node first starts, the status text will display **synchronizing** while the software is retrieving the required information from the DLT network. When this process has been completed, the status text will change to **active**.\n\nIf the DLT Node is shut down and later restarted, it will have to synchronize again, but since most of the data will already be stored on the local disk, the synchronization phase will be much shorter.\n\n### Using your Ixian wallet\n\nIn order to interact with the running DLT Node and use the built-in wallet software, open a web browser and navigate to [http://localhost:8081](http://localhost:8081).\n\nIf you have configured a different *API Port*, then change the port number in the link like so: **http://localhost:PORT\\_NUMBER**.\n\nThe Ixian built-in Wallet looks like this:\n\n![Ixian Built-In Wallet](https://projectixian.github.io/assets/images/guide_win_7.png)\n\n## Changing the settings\n\nIxian DLT Node settings are provided on the command line when starting the IxianDLT executable. The most important parameters are:\n\n* **-p** DLT Port: If you are for some reason unable to port-forward the default port, 10234, you may use a different port. The `-p` switch will change which port the software uses for DLT communication.\n* **-i** External IP address: The IxianDLT software will use UPnP to try and determine the external IP address of your node. If this fails for some reason, you can specify the external address using the `-i` option.\n* **-a** API Port: This changes the port on which the node accepts API commands, as well as the port on which the built-in wallet operates. If you provide a different API port, then the built-in wallet for the node will be at **http://localhost:API\\_PORT**.\n* **--threads**: Tells the DLT Node how many threads to create for the internal Ixian Miner. Default is 2. Use `--disableMiner` to prevent the DLT Node from mining IXI Coins.\n* **--disableMiner**: Tells the DLT Node not to start the built-in Ixian Miner.\n* **--help**: Displays a short help with some other, less frequently used command options.\n\nIf you need to run the DLT Node with different settings, it can be tedious to type them out every time you wish to start the software. It is recommended to create a shell script (**.sh**) with the options already set. To do this, follow the guide below:\n\n1. Switch to the unpacked Ixian DLT folder. If you have followed the above instructions for building, the command should be `cd ~/Ixian/Ixian-DLT/IxianDLT/bin/Release`.\n2. Create a new script using your preferred text editor. This example uses *vi*: `vi StartIxian.sh`.\n3. Press *i* to switch the VI editor into *'input mode'*.\n4. Type or paste the IxianDLT command into the file. You may use the command below, which includes the most common options, as the starting point.\r\n   `./IxianDLT -p 10234 -a 8081 --threads 2`\n5. Press `Escape` to exit the input mode, then type `:wq` to save the file and quit the VI editor.\n6. Make the script file executable: `chmod u+x StartIxian.sh`.\n7. Use the new \"StartIxian.sh\" file to start the DLT Node with the specified options `./StartIxian.sh`.\n\n## Upgrading the DLT Node software\n\nWhen a new version is released, you can upgrade the software using the following checklist:\n\nNote: It is recommended to backup the wallet file **ixian.wal** before performing any upgrade or changing any settings on the command line.\n\nNote: We assume that you have followed the above instructions and the Ixian directory names are as follows:\n\n| Directory | Path |\r\n| --- | --- |\r\n| Ixian-Core | ~/Ixian/Ixian-Core |\r\n| Ixian-DLT | ~/Ixian/Ixian-DLT |\r\n| Executable | ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0 |\n\nIf you have placed the Ixian source code folders elsewhere, change them in the below description. Furthermore, if you copied the executable files from the bin/Release folder someplace else, you will need to repeat the copy step to overwrite old executable files with new ones.\n\n0. Save the Ixian wallet file: `cp ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/ixian.wal ~/ixian.wal.backup`.\n1. Shutdown the Ixian DLT Node.\n2. Switch to the Ixian-Core directory: `cd ~/Ixian/Ixian-Core`.\n3. Update the sources to the latest version: `git pull`.\n4. Switch to the Ixian-DLT directory: `cd ~/Ixian/Ixian-DLT`.\n5. Update the sources to the latest version: `git pull`.\n6. Compile the new sources: `sh rebuild.sh`.\n7. Start the Ixian DLT Node again. The node will use the existing wallet file and downloaded data, so it will not need to generate a new wallet or synchronize again.\n\n## Configuration file\n\nSee [DLT Node Configuration options](/guides/dlt_config_params.html) for details.\n"
  },
  {
    "slug": "/guides/ixian-dlt-guides/dlt-node-setup-on-ubuntu-debian",
    "title": "DLT Node setup on Ubuntu/Debian",
    "description": "",
    "content": "Note: This guide should work for most apt-based distributions, such as:\n\n* Ubuntu, recent versions\n* Debian, recent versions\n* Devuan\n* Kali Linux\n* MX Linux\n* Mint\n\nIxianDLT was tested on Ubuntu (22.04+).\n\n# Installing an Ixian DLT Node on Linux (Debian/Ubuntu clones)\n\n## Prerequisites\n\n* Operating system: apt-based Linux distribution, such as Debian or Ubuntu\n* RAM: at least 16 GB\n* CPU: i7/i9/Xeon or AMD equivalent processor with at least 2GHz and at least 8 CPU threads\n* Free Disk Space: 1.5 TB, 2 TB Recommended\n* Internet Connection Speed: 50 Mbps symmetrical or higher, 100 Mbps recommended\n\n## Additional requirements\n\n* Ability to forward a port from the public internet to the machine running the DLT Node. (Default port is TCP 10234.)\n\n## Make sure you have the latest package repositories\n\nBefore beginning Ixian installation, it is recommended to update your package manager to the latest package database. On Ubuntu-based systems this is done with the following command:\n\n```\nsudo apt update\n```\n\n## Install required software\n\n1. Install the dotnet 8.0 SDK following the guide for your Linux distribution here: [DotNet Installation Guide](https://learn.microsoft.com/en-us/dotnet/core/install/linux).\n\n2. Install additional required packages:\n\n```\nsudo apt install gcc git make unzip\n```\n\n3. Prepare a directory for the Ixian Project:\n\n```\nmkdir ~/Ixian\r\ncd ~/Ixian\n```\n\n4. Acquire the latest Ixian sources from github. Two repositories are required to build a DLT Master node:\n\n```\ngit clone -b master https://github.com/ProjectIxian/Ixian-Core.git\r\ngit clone -b master https://github.com/ProjectIxian/Ixian-DLT.git\n```\n\nThe directory structure should look like this:\n\n```\n.\r\n..\r\nIxian-Core\r\nIxian-DLT\n```\n\n5. Switch into the `Ixian-DLT` directory and execute rebuild.sh script:\n\n```\ncd Ixian-DLT\r\nsh rebuild.sh\n```\n\nThe script will build all necessary files, which will be located in '~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/'\n\n6. Switch to the Ixian binaries folder:\n\n```\ncd ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/\n```\n\n7. (Optional) Download and unpack the bootstrap data files to enable faster synchronization.\n\nFollow the [Data Bootstrap guide](https://docs.ixian.io/guides/dlt_bootstrap.html) to download and install the latest data files.\n\nThe Ixian DLT node is now ready to start.\n\n## Running the software\n\nSwitch to the Ixian DLT binaries folder and issue the command to start the Ixian DLT software:\n\n```\n./IxianDLT\n```\n\nIf you're on a console-only environment with no GUI, issue this command instead:\n\n```\n./IxianDLT --disableWebStart\n```\n\nAlternatively you can also start the Ixian DLT with this command:\n\n```\ndotnet IxianDLT.dll --disableWebStart\n```\n\nThe output should look like this:\n\n![Ixian Console Output](https://projectixian.github.io/assets/images/guide_deb_1.png)\n\n\\*\\* Side Notes:\n\n* On some systems we have noticed a problem with libargon2.so when built from source, causing an exception in DLT when trying to verify PoW transaction or when mining.\r\n  Luckily Ubuntu (and possibly other distributions) provides its own libargon2.so, located in '/usr/lib/x86\\_64-linux-gnu/libargon2.so.0', you can simply replace the compiled version:\n\n```\ncp /usr/lib/x86_64-linux-gnu/libargon2.so.0 ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/libargon2.so\n```\n\n### Creating a wallet\n\nIf this is the first time that you're starting Ixian DLT, a new wallet will be generated for you. You have to set your new wallet's password to proceed. This password will be used to encrypt the ixian.wal wallet file and will be required every time you start the Ixian DLT node.\n\nIt is recommended to periodically copy the wallet to a safe location, preferably on an offline media (USB Key), or a different machine. The file is encrypted using AES256.\r\nThe wallet file is called **ixian.wal**.\n\n### Verifying the status of the DLT Node\n\nWhile the node is running, it will display a logo and some basic information in the command window. Please do not close this window, as closing it will cause the DLT Node to shut down.\n\n![Ixian Run Information](https://projectixian.github.io/assets/images/guide_deb_1.png)\n\nWhen the Ixian DLT Node first starts, the status text will display **synchronizing** while the software is retrieving the required information from the DLT network. When this process has been completed, the status text will change to **active**.\n\nIf the DLT Node is shut down and later restarted, it will have to synchronize again, but since most of the data will already be stored on the local disk, the synchronization phase will be much shorter.\n\n### Using your Ixian wallet\n\nIn order to interact with the running DLT Node and use the built-in wallet software, open a web browser and navigate to [http://localhost:8081](http://localhost:8081).\n\nIf you have configured a different *API Port*, then change the port number in the link like so: **http://localhost:PORT\\_NUMBER**.\n\nThe Ixian built-in Wallet looks like this:\n\n![Ixian Built-In Wallet](https://projectixian.github.io/assets/images/guide_win_7.png)\n\n## Changing the settings\n\nIxian DLT Node settings are provided on the command line when starting the IxianDLT executable. The most important parameters are:\n\n* **-p** DLT Port: If you are for some reason unable to port-forward the default port, 10234, you may use a different port. The `-p` switch will change which port the software uses for DLT communication.\n* **-i** External IP address: The IxianDLT software will use UPnP to try and determine the external IP address of your node. If this fails for some reason, you can specify the external address using the `-i` option.\n* **-a** API Port: This changes the port on which the node accepts API commands, as well as the port on which the built-in wallet operates. If you provide a different API port, then the built-in wallet for the node will be at **http://localhost:API\\_PORT**.\n* **--threads**: Tells the DLT Node how many threads to create for the internal Ixian Miner. Default is 2. Use `--disableMiner` to prevent the DLT Node from mining IXI Coins.\n* **--disableMiner**: Tells the DLT Node not to start the built-in Ixian Miner.\n* **--help**: Displays a short help with some other, less frequently used command options.\n\nIf you need to run the DLT Node with different settings, it can be tedious to type them out every time you wish to start the software. It is recommended to create a shell script (**.sh**) with the options already set. To do this, follow the guide below:\n\n1. Switch to the unpacked Ixian DLT folder. If you have followed the above instructions for building, the command should be `cd ~/Ixian/Ixian-DLT/IxianDLT/bin/Release`.\n2. Create a new script using your preferred text editor. This example uses *nano*: `nano StartIxian.sh`.\n3. Type or paste the IxianDLT command into the file. You may use the command below, which includes the most common options, as the starting point.\r\n   `./IxianDLT -p 10234 -a 8081 --threads 2`\n4. Save the file and quit the editor. For *nano*, the command is `Ctrl-X`, then `Y`.\n5. Make the script file executable: `chmod u+x StartIxian.sh`.\n6. Use the new \"StartIxian.sh\" file to start the DLT Node with the specified options `./StartIxian.sh`.\n\n## Upgrading the DLT Node software\n\nWhen a new version is released, you can upgrade the software using the following checklist:\n\nNote: It is recommended to backup the wallet file **ixian.wal** before performing any upgrade or changing any settings on the command line.\n\nNote: We assume that you have followed the above instructions and the Ixian directory names are as follows:\n\n| Directory | Path |\r\n| --- | --- |\r\n| Ixian-Core | ~/Ixian/Ixian-Core |\r\n| Ixian-DLT | ~/Ixian/Ixian-DLT |\r\n| Executable | ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0 |\n\nIf you have placed the Ixian source code folders elsewhere, change them in the below description. Furthermore, if you copied the executable files from the bin/Release folder someplace else, you will need to repeat the copy step to overwrite old executable files with new ones.\n\n0. Save the Ixian wallet file: `cp ~/Ixian/Ixian-DLT/IxianDLT/bin/Release/net8.0/ixian.wal ~/ixian.wal.backup`.\n1. Shutdown the Ixian DLT Node.\n2. Switch to the Ixian-Core directory: `cd ~/Ixian/Ixian-Core`.\n3. Update the sources to the latest version: `git pull`.\n4. Switch to the Ixian-DLT directory: `cd ~/Ixian/Ixian-DLT`.\n5. Update the sources to the latest version: `git pull`.\n6. Compile the new sources: `sh rebuild.sh`.\n7. Start the Ixian DLT Node again. The node will use the existing wallet file and downloaded data, so it will not need to generate a new wallet or synchronize again.\n\n## Configuration file\n\nSee [DLT Node Configuration options](/guides/dlt_config_params.html) for details.\n"
  },
  {
    "slug": "/guides/ixian-dlt-guides/dlt-node-setup-on-windows",
    "title": "DLT Node setup on Windows",
    "description": "",
    "content": "# Installing an Ixian DLT Node on Windows\n\n## Prerequisites\n\n* Operating system: Windows 7 or higher, Recommended Windows 10\n* Alternatively: Windows Server 2008 R2 or higher, Recommended Windows Server 2016\n* RAM: at least 16 GB\n* CPU: i7/i9/Xeon or AMD equivalent processor with at least 2GHz and at least 8 CPU threads\n* Free Disk Space: 1.5 TB, 2 TB Recommended\n* Internet Connection Speed: 50 Mbps symmetrical or higher, 100 Mbps recommended\n\n## Additional requirements\n\n* Ability to forward a port from the public internet to the machine running the DLT Node. (Default port is TCP 10234.)\n* Install the dotnet 8.0 SDK following the guide here: [DotNet Installation Guide](https://learn.microsoft.com/en-us/dotnet/core/install/windows#net-installer).\n\n## Obtaining the software\n\nVisit the Ixian Github [Releases](https://github.com/ProjectIxian/Ixian-DLT/releases) page and obtain the latest available version as a ZIP package. The release file is available in the \"Assets\" section of each release announcement.\n\n![Release Package](https://projectixian.github.io/assets/images/guide_win_1.png)\n\n## (Optional) Download and unpack the bootstrap data files for faster synchronization.\n\nFollow the [Data Bootstrap guide](https://docs.ixian.io/guides/dlt_bootstrap.html) to download and install the latest data files.\n\nThe data from the archive should be placed in the same folder as the Ixian executables.\n\n## Running the software\n\nUnpack the archive and start the node by double-clicking the IxianDLT executable, or by issuing the command IxianDLT.exe from a console window.\r\nThe output should look like this:\n\n![Ixian Console Output](https://projectixian.github.io/assets/images/guide_win_2.png)\n\nNote: When starting Ixian DLT software on Windows 10 operating systems for the first time, a Windows Defender SmartScreen might pop up that looks like the image below. You have to click on \"More info\" and then \"Run anyway\" to proceed.\r\nThis is expected and occurs because Ixian does not yet have a code signing certificate in this early stage of development.\n\n![Smart Screen Popup 1](https://projectixian.github.io/assets/images/guide_win_3.png)\r\n![Smart Screen Popup 2](https://projectixian.github.io/assets/images/guide_win_4.png)\n\n### Creating a wallet\n\nIf this is the first time that you're starting Ixian DLT, a new wallet will be generated for you. You have to set your new wallet's password to proceed. This password will be used to encrypt the ixian.wal wallet file and will be required every time you start the Ixian DLT node.\r\nAdditionally, if this is the first time that you're starting Ixian DLT, a firewall window may pop-up (as seen on the image below). Select private and public networks and click \"Allow access\".\n\n![Ixian Firewall Window](https://projectixian.github.io/assets/images/guide_win_5.png)\n\nIt is recommended to periodically copy the wallet to a safe location, preferably on an offline media (USB Key), or a different machine. The file is encrypted using AES256.\r\nThe wallet file is called **ixian.wal**.\n\n### Verifying the status of the DLT Node\n\nWhile the node is running, it will display a logo and some basic information in the command window. Please do not close this window, as closing it will cause the DLT Node to shut down.\n\n![Ixian Run Information](https://projectixian.github.io/assets/images/guide_win_6.png)\n\nWhen the Ixian DLT Node first starts, the status text will display **synchronizing** while the software is retrieving the required information from the DLT network. When this process has been completed, the status text will change to **active**.\n\nIf the DLT Node is shut down and later restarted, it will have to synchronize again, but since most of the data will already be stored on the local disk, the synchronization phase will be much shorter.\n\n### Using your Ixian wallet\n\nIn order to interact with the running DLT Node and use the built-in wallet software, open a web browser and navigate to [http://localhost:8081](http://localhost:8081).\n\nIf you have configured a different *API Port*, then change the port number in the link like so: **http://localhost:PORT\\_NUMBER**.\n\nThe Ixian built-in Wallet looks like this:\n\n![Ixian Built-In Wallet](https://projectixian.github.io/assets/images/guide_win_7.png)\n\n## Changing the settings\n\nIxian DLT Node settings are provided on the command line when starting the IxianDLT executable. The most important parameters are:\n\n* **-p** DLT Port: If you are for some reason unable to port-forward the default port, 10234, you may use a different port. The `-p` switch will change which port the software uses for DLT communication.\n* **-i** External IP address: The IxianDLT software will use UPnP to try and determine the external IP address of your node. If this fails for some reason, you can specify the external address using the `-i` option.\n* **-a** API Port: This changes the port on which the node accepts API commands, as well as the port on which the built-in wallet operates. If you provide a different API port, then the built-in wallet for the node will be at **http://localhost:API\\_PORT**.\n* **--threads**: Tells the DLT Node how many threads to create for the internal Ixian Miner. Default is 2. Use `--disableMiner` to prevent the DLT Node from mining IXI Coins.\n* **--config** Config filename: Tells the DLT node which config file to read from. Default is ixian.cfg.\n* **--help**: Displays a short help with some other, less frequently used command options.\n\nIf you need to run the DLT Node with different settings, it can be tedious to type them out every time you wish to start the software. It is recommended to create a batch file (**.bat**) with the options already set. To do this, follow the guide below:\n\n1. Toggle showing file extensions in Windows Explorer:\n\n![Show File Extensions](https://projectixian.github.io/assets/images/guide_win_8.png)\r\n2\\. Browse to the unpacked Ixian DLT folder.\r\n3\\. Create a new text file and change its name to \"Start Ixian.bat\" (note the changed extension from .txt to .bat). Windows will ask you if you really wish to change the file's extension, which you should confirm.\r\n4\\. Type or paste the IxianDLT command into the file. You may use the command below, which includes the most common options, as the starting point.\r\n`IxianDLT.exe -p 10234 -a 8081 --threads 2`\r\n5\\. Use the new \"Start Ixian.bat\" file to start the DLT Node with the specified options.\r\n6\\. (Optional) Disable \"Show file extensions\" in Windows Explorer in the same way you enabled them in step 1.\n\n## Upgrading the DLT Node software\n\nWhen a new version is released, you can upgrade the software using the following checklist:\n\nNote: It is recommended to backup the wallet file **ixian.wal** before performing any upgrade or changing any settings on the command line.\n\n1. Shutdown the Ixian DLT Node.\n2. Obtain the new release package from the Ixian [Releases](https://github.com/ProjectIxian/Ixian-DLT/releases) Github page.\n3. Extract the contents of the release package and overwrite files.\n4. Start the Ixian DLT Node again. The node will use the existing wallet file and downloaded data, so it will not need to generate a new wallet or synchronize again.\n"
  },
  {
    "slug": "/guides/ixian-dlt-guides/dlt-node-setup-on-windows-build-from-source",
    "title": "DLT Node setup on Windows (Build from source)",
    "description": "",
    "content": "# Building an Ixian DLT Node from source on Windows\n\n## Prerequisites\n\n* Operating system: Windows 7 or higher, Recommended Windows 10\n* Alternatively: Windows Server 2008 R2 or higher, Recommended Windows Server 2016\n* RAM: at least 16 GB\n* CPU: i7/i9/Xeon or AMD equivalent processor with at least 2GHz and at least 8 CPU threads\n* Free Disk Space: 1.5 TB, 2 TB Recommended\n* Internet Connection Speed: 50 Mbps symmetrical or higher, 100 Mbps recommended\n\n## Additional requirements\n\n* Visual Studio 2022 (Community Edition is fine), with the following modules:\n* .NET Desktop Development Workload\n* Desktop Development with C++ Workload\n* (recommended) Git\n\n## Obtaining the source\n\nThe source for Ixian DLT may be downloaded from the [Ixian Github page](https://github.com/ProjectIxian). There are several options available:\n\n* Download the latest sources as a ZIP package (see note below)\n* Clone the latest sources using a Git client (see note below)\n\nNote: In order to build the Ixian DLT executable, you will need to obtain the sources for two projects: Ixian-Core and Ixian-DLT. Both projects must be placed together in some folder, as demonstrated on the picture below:\n\n![Ixian Project Placement](https://projectixian.github.io/assets/images/guide_win_building_dlt_1.png)\n\nIf you are retrieving the sources as ZIP files, they must be unpacked and placed in the same folder. In particular, the following files must be in exactly the right places:\n\n* Ixian-Core/IXICore.shproj\n* Ixian-DLT/DLTNode.sln\n* Ixian-DLT/IxianDLT/DLTNode.csproj\n\nIf you are cloning the git repository, accept the default path recommendations and choose the same parent folder for both projects to ensure they are correctly placed.\n\nNote: The parent folder name is not important.\n\n## Opening the Visual Studio Solution\n\nOpen the source folder Ixian-DLT and double click on the solution file `DLTNode.sln`. The solution will load in Visual Studio.\n\nNote: If there are problems with the `IXICore` project, the Ixian-Core was not found in the proper place, or the folder name is incorrect. Sometimes, extracting the ZIP archive creates additional, unneccessary subfolders. Simply move the source files to where they should be and re-open the solution.\n\n## Building the project\n\n1. In the Visual Studio window `Solution Explorer`, right-click the project `DLTNode` and choose \"Rebuild\".\n\n![Rebuild Solution](https://projectixian.github.io/assets/images/guide_win_building_dlt_2.png)\n\n2. Choose the Solution Configuration as either `Debug` or `Release`. The former allows stepping through code and inspecting variables if executed from Visual Studio, but at the cost of significantly worse performance. The Release build is meant for the final product which should run as fast as possible.\n\n![Solution Configuration](https://projectixian.github.io/assets/images/guide_win_building_dlt_6.png)\n\n3. When the rebuild has finished, right-click the project `Argon2_C` and choose \"Rebuild\"\n\n4. (optional) If the Output Window is not enabled, click on View -> Output to see the results of each build.\n\n![Output Window](https://projectixian.github.io/assets/images/guide_win_building_dlt_3.png)\n\n5. Each rebuild should finish with the status \"Rebuild All Succeeded\" in the status bar and in the Output Window. Some warnings are expected, but if you encounter errors at this point please open an issue on the GitHub page and attach the contents of your output window as a text file, so we can find out what went wrong.\n\n![Build Results](https://projectixian.github.io/assets/images/guide_win_building_dlt_4.png)\n\n6. The DLT program can be found in the bin\\Debug or bin\\Release folder under the project `Ixian-DLT`. It will be named `IxianDLT.exe`. The Debug folder is used for Debug-Configuration builds and the Release folder is used for Release-Configuration builds.\n\n![EXE File](https://projectixian.github.io/assets/images/guide_win_building_dlt_5.png)\n\n7. (optional) You can copy the binaries (contents of the `Debug` or `Release` folder to any folder on your system, but make sure to include all the files which were generated in the bin\\Debug or bin\\Release folder. Alternatively, you can start the DLT Node from the Debug or Release folders.\n"
  },
  {
    "slug": "/guides/ixian-dlt-guides",
    "title": "Ixian DLT Guides",
    "description": "",
    "content": ""
  },
  {
    "slug": "/guides/ixian-s2-guides",
    "title": "Ixian S2 Guides",
    "description": "",
    "content": ""
  },
  {
    "slug": "/guides/ixian-s2-guides/s2-node-setup-on-raspberry-pi",
    "title": "S2 Node setup on Raspberry Pi",
    "description": "",
    "content": "Note: This guide should work for Raspberry Pi 3 or 4 running `Raspbian Linux`\n\n# Installing an Ixian S2 Node on Raspberry Pi\n\n## Prerequisites\n\n* Operating system: apt-based Linux distribution for ARM, such as Raspbian\n* RAM: 1 GB, Recommended 4 GB\n* Raspberry Pi 3 or 4\n* Free Space on SD card: 10 GB\n* Internet Connection Speed: 10 Mbps symmetrical or higher, 100 Mbps recommended\n\n## Additional requirements\n\n* Ability to forward a port from the public internet to the device running the S2 Node. (Default port is TCP 10235.)\n\n## Make sure you have the latest package repositories\n\nBefore beginning Ixian installation, it is recommended to update your package manager to the latest package database. On a Raspbian systems this is done with the following command:\n\n```\nsudo apt update\n```\n\n## Install required software\n\n1. Install a recent Mono release for Raspberry by following the guide for your Linux distribution here: [Mono Installation Guide](https://www.mono-project.com/download/stable/). Follow the guide for Raspbian 9 or Raspbian 10, depending on the version you have installed.\n\nYou can find your current Raspbian version by issuing the following command:\n\n```\ncat /etc/os-release\n```\n\nAfter the proper repositories are added, install using the \"mono-devel\" package:\n\n```\nsudo apt install mono-devel\n```\n\n2. Install additional required packages:\n\n```\nsudo apt install nuget msbuild git gcc unzip\n```\n\n![Ixian Console Output](https://projectixian.github.io/assets/images/guide_rpi_s2_1.png)\n\n3. Prepare a directory for the Ixian Project:\n\n```\nmkdir ~/Ixian\r\ncd ~/Ixian\n```\n\n4. Acquire the latest Ixian sources from github. Two repositories are required to build an S2 Relay node:\n\n```\ngit clone -b master https://github.com/ProjectIxian/Ixian-Core.git\r\ngit clone -b master https://github.com/ProjectIxian/Ixian-S2.git\n```\n\nThe directory structure should look like this:\n\n```\nls -la\r\n.\r\n..\r\nIxian-Core\r\nIxian-S2\n```\n\n5. Switch into the `Ixian-S2` directory and download the required NuGet packages:\n\n```\ncd Ixian-S2\r\nnuget restore S2Node.sln\n```\n\n6. Compile the S2 Node executable in the ‘Release Configuration’:\n\n```\nmsbuild S2Node.sln /p:Configuration=Release\n```\n\n7. Switch to the Ixian binaries folder:\n\n```\ncd ~/Ixian/Ixian-S2/IxianS2/bin/Release\n```\n\nThe Ixian S2 node is now ready to start.\n\n## Running the software\n\nSwitch to the Ixian S2 binaries folder and issue the command to start the IxianS2 software:\n\n```\nmono IxianS2.exe\n```\n\nThe output should look like this:\n\n![Ixian Console Output](https://projectixian.github.io/assets/images/guide_s2_deb_1.png)\n\nIn some cases the node might crash on 32-bit Raspbian systems while starting with output similar to this:\n\n```\nUnhandled Exception:\r\nSystem.TypeInitializationException: The type initializer for 'SQLite.SQLiteConnection' threw an exception. ---> System.DllNotFoundException: e_sqlite3\r\n  at (wrapper managed-to-native) SQLitePCL.SQLite3Provider_e_sqlite3+NativeMethods.sqlite3_libversion_number()\r\n  at SQLitePCL.SQLite3Provider_e_sqlite3.SQLitePCL.ISQLite3Provider.sqlite3_libversion_number () [0x00000] in <60b9636eddae467abf835d7bde5925d6>:0\r\n  at SQLitePCL.raw.SetProvider (SQLitePCL.ISQLite3Provider imp) [0x00008] in <4a65135bb20943459d36511273e609dc>:0\r\n  at SQLitePCL.Batteries_V2.Init () [0x00005] in <635106fb54074b6697e6f94014d8533a>:0\r\n  at SQLite.SQLiteConnection..cctor () [0x00010] in <eaa146ee868043e287f5507c8701ad9e>:0\r\n   --- End of inner exception stack trace ---\n```\n\nThis is because of a packaging mismatch for the SQLite library, which is currently being used by certain Ixian functions. The incorrect shared library is placed in the output directory and it must be replaced:\r\na. Switch into the Ixian-S2 base directory:\n\n```\ncd ~/Ixian/Ixian-S2\n```\n\nb. Search for the correct SQLite library:\n\n```\nfind . -iname \"libe_sqlite3.so\"\r\n./IxianS2/bin/Release/libe_sqlite3.so\r\n./packages/SQLitePCLRaw.lib.e_sqlite3.linux.1.1.14/runtimes/alpine-x64/native/libe_sqlite3.so\r\n./packages/SQLitePCLRaw.lib.e_sqlite3.linux.1.1.14/runtimes/linux-arm/native/libe_sqlite3.so\r\n./packages/SQLitePCLRaw.lib.e_sqlite3.linux.1.1.14/runtimes/linux-armel/native/libe_sqlite3.so\r\n./packages/SQLitePCLRaw.lib.e_sqlite3.linux.1.1.14/runtimes/linux-x86/native/libe_sqlite3.so\r\n./packages/SQLitePCLRaw.lib.e_sqlite3.linux.1.1.14/runtimes/linux-x64/native/libe_sqlite3.so\r\n./packages/SQLitePCLRaw.lib.e_sqlite3.linux.1.1.14/runtimes/linux-musl-x64/native/libe_sqlite3.so\r\n./packages/SQLitePCLRaw.lib.e_sqlite3.linux.1.1.14/runtimes/linux-arm64/native/libe_sqlite3.so\n```\n\nc. The correct library is the one in the `linux-arm` folder. The version numbers might be different on your system. The library must be copied to the Ixian S2 executable directory:\n\n```\ncp [PATH TO SQLITE LIBRARY] ~/Ixian/Ixian-S2/IxianS2/bin/Release/\n```\n\nReplace `[PATH TO SQLITE LIBRARY]` with a path which was found by the `find` command, for example:\n\n```\ncp ./packages/SQLitePCLRaw.lib.e_sqlite3.linux.1.1.14/runtimes/linux-arm/native/libe_sqlite3.so ~/Ixian/Ixian-S2/IxianS2/bin/Release/\n```\n\nAfter that, try running the node again.\n\n### Creating a wallet\n\nIf this is the first time that you're starting Ixian S2, a new wallet will be generated for you. You have to set your new wallet's password to proceed. This password will be used to encrypt the ixian.wal wallet file and will be required every time you start the Ixian S2 node. The file is encrypted using AES256.\n\nIt is recommended to periodically copy the wallet to a safe location, preferably on an offline media (USB Key), or a different machine.\r\nThe wallet file is called **ixian.wal**.\n\nPlease note that since the Raspberry Pi is a low-powered device, wallet generation might take a long time. (30 minutes or more.) You can also copy a wallet file from a different computer and place it in the IxianS2 executable directory.\n\n### Verifying the status of the S2 Node\n\nWhile the node is running, it will display a logo and some basic information in the command window. Please do not close this window, as closing it will cause the S2 Node to shut down.\n\n![Ixian Run Information](https://projectixian.github.io/assets/images/guide_s2_deb_1.png)\n\nWhen the Ixian S2 Node first starts, the status text will display **connecting** while the software is retrieving the required information from the Ixian DLT network. When this process has been completed, the status text will change to **active**.\n\n## Changing the settings\n\nThere are several ways in which Ixian software can be configured:\n\n### Configuration on the command line\n\nIxian S2 Node settings can be provided on the command line when starting the IxianS2 executable. The most important parameters are:\n\n* **-p** S2 Port: If you are for some reason unable to port-forward the default port, 10235, you may use a different port. The `-p` switch will change which port the software uses for S2 communication.\n* **-i** External IP address: The IxianS2 software will use UPnP to try and determine the external IP address of your node. If this fails for some reason, you can specify the external address using the `-i` option.\n* **-a** API Port: This changes the port on which the node accepts Rest API commands.\n* **--help**: Displays a short help with some other, less frequently used command options.\n\n### Configuration file\n\nAn alternative to specifying parameters on the command line is the Ixian S2 configuration file, which can be used to configure the most important settings.\n\nThe format of the file is simple INI (without sections):\n\n* Each option is specified on its own line\n* Option syntax is `option_name = option_value`\n* Whitespace is not important\n* Lines starting with `;` are ignored\n* Option names are case-sensitive\n\nA list of options supported by the config file is:\n\n| Option name | Type | Repeatable | Default | Description |\r\n| --- | --- | --- | --- |\r\n| s2Port | int | No | 10235 | TCP port number for the S2 Node, when running on the main network. |\r\n| testnetS2Port | int | No | 11235 | TCP port number for the S2 Node, when running on the test network. |\r\n| apiPort | int | No | 8001 | Port for the internal REST API server to listen for commands. Note: This port is only avilable on the localhost interface (127.0.0.1). |\r\n| testnetApiPort | int | No | 8101 | Port for the internal REST API server when the node is operating on the test network. |\r\n| addApiUser | Username:Password | Yes | EMPTY | An additional layer of protection - will require all REST API calls to include the given username and password. |\r\n| externalIp | IP Address | No | EMPTY | Configure this if the external IP address cannot be automatically determined via UPnP. |\r\n| addPeer | Hostname or IP Address | Yes | Seed Nodes | Set this to use different Ixian DLT Mater nodes as seed - this option only has an effect in mainnet mode. |\r\n| addTestnetPeer | Hostname or IP Address | Yes | Seed Nodes | Set this to use different Ixian DLT Mater nodes as seed - this option only has an effect in testnet mode. |\r\n| maxLogSize | int | No | 50 | Size of the Ixian S2 log file (in megabytes), before it is automatically rotated. |\r\n| maxLogCount | int | No | 10 | Number of old (full) log files to keep before deleting the oldest. |\r\n| walletNotify | string | No | EMPTY | OS command to run whenever the local wallet is updated. |\n\nAny repeatable options may be specified more than once. If nonrepeatable options are specified multiple times, the last one is used.\n\n### Startup script\n\nIf you need to run the S2 Node with different settings, but are unable to use the configuration file, it can be tedious to type them out every time you wish to start the software. It is recommended to create a shell script (**.sh**) with the options already set. To do this, follow the guide below:\n\n1. Switch to the Ixian S2 Release folder. If you have followed the above instructions for building, the command should be `cd ~/Ixian/Ixian-S2/IxianS2/bin/Release`.\n2. Create a new script using your preferred text editor. This example uses *nano*: `nano StartIxianS2.sh`.\n3. Type or paste the IxianS2 command into the file. You may use the command below, which includes the most common options, as the starting point.\r\n   `IxianS2.exe -p 10235 -a 8001 -i 172.16.34.17`\n4. Save the file and quit the editor. For *nano*, the command is `Ctrl-X`, then `Y`.\n5. Make the script file executable: `chmod u+x StartIxianS2.sh`.\n6. Use the new \"StartIxian.sh\" file to start the S2 Node with the specified options `./StartIxianS2.sh`.\n\n## Upgrading the S2 Node software\n\nWhen a new version is released, you can upgrade the software using the following checklist:\n\nNote: It is recommended to backup the wallet file **ixian.wal** before performing any upgrade or changing any settings on the command line.\n\nNote: We assume that you have followed the above instructions and the Ixian directory names are as follows:\r\n| Directory | Path |\r\n| --- | --- |\r\n| Ixian-Core | ~/Ixian/Ixian-Core |\r\n| Ixian-S2 | ~/Ixian/Ixian-S2 |\r\n| Executable | ~/Ixian/Ixian-S2/IxianS2/bin/Release |\n\nIf you have placed the Ixian source code folders elsewhere, change them in the below description. Furthermore, if you copied the executable files from the bin/Release folder someplace else, you will need to repeat the copy step to overwrite old executable files with new ones.\n\n0. Save the ixian wallet file: `cp ~/Ixian/Ixian-S2/IxianS2/bin/Release/ixian.wal ~/ixian.wal.backup`\n1. Shutdown the Ixian S2 Node.\n2. Switch to the Ixian-Core directory: `cd ~/Ixian/Ixian-Core`\n3. Update the sources to the latest version: `git pull`.\n4. Switch to the Ixian-S2 directory: `cd ~/Ixian/Ixian-S2`\n5. Update the sources to the latest version: `git pull`.\n6. Update nuget packages: `nuget restore S2Node.sln`.\n7. Compile the new sources: `msbuild S2Node.sln /p:Configuration=Release`\n8. (Optional) If you have copied the binaries elsewhere, repeat that step.\n9. Start the Ixian S2 Node again. The node will use the existing wallet file, so it will not need to generate a new wallet.\n"
  },
  {
    "slug": "/guides/ixian-s2-guides/s2-node-setup-on-redhat-centos",
    "title": "S2 Node setup on RedHat/Centos",
    "description": "",
    "content": "Note: This guide should work for most rpm-based distributions, such as:\n\n* CentOS\n* RedHat\n* Oracle Linux\n\n# Installing an Ixian S2 Node on Linux (RedHat/CentOS clones)\n\n## Prerequisites\n\n* Operating system: recent, rpm-based Linux distribution, such as RedHat or CentOS\n* RAM: 4 GB\n* CPU: i3/i5/i7/Xeon or AMD equivalent with at least 2 GHz\n* Free Disk Space: 10 GB, 20 GB Recommended\n* Internet Connection Speed: 10 Mbps symmetrical or higher, 100 Mbps recommended\n\n## Additional requirements\n\n* Ability to forward a port from the public internet to the machine running the S2 Node. (Default port is TCP 10235.)\n\n## Install required software\n\n1. Install the dotnet 8.0 SDK following the guide for your Linux distribution here: [DotNet Installation Guide](https://learn.microsoft.com/en-us/dotnet/core/install/linux).\n\n2. Install additional required packages:\n\n```\nsudo yum install gcc git make unzip\n```\n\n3. Prepare a directory for the Ixian Project:\n\n```\nmkdir ~/Ixian\r\ncd ~/Ixian\n```\n\n4. Acquire the latest Ixian sources from github. Two repositories are required to build an S2 Relay node:\n\n```\ngit clone -b master https://github.com/ProjectIxian/Ixian-Core.git\r\ngit clone -b master https://github.com/ProjectIxian/Ixian-S2.git\n```\n\nThe directory structure should look like this:\n\n```\n.\r\n..\r\nIxian-Core\r\nIxian-S2\n```\n\n5. Switch into the `Ixian-S2` directory and download the required NuGet packages:\n\n```\ncd Ixian-S2\r\nsh rebuild.sh\n```\n\nThe script will build all necessary files, which will be located in '~/Ixian/Ixian-S2/IxianS2/bin/Release/net8.0/'\n\n6. Switch to the Ixian binaries folder:\n\n```\ncd ~/Ixian/Ixian-S2/IxianS2/bin/Release/net8.0/\n```\n\nThe Ixian S2 node is now ready to start.\n\n## Running the software\n\nSwitch to the Ixian S2 binaries folder and issue the command to start the IxianS2 software:\n\n```\n./IxianS2\n```\n\nIf you're on a console-only environment with no GUI, issue this command instead:\n\n```\n./IxianS2 --disableWebStart\n```\n\nAlternatively you can also start the Ixian DLT with this command:\n\n```\ndotnet IxianS2.dll --disableWebStart\n```\n\nThe output should look like this:\n\n![Ixian Console Output](https://projectixian.github.io/assets/images/guide_s2_deb_1.png)\n\n### Creating a wallet\n\nIf this is the first time that you're starting Ixian S2, a new wallet will be generated for you. You have to set your new wallet's password to proceed. This password will be used to encrypt the ixian.wal wallet file and will be required every time you start the Ixian S2 node. The file is encrypted using AES256.\n\nIt is recommended to periodically copy the wallet to a safe location, preferably on an offline media (USB Key), or a different machine.\r\nThe wallet file is called **ixian.wal**.\n\n### Verifying the status of the S2 Node\n\nWhile the node is running, it will display a logo and some basic information in the command window. Please do not close this window, as closing it will cause the S2 Node to shut down.\n\n![Ixian Run Information](https://projectixian.github.io/assets/images/guide_s2_deb_1.png)\n\nWhen the Ixian S2 Node first starts, the status text will display **connecting** while the software is retrieving the required information from the Ixian DLT network. When this process has been completed, the status text will change to **active**.\n\n## Changing the settings\n\nThere are several ways in which Ixian software can be configured:\n\n### Configuration on the command line\n\nIxian S2 Node settings can be provided on the command line when starting the IxianS2 executable. The most important parameters are:\n\n* **-p** S2 Port: If you are for some reason unable to port-forward the default port, 10235, you may use a different port. The `-p` switch will change which port the software uses for S2 communication.\n* **-i** External IP address: The IxianS2 software will use UPnP to try and determine the external IP address of your node. If this fails for some reason, you can specify the external address using the `-i` option.\n* **-a** API Port: This changes the port on which the node accepts Rest API commands.\n* **--help**: Displays a short help with some other, less frequently used command options.\n\n### Configuration file\n\nAn alternative to specifying parameters on the command line is the Ixian S2 configuration file, which can be used to configure the most important settings.\n\nThe format of the file is simple INI (without sections):\n\n* Each option is specified on its own line\n* Option syntax is `option_name = option_value`\n* Whitespace is not important\n* Lines starting with `;` are ignored\n* Option names are case-sensitive\n\nA list of options supported by the config file is:\n\n| Option name | Type | Repeatable | Default | Description |\r\n| --- | --- | --- | --- |\r\n| s2Port | int | No | 10235 | TCP port number for the S2 Node, when running on the main network. |\r\n| testnetS2Port | int | No | 11235 | TCP port number for the S2 Node, when running on the test network. |\r\n| apiPort | int | No | 8001 | Port for the internal REST API server to listen for commands. Note: This port is only avilable on the localhost interface (127.0.0.1). |\r\n| testnetApiPort | int | No | 8101 | Port for the internal REST API server when the node is operating on the test network. |\r\n| addApiUser | Username:Password | Yes | EMPTY | An additional layer of protection - will require all REST API calls to include the given username and password. |\r\n| externalIp | IP Address | No | EMPTY | Configure this if the external IP address cannot be automatically determined via UPnP. |\r\n| addPeer | Hostname or IP Address | Yes | Seed Nodes | Set this to use different Ixian DLT Mater nodes as seed - this option only has an effect in mainnet mode. |\r\n| addTestnetPeer | Hostname or IP Address | Yes | Seed Nodes | Set this to use different Ixian DLT Mater nodes as seed - this option only has an effect in testnet mode. |\r\n| maxLogSize | int | No | 50 | Size of the Ixian S2 log file (in megabytes), before it is automatically rotated. |\r\n| maxLogCount | int | No | 10 | Number of old (full) log files to keep before deleting the oldest. |\r\n| walletNotify | string | No | EMPTY | OS command to run whenever the local wallet is updated. |\n\nAny repeatable options may be specified more than once. If nonrepeatable options are specified multiple times, the last one is used.\n\n### Startup script\n\nIf you need to run the S2 Node with different settings, but are unable to use the configuration file, it can be tedious to type them out every time you wish to start the software. It is recommended to create a shell script (**.sh**) with the options already set. To do this, follow the guide below:\n\n1. Switch to the Ixian S2 Release folder. If you have followed the above instructions for building, the command should be `cd ~/Ixian/Ixian-S2/IxianS2/bin/Release/net8.0/`.\n2. Create a new script using your preferred text editor. This example uses *nano*: `nano StartIxianS2.sh`.\n3. Type or paste the IxianS2 command into the file. You may use the command below, which includes the most common options, as the starting point.\r\n   `./IxianS2 -p 10235 -a 8001 -i 172.16.34.17`\n4. Save the file and quit the editor. For *nano*, the command is `Ctrl-X`, then `Y`.\n5. Make the script file executable: `chmod u+x StartIxianS2.sh`.\n6. Use the new \"StartIxian.sh\" file to start the S2 Node with the specified options `./StartIxianS2.sh`.\n\n## Upgrading the S2 Node software\n\nWhen a new version is released, you can upgrade the software using the following checklist:\n\nNote: It is recommended to backup the wallet file **ixian.wal** before performing any upgrade or changing any settings on the command line.\n\nNote: We assume that you have followed the above instructions and the Ixian directory names are as follows:\r\n| Directory | Path |\r\n| --- | --- |\r\n| Ixian-Core | ~/Ixian/Ixian-Core |\r\n| Ixian-S2 | ~/Ixian/Ixian-S2 |\r\n| Executable | ~/Ixian/Ixian-S2/IxianS2/bin/Release |\n\nIf you have placed the Ixian source code folders elsewhere, change them in the below description. Furthermore, if you copied the executable files from the bin/Release folder someplace else, you will need to repeat the copy step to overwrite old executable files with new ones.\n\n0. Save the ixian wallet file: `cp ~/Ixian/Ixian-S2/IxianS2/bin/Release/ixian.wal ~/ixian.wal.backup`.\n1. Shutdown the Ixian S2 Node.\n2. Switch to the Ixian-Core directory: `cd ~/Ixian/Ixian-Core`.\n3. Update the sources to the latest version: `git pull`.\n4. Switch to the Ixian-S2 directory: `cd ~/Ixian/Ixian-S2`.\n5. Update the sources to the latest version: `git pull`.\n6. Run the rebuild script: `sh rebuild.sh`.\n7. (Optional) If you have copied the binaries elsewhere, repeat that step.\n8. Start the Ixian S2 Node again. The node will use the existing wallet file, so it will not need to generate a new wallet.\n"
  },
  {
    "slug": "/guides/ixian-s2-guides/s2-node-setup-on-ubuntu-debian",
    "title": "S2 Node setup on Ubuntu/Debian",
    "description": "",
    "content": "Note: This guide should work for most apt-based distributions, such as:\n\n* Ubuntu, recent versions\n* Debian, recent versions\n* Devuan\n* Kali Linux\n* MX Linux\n* Mint\n\nIxianS2 was tested on Ubuntu (22.04+).\n\n# Installing an Ixian S2 Node on Linux (Debian/Ubuntu clones)\n\n## Prerequisites\n\n* Operating system: apt-based Linux distribution, such as Debian or Ubuntu\n* RAM: 4 GB\n* CPU: i3/i5/i7/Xeon or AMD equivalent with at least 2 GHz\n* Free Disk Space: 10 GB, 20 GB Recommended\n* Internet Connection Speed: 10 Mbps symmetrical or higher, 100 Mbps recommended\n\n## Additional requirements\n\n* Ability to forward a port from the public internet to the machine running the S2 Node. (Default port is TCP 10235.)\n\n## Make sure you have the latest package repositories\n\nBefore beginning Ixian installation, it is recommended to update your package manager to the latest package database. On Ubuntu-based systems this is done with the following command:\n\n```\nsudo apt update\n```\n\n## Install required software\n\n1. Install the dotnet 8.0 SDK following the guide for your Linux distribution here: [DotNet Installation Guide](https://learn.microsoft.com/en-us/dotnet/core/install/linux).\n\n2. Install additional required packages:\n\n```\nsudo apt install gcc git make unzip\n```\n\n3. Prepare a directory for the Ixian Project:\n\n```\nmkdir ~/Ixian\r\ncd ~/Ixian\n```\n\n4. Acquire the latest Ixian sources from github. Two repositories are required to build an S2 Relay node:\n\n```\ngit clone -b master https://github.com/ProjectIxian/Ixian-Core.git\r\ngit clone -b master https://github.com/ProjectIxian/Ixian-S2.git\n```\n\nThe directory structure should look like this:\n\n```\n.\r\n..\r\nIxian-Core\r\nIxian-S2\n```\n\n5. Switch into the `Ixian-S2` directory and download the required NuGet packages:\n\n```\ncd Ixian-S2\r\nsh rebuild.sh\n```\n\nThe script will build all necessary files, which will be located in '~/Ixian/Ixian-S2/IxianS2/bin/Release/net8.0/'\n\n6. Switch to the Ixian binaries folder:\n\n```\ncd ~/Ixian/Ixian-S2/IxianS2/bin/Release/net8.0/\n```\n\nThe Ixian S2 node is now ready to start.\n\n## Running the software\n\nSwitch to the Ixian S2 binaries folder and issue the command to start the IxianS2 software:\n\n```\n./IxianS2\n```\n\nIf you're on a console-only environment with no GUI, issue this command instead:\n\n```\n./IxianS2 --disableWebStart\n```\n\nAlternatively you can also start the Ixian DLT with this command:\n\n```\ndotnet IxianS2.dll --disableWebStart\n```\n\nThe output should look like this:\n\n![Ixian Console Output](https://projectixian.github.io/assets/images/guide_s2_deb_1.png)\n\n### Creating a wallet\n\nIf this is the first time that you're starting Ixian S2, a new wallet will be generated for you. You have to set your new wallet's password to proceed. This password will be used to encrypt the ixian.wal wallet file and will be required every time you start the Ixian S2 node. The file is encrypted using AES256.\n\nIt is recommended to periodically copy the wallet to a safe location, preferably on an offline media (USB Key), or a different machine.\r\nThe wallet file is called **ixian.wal**.\n\n### Verifying the status of the S2 Node\n\nWhile the node is running, it will display a logo and some basic information in the command window. Please do not close this window, as closing it will cause the S2 Node to shut down.\n\n![Ixian Run Information](https://projectixian.github.io/assets/images/guide_s2_deb_1.png)\n\nWhen the Ixian S2 Node first starts, the status text will display **connecting** while the software is retrieving the required information from the Ixian DLT network. When this process has been completed, the status text will change to **active**.\n\n## Changing the settings\n\nThere are several ways in which Ixian software can be configured:\n\n### Configuration on the command line\n\nIxian S2 Node settings can be provided on the command line when starting the IxianS2 executable. The most important parameters are:\n\n* **-p** S2 Port: If you are for some reason unable to port-forward the default port, 10235, you may use a different port. The `-p` switch will change which port the software uses for S2 communication.\n* **-i** External IP address: The IxianS2 software will use UPnP to try and determine the external IP address of your node. If this fails for some reason, you can specify the external address using the `-i` option.\n* **-a** API Port: This changes the port on which the node accepts Rest API commands.\n* **--help**: Displays a short help with some other, less frequently used command options.\n\n### Configuration file\n\nAn alternative to specifying parameters on the command line is the Ixian S2 configuration file, which can be used to configure the most important settings.\n\nThe format of the file is simple INI (without sections):\n\n* Each option is specified on its own line\n* Option syntax is `option_name = option_value`\n* Whitespace is not important\n* Lines starting with `;` are ignored\n* Option names are case-sensitive\n\nA list of options supported by the config file is:\n\n| Option name | Type | Repeatable | Default | Description |\r\n| --- | --- | --- | --- |\r\n| s2Port | int | No | 10235 | TCP port number for the S2 Node, when running on the main network. |\r\n| testnetS2Port | int | No | 11235 | TCP port number for the S2 Node, when running on the test network. |\r\n| apiPort | int | No | 8001 | Port for the internal REST API server to listen for commands. Note: This port is only avilable on the localhost interface (127.0.0.1). |\r\n| testnetApiPort | int | No | 8101 | Port for the internal REST API server when the node is operating on the test network. |\r\n| addApiUser | Username:Password | Yes | EMPTY | An additional layer of protection - will require all REST API calls to include the given username and password. |\r\n| externalIp | IP Address | No | EMPTY | Configure this if the external IP address cannot be automatically determined via UPnP. |\r\n| addPeer | Hostname or IP Address | Yes | Seed Nodes | Set this to use different Ixian DLT Mater nodes as seed - this option only has an effect in mainnet mode. |\r\n| addTestnetPeer | Hostname or IP Address | Yes | Seed Nodes | Set this to use different Ixian DLT Mater nodes as seed - this option only has an effect in testnet mode. |\r\n| maxLogSize | int | No | 50 | Size of the Ixian S2 log file (in megabytes), before it is automatically rotated. |\r\n| maxLogCount | int | No | 10 | Number of old (full) log files to keep before deleting the oldest. |\r\n| walletNotify | string | No | EMPTY | OS command to run whenever the local wallet is updated. |\n\nAny repeatable options may be specified more than once. If nonrepeatable options are specified multiple times, the last one is used.\n\n### Startup script\n\nIf you need to run the S2 Node with different settings, but are unable to use the configuration file, it can be tedious to type them out every time you wish to start the software. It is recommended to create a shell script (**.sh**) with the options already set. To do this, follow the guide below:\n\n1. Switch to the Ixian S2 Release folder. If you have followed the above instructions for building, the command should be `cd ~/Ixian/Ixian-S2/IxianS2/bin/Release/net8.0/`.\n2. Create a new script using your preferred text editor. This example uses *nano*: `nano StartIxianS2.sh`.\n3. Type or paste the IxianS2 command into the file. You may use the command below, which includes the most common options, as the starting point.\r\n   `./IxianS2 -p 10235 -a 8001 -i 172.16.34.17`\n4. Save the file and quit the editor. For *nano*, the command is `Ctrl-X`, then `Y`.\n5. Make the script file executable: `chmod u+x StartIxianS2.sh`.\n6. Use the new \"StartIxian.sh\" file to start the S2 Node with the specified options `./StartIxianS2.sh`.\n\n## Upgrading the S2 Node software\n\nWhen a new version is released, you can upgrade the software using the following checklist:\n\nNote: It is recommended to backup the wallet file **ixian.wal** before performing any upgrade or changing any settings on the command line.\n\nNote: We assume that you have followed the above instructions and the Ixian directory names are as follows:\r\n| Directory | Path |\r\n| --- | --- |\r\n| Ixian-Core | ~/Ixian/Ixian-Core |\r\n| Ixian-S2 | ~/Ixian/Ixian-S2 |\r\n| Executable | ~/Ixian/Ixian-S2/IxianS2/bin/Release |\n\nIf you have placed the Ixian source code folders elsewhere, change them in the below description. Furthermore, if you copied the executable files from the bin/Release folder someplace else, you will need to repeat the copy step to overwrite old executable files with new ones.\n\n0. Save the ixian wallet file: `cp ~/Ixian/Ixian-S2/IxianS2/bin/Release/ixian.wal ~/ixian.wal.backup`.\n1. Shutdown the Ixian S2 Node.\n2. Switch to the Ixian-Core directory: `cd ~/Ixian/Ixian-Core`.\n3. Update the sources to the latest version: `git pull`.\n4. Switch to the Ixian-S2 directory: `cd ~/Ixian/Ixian-S2`.\n5. Update the sources to the latest version: `git pull`.\n6. Run the rebuild script: `sh rebuild.sh`.\n7. (Optional) If you have copied the binaries elsewhere, repeat that step.\n8. Start the Ixian S2 Node again. The node will use the existing wallet file, so it will not need to generate a new wallet.\n"
  },
  {
    "slug": "/guides/ixian-s2-guides/s2-node-setup-on-windows",
    "title": "S2 Node setup on Windows",
    "description": "",
    "content": "# Installing an Ixian S2 Node on Windows\n\n## Prerequisites\n\n* Operating system: Windows 7 or higher, Recommended Windows 10\r\n  ..\\* Alternatively: Windows Server 2008 R2 or higher, Recommended Windows Server 2016\n* RAM: 4 GB\n* CPU: i3/i5/i7/Xeon or AMD equivalent with at least 2GHz\n* Free Disk Space: 5 GB, 10 GB Recommended\n* Internet Connection Speed: 10 Mbps symmetrical or higher, 100 Mbps recommended\n\n## Additional requirements\n\n* Ability to forward a port from the public internet to the machine running the DLT Node. (Default port is TCP 10235.)\n* Install the dotnet 8.0 SDK following the guide here: [DotNet Installation Guide](https://learn.microsoft.com/en-us/dotnet/core/install/windows#net-installer).\n\n## Obtaining the software\n\nVisit the Ixian S2 Github [Releases](https://github.com/ProjectIxian/Ixian-S2/releases) page and obtain the latest available version as a ZIP package. The release file is available in the \"Assets\" section of each release announcement.\n\n![Release Package](https://projectixian.github.io/assets/images/guide_win_s2_1.png)\n\n## Running the software\n\nUnpack the archive and start the S2 node by double-clicking the IxianS2 executable, or by issuing the command IxianS2.exe from a console window.\r\nThe output should look like this:\n\n![Ixian Console Output](https://projectixian.github.io/assets/images/guide_win_s2_2.png)\n\nNote: When starting Ixian S2 software on Windows 10 operating systems for the first time, a Windows Defender SmartScreen might pop up that looks like the image below. You have to click on \"More info\" and then \"Run anyway\" to proceed.\r\nThis is expected and occurs becuse Ixian does not yet have a code signing certificate in this early stage of development.\n\n![Smart Screen Popup 1](https://projectixian.github.io/assets/images/guide_win_3.png)\r\n![Smart Screen Popup 2](https://projectixian.github.io/assets/images/guide_win_s2_4.png)\n\n### Creating a wallet\n\nIf this is the first time that you're starting Ixian S2, a new wallet will be generated for you. You have to set your new wallet's password to proceed. This password will be used to encrypt the ixian.wal wallet file and will be required every time you start the Ixian S2 node.\r\nAdditionally, if this is the first time that you're starting Ixian S2, a firewall window may pop-up (as seen on the image below). Select private and public networks and click \"Allow access\".\n\n![Ixian Firewall Window](https://projectixian.github.io/assets/images/guide_win_s2_5.png)\n\nIt is recommended to periodically copy the wallet to a safe location, preferably on an offline media (USB Key), or a different machine. The file is encrypted using AES256.\r\nThe wallet file is called **ixian.wal**.\n\nNote: If you would like to use an existing wallet for S2 (perhaps the same wallet which you are already using for a DLT Node, or for SPIXI client, copy the **ixian.wal** file into the same directory as IxianS2.exe before starting the node. Ixian S2 will detect and use the existing wallet. You will have to enter the wallet's encryption password every time you start the node.\n\n### Verifying the status of the S2 Node\n\nWhile the node is running, it will display a logo and some basic information in the command window. Please do not close this window, as closing it will cause the S2 Node to shut down.\n\n![Ixian Run Information](https://projectixian.github.io/assets/images/guide_win_s2_6.png)\n\nWhen the Ixian S2 Node first starts, the status text will display **connecting** while the software is establishing connections to the Ixian network. When this process has been completed, the status text will change to **active**. The time to acquire a connection to the network should be quite short (a few minutes). If your S2 Node is taking longer, please check the following:\n\n* That your internet connection is working\n* Your Windows Firewall is allowing the S2 node to connect\n* You have enabled Port-Forwarding and configured the correct TCP port for the S2 (see below)\n* You are running the latest version of the S2 software\n\nIf the S2 Node is shut down and later restarted, it will have to connect again.\n\n## Changing the settings\n\nIxian S2 Node settings are provided on the command line when starting the IxianS2 executable. The most important parameters are:\n\n* **-p** DLT Port: If you are for some reason unable to port-forward the default port, 10235, you may use a different port. The `-p` switch will change which port the software uses for S2 communication.\n* **-i** External IP address: The IxianS2 software will use UPnP to try and determine the external IP address of your node. If this fails for some reason, you can specify the external address using the `-i` option.\n* **-a** API Port: This changes the port on which the node accepts API commands, as well as the port on which the built-in wallet operates. If you provide a different API port, then the built-in wallet for the node will be at **http://localhost:API\\_PORT**.\n* **--help**: Displays a short help with some other, less frequently used command options.\n\nIf you need to run the S2 Node with different settings, it can be tedious to type them out every time you wish to start the software. It is recommended to create a batch file (**.bat**) with the options already set. To do this, follow the guide below:\n\n1. Toggle showing file extensions in Windows Explorer:\n\n![Show File Extensions](https://projectixian.github.io/assets/images/guide_win_8.png)\r\n2\\. Browse to the unpacked Ixian S2 folder.\r\n3\\. Create a new text file and change its name to \"Start Ixian S2.bat\" (note the changed extension from .txt to .bat). Windows will ask you if you really wish to change the file's extension, which you should confirm.\r\n4\\. Type or paste the IxianS2 command into the file. You may use the command below, which includes the most common options, as the starting point.\r\n`IxianDLT.exe -p 10235 -a 8081`\r\n5\\. Use the new \"Start Ixian S2.bat\" file to start the S2 Node with the specified options.\r\n6\\. (Optional) Disable \"Show file extensions\" in Windows Explorer in the same way you enabled them in step 1.\n\n## Upgrading the S2 Node software\n\nWhen a new version is released, you can upgrade the software using the following checklist:\n\nNote: It is recommended to backup the wallet file **ixian.wal** before performing any upgrade or changing any settings on the command line.\n\n1. Shutdown the Ixian S2 Node.\n2. Obtain the new release package from the Ixian S2 [Releases](https://github.com/ProjectIxian/Ixian-S2/releases) Github page.\n3. Extract the contents of the release package and overwrite files.\n4. Start the Ixian S2 Node again. The node will use the existing wallet file, so it will not need to generate a new one.\n"
  },
  {
    "slug": "/sdk-demos",
    "title": "SDK Demos",
    "description": "Explore various SDK demos, including wallet and bot implementations.",
    "content": "### What's inside?\n\n* Light Wallet\n* Spixi Bot\n"
  },
  {
    "slug": "/sdk-demos/light-wallet",
    "title": "Light Wallet",
    "description": "",
    "content": "Light wallet demo/example coming soon\n"
  },
  {
    "slug": "/sdk-demos/spixi-bot",
    "title": "Spixi Bot",
    "description": "",
    "content": "Spixi Bot demo/example coming soon\n"
  },
  {
    "slug": "/tech-docs/cryptographic-primitives",
    "title": "Cryptographic primitives",
    "description": "",
    "content": "Below is a list of all cryptographic operations used by the Ixian DLT and S2 networks. The list contains a brief reasoning for the choice and a list places where the primitive is being used.\n\n## Signature - RSA with SHA512\n\nSee: [RSACryptoServiceProvider.SignData](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider.signdata?view=netframework-4.7.2)\n\nKey size: Minimum 4096 bits\n\n### Used for\n\n| Code file | Function | Input data | Reason |\r\n| --- | --- | --- | --- |\r\n| Block.cs | applySignature() | blockChecksum | Working of the Ixian's Consensus algorithm - nodes sign the block they consider valid with their private key using RSA/SHA512 to achieve an acceptable speed of verification. |\r\n| Block.cs | verifySignature() | blockChecksum | Each signature on the `Block` is verified against the signing node's public key in the WalletState. Valid signatures are counted to determine the block acceptance consensus. |\r\n| CoreNetworkProtocol.cs | sendHelloMessage() | unique device identification data | Nodes sign their unique identification when they send the initial protocol handshake message to prevent impersonation on the network. |\r\n| CoreNetworkProtocol.cs | processHelloMessage() | unique device identification data | Upon receiving the Hello message, each node should verify that the signature is valid, in order to prevent impersonation on the network. |\r\n| PresenceList.cs | keepAlive() | unique device id + timestamp | Nodes sign their Keep Alive messages in order to prevent impersonation and Presence List falsification. |\r\n| PresenceList.cs | receiveKeepAlive() | unique device id + timestamp | Keep alive messages which are received from neighbors are verified against the neighbor's public key in the WalletState in order to prevent impersonation and Presence List manipulation. |\r\n| Transaction.cs | multiple functions | transaction checksum | Each transaction is signed by the Node which generated the transaction. RSA/SHA512 is used to achieve an acceptable verification throughput on Master Nodes. |\r\n| Transaction.cs | verifySignature() | transaction checksum | Each transaction is verified before being applied to the block chain, in order to ensure that it was sent by the owner of the wallet. |\n\n## Hashing - SHA512sq\n\nSee [SHA512Managed](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha512managed?view=netframework-4.7.2)\n\nNote: Ixian uses a squared/truncated version of the SHA512 algorithm. It is calculated as follows:\n\n```\nh1 = sha512(input_data);\r\nh2 = sha512(h1);\r\nreturn h2.First(hash_len);\n```\n\n### Used for\n\n| Code file | Function | Input data | Truncated length | Reason |\r\n| --- | --- | --- | --- | --- |\r\n| Address.cs | constructAddress() | base\\_address | 3 bytes | The last three bytes of an address are the checksum, used to ensure integrity during transmission or save/load. |\r\n| Address.cs | constructAddress\\_v1 | public\\_key | 44 bytes | For addressees version 1, the squared/truncated hash value is used as the base of the address. |\r\n| Block.cs | calculateChecksum() | block raw data | 44 bytes | For block version 2, the squared/truncated hash is used as the block checksum. |\r\n| Block.cs | calculateSignatureChecksum() | block signatures | 44 bytes | For block version 2, the squared/truncated hash is used to generated the signature freeze checksum. |\r\n| Activity.cs | id property | activity data | 44 bytes | The hash is used as a unique identifier for each Activity record. |\r\n| CoreNetworkProtocol.cs | prepareProtocolMessage() | 32 bytes | The hash is used by nodes on block version 2 to ensure network message integrity during transmission. |\r\n| CoreNetworkProtocol.cs | readProtocolMessage() | 32 bytes | The hash is used by nodes on block version 2 to ensure network message integrity during transmission. |\r\n| NetworkRemoteEndpoint.cs | sendData() | 32 bytes | The hash is used to ensure network message integrity during transmission by nodes on block version 2. |\r\n| Transaction.cs | generateID() | 44 bytes | The hash is used as a part of the unique transaction identifier in version 2. |\r\n| Transaction.cs | calculateChecksum() | 44 bytes | The hash is used as the transaction checksum, in order to protect the integrity of the data in version 2. This checksum is then used as the input data for the transaction sender signature. |\r\n| Wallet.cs | calculateChecksum() | 44 bytes | The hash is used as the wallet checksum for version 2 wallets in order to prevent tampering and ensure integrity. |\r\n| WalletState.cs | calculateWalletStateChecksum() | 64 bytes | The hash is used as the checksum for all wallet data in the WalletState. This is included in each block to validate a certain point-in-time state of all wallets. |\r\n| WalletStorage.cs | generateNewAddress() | 16 bytes | The hashing algorithm is used to derive additional wallet version 1 addresses from the same public key, thus allowing the user to create new wallets and associate them with a single public/private key pair. |\n\n## Hashing - SHA512qu\n\nSee [SHA512Managed](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha512managed?view=netframework-4.7.2)\n\nNote: Ixian uses a quad/truncated version of the SHA512 algorithm. It is calculated as follows:\n\n```\nh1 = sha512(input_data);\r\nh2 = sha512(h1);\r\nh3 = sha512(h2);\r\nh4 = sha512(h3);\r\nreturn h4.First(hash_len);\n```\n\n### Used for\n\n| Code file | Function | Input data | Truncated length | Reason |\r\n| --- | --- | --- | --- | --- |\r\n| Address.cs | constructAddress\\_v0 | public\\_key | 44 bytes | For addressees version 0, the quad/truncated hash value was used as the base of the address. |\r\n| Block.cs | calculateChecksum() | block raw data | 44 bytes | For block version 0 and 1, the quad/truncated hash was used as the block checksum. |\r\n| Block.cs | calculateSignatureChecksum() | block signatures | 44 bytes | For block version 0 and 1, the quad/truncated hash was used to generated the signature freeze checksum. |\r\n| Activity.cs | id property | activity data | 44 bytes | The hash was used as a unique identifier for each Activity record. |\r\n| CoreNetworkProtocol.cs | prepareProtocolMessage() | 32 bytes | The hash was used by nodes on block version 0 and 1 to ensure network message integrity during transmission. |\r\n| CoreNetworkProtocol.cs | readProtocolMessage() | 32 bytes | The hash was used by nodes on block version 0 and 1 to ensure network message integrity during transmission. |\r\n| NetworkRemoteEndpoint.cs | sendData() | 32 bytes | The hash was used to ensure network message integrity during transmission by nodes on block version 0 and 1. |\r\n| Transaction.cs | generateID() | 44 bytes | The hash was used as a part of the unique transaction identifier in version 0 and 1. |\r\n| Transaction.cs | calculateChecksum() | 44 bytes | The hash was used as the transaction checksum, in order to protect the integrity of the data in version 0 and 1. This checksum is then used as the input data for the transaction sender signature. |\r\n| Wallet.cs | calculateChecksum() | 44 bytes | The hash was used as the wallet checksum for version 0 and 1 wallets in order to prevent tampering and ensure integrity. |\r\n| WalletState.cs | calculateWalletStateChecksum() | 64 bytes | The hash was used as the checksum for all wallet data in the WalletState before block version 2. This is included in each block to validate a certain point-in-time state of all wallets. |\r\n| WalletStorage.cs | generateNewAddress() | 16 bytes | The hashing algorithm is used to derive additional wallet version 0 addresses from the same public key, thus allowing the user to create new wallets and associate them with a single public/private key pair. |\n"
  },
  {
    "slug": "/tech-docs/data-formats",
    "title": "Data formats",
    "description": "",
    "content": "## Notes\n\n### Used conventions\n\nThe vertical line symbol `|` indicates concatenation, either string or byte array.\r\nE.g.: \"abcd\"|\"efgh\" = \"abcdefgh\", and\r\n{ 0x01, 0x02, 0x03 } | { 0x04, 0x05, 0x06} = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 }\n\n### Relevant functions\n\n* **sha512(data)** represents calculating a SHA-512 hash on the input `data`.\n* **sha512sq(data)** represents calculating a SHA-512 hash twice on the input `data` - equivalent to sha512(sha512(data)).\n* **sha512qu(data)** represents calculating a SHA-512 hash four times on the input `data` - equivalent to sha512(sha512(sha512(sha512(data)))).\n* **truncate(value, n)** returns the first `n` elements of `value`. If the `value` is an ASCII string, it returns the first `n` ASCII characters. If `value` is a byte array, it returns the first `n` bytes.\n\n***\n\n## Address Format\n\n### Relevant C# objects:\n\n`IXICore.Address`\n\n### v0 Addresses:\n\n#### Description\n\nA v0 address always start with the byte 0. The address itself is represented by a truncated sha512qu hash of the wallet's public key (pubkey length may vary). The hash is truncated to 32 bytes. Finally, another sha512sq hash is calculated from the 33-byte array (version|address) and truncated to 3 bytes, which are appended to the address, thus yielding 36 total bytes for a complete address.\n\n#### Specification\n\n```\nLength = 36 bytes\r\nFormat = version | raw_address | checksum\r\n\r\nversion = 1 byte, always 0x0 for addresses v0\r\nraw_address = 32 bytes, `truncate(sha512qu(pubkey) , 32)`\r\nchecksum = 3 bytes, `truncate(sha512sq(version|raw_address), 3)`\r\n\r\nFor the primary address (the first address generated from a specific public key):\r\nraw_address = 32 bytes, `truncate(sha512qu(public_key), 32)`\r\n\r\nFor subsequent addresses:\r\nraw_address = 32 bytes, `truncate(sha512qu(primay_address|nonce), 32)`\n```\n\n### v1 Addresses:\n\n#### Description\n\nThe wallet's public key is used to generate a 44-byte truncated sha512sq hash, which is designated the `primary address`. This address is implied to have a `nonce` value of 0.\r\nWhen a subsequent address is required for the same public key, the `nonce` value is incremented and a new address is generated from the `primary address` and the new `nonce` value. Implementations might decide to use random `nonce` values, rather than sequential, but make sure that `nonce` values do not repeat - same `nonce` value will produce the same address.\n\nThis enables Ixian to rapidly generate as many new addresses as required with a low computational impact. Verification of the new addresses requires the original public key, but since that may be cached, transactions need only include the `primary address` and the `nonce` value, reducing network requirements.\n\nNote: A `nonce` value is exactly 16 bytes long, with the only exception when the address being generated represents the `Primary Address` for that specific public key. This Primary Address is calculated with a null `nonce` value.\n\nThe `nonce` is generated as follows:\n\n```\nbase_nonce = sha512SqTrunc(private_key)\r\nnew_nonce = sha512SqTrunc(base_nonce | last_nonce)\n```\n\nWhere `last_nonce` is the most recently used nonce value. This method generates repeatable, deterministic addresses, which can only be computed by whoever has the corresponding private key. A full wallet backup is not required whenever a new address is generated, because all possible addresses can be deduced from only the private and public keys.\n\n#### Specification\n\n```\nLength = 48 bytes\r\nFormat = version | raw_address | checksum\r\n\r\nversion = 1 byte, always 0x1 for addresses v1\r\nraw_address = 44 bytes, `truncate(sha512sq(pubkey_or_address), 44)`\r\nchecksum = 3 bytes, `truncate(sha512sq(version|raw_address), 3)`\r\n\r\nFor the primary address (the first address generated from a specific public key):\r\nraw_address = 44 bytes, `truncate(sha512sq(public_key), 44)`\r\n\r\nFor subsequent addresses:\r\nraw_address = 44 bytes, `truncate(sha512sq(primay_address|nonce), 44)`\n```\n\n***\n\n## Key format\n\n### Relevant C# objects:\n\n`IXICore.IxianKeyPair`\r\n`IXICore.CryptoLib`\n\n### v0 Public key\n\n#### Description\n\nThe v0 public key does not have any headers and is always 523 bytes long (4096-bit keys)\n\n#### Specification\n\n```\nLength = 523 bytes\r\nFormat = raw_pubkey (see v1 raw_pubkey)\n```\n\n### v1 Public key (and v0 Public key with header)\n\n#### Description\n\nv1 Pubkey includes the minimum version of address it is able to generate, as well as the version of the pubkey record.\r\nNote: v0 and v1 pubkeys have exactly the same raw layout, the only difference is the prepended header for v1.\n\n#### Specification\n\n```\nLength = variable\r\nFormat = address_version | pubkey_version | raw_pubkey\r\n\r\naddress_version = 1 byte, always 0x1 (future use)\r\npubkey_version = 4 bytes, always 0x0 (future use)\r\nraw_pubkey =   mod_len | modulus\r\n             | pub_exp_len | pub_exponent\n```\n\n### v0 Private key\n\n#### Description\n\nThe v0 private key does not have any headers. The length varies and is represented by an `int` field before each data element.\n\n#### Specification\n\n```\nLength = 523 bytes\r\nFormat = raw_privkey (see v1 raw_privkey)\n```\n\n### v1 Private key (and v0 Private key with header)\n\n#### Description\n\nv1 Privkey includes the minimum version of address it is able to generate, as well as the version of the privkey record.\r\nNote: v0 and v1 privkeys have exactly the same raw layout, the only difference is the prepended header for v1.\r\nNote: The beginning of the private and public key structures is exactly the same. Therefore, a public key can be quickly extracted from the private key.\n\n#### Specification\n\n```\nLength = variable\r\nFormat = address_version | privkey_version | raw_privkey\r\n\r\naddress_version = 1 byte, always 0x1 (future use)\r\nprivkey_version = 4 bytes, always 0x0 (future use)\r\nraw_privkey =  mod_len | modulus\r\n             | pub_exp_len | pub_exponent\r\n             | p_len | p_prime\r\n             | q_len | q_prime\r\n             | dp_len | dp_exponent1\r\n             | dq_len | dq_exponent2\r\n             | iq_len | inverse_q\r\n             | d_len | d_private_exponent\n```\n\n***\n\n## Presence\n\n### Relevant C# objects:\n\n`IXICore.PresenceList`\r\n`IXICore.Presence`\n\n### Description\n\nPresences are how Ixian DLT network keeps track of which nodes and clients are online or offline.\n\n### Specification\n\n```\nLength = varies, depending on contents\r\nFormat = version\r\n         | wallet_len | wallet\r\n         | pubkey_len | pubkey\r\n         | meta_len | metadata\r\n         | num_addresses | address_record\r\n         | owner\n```\n\nNote: For a description of the `address_record` format, see [Presence Address](/tech_docs/data_formats.html#presence-address) in the next section.\n\n## Presence Address\n\n### Relevant C# objects:\n\n`IXICore.PresenceAddress`\n\n### Description\n\nA presence address represents a network endpoint on which the specific node or client device may be reached.\n\n### Specification\n\n```\nLength = varies, depending on contents\r\nFormat = version\r\n         | device\r\n         | address\r\n         | type\r\n         | nodeVersion\r\n         | lastSeenTime\r\n         | sig_len | signature\n```\n\n***\n\n## Transaction\n\n### Relevant C# objects:\n\n`IXICore.Transaction`\r\n`IXICore.Transction.Type`\r\n`IXICore.Transaction.MultisigWalletChangeType`\r\n`IXICore.Transaction.MultisigAddrAdd`\r\n`IXICore.Transaction.MultisigAddrDel`\r\n`IXICore.Transaction.MultisigChSig`\r\n`IXICore.Transaction.MultisigTxData`\n\n### Description\n\nThe `Transction` object is the cornerstone of any DLT network. It represents a single, atomic operation in much the same way as a transactional database.\r\nIn most cases, a `Transaction` represents the transfer of funds between two wallets, but it may also signify some other change in the network.\n\n### Specification\n\n```\nLength = varies, depending on contents\r\nFormat = version\r\n         | type\r\n         | amount\r\n         | fee\r\n         | to_list_count | to_list_entry[]\r\n         | from_list_count | from_list_entry[]\r\n         | data_len | data\r\n         | block_height\r\n         | nonce\r\n         | time_stamp\r\n         | checksum_len | checksum\r\n         | signature_len | signature\r\n         | pubkey_len | pubkey\r\n\r\nto_list_entry = address_len | address | amount\r\nfrom_list_entry = address_len | address | amount\n```\n\nNote: The amounts are sent as strings with decimal representation of IxiNumber values.\r\nNote: address in to\\_list\\_entry or from\\_list\\_entry is either a full address or a special address nonce value. Use the functions in the class `DLT.Address` to convert them into a proper format.\r\nSee also: [Address Format](/tech_docs/data_formats.html#address-format)\n\n***\n\n## Wallet\n\n### Relevant C# objects:\n\n`IXICore.WalletType`\r\n`IXICore.Wallet`\n\n### Description\n\nThe `Wallet` object contains primarily the amount of funds for a specific Ixian DLT wallet. This structure is held and synchronized by the DLT Master nodes and checked using the field `walletStateChecksum` in the `Block` object.\n\n### Specification\n\n```\nLength = varies, depending on contents\r\nFormat = id_len | id\r\n         | balance\r\n         | data_len | data\r\n         | type\r\n         | required_sigs\r\n         | num_allowed_signers | allowed_signer[]\r\n         | pubkey_len | pubkey\r\n\r\nallowed_signer = address_len | address\n```\n\nNote: balance is encoded as a string with the decimal representation of IxiNumber.\n\n***\n\n## Block\n\n### Relevant C# objects:\n\n`IXICore.Block`\n\n### Description\n\nThe `Block` object describes a single, coherent unit of work for the DLT network. The specific invariant is that applying a block to a known WalletState (the WalletState as described by the previous block), a new WalletState is produced which:\r\na. Has all the transactions in the block applied to Wallets.\r\nb. Matches the checksum in the block.\n\nA block uniquely identifies the previous block (and thus, previous WalletState) through a `lastBlockChecksum` field and specifies a list of transaction identifiers (txid) which should be applied next to the WalletState.\n\nNote: Some blocks (every 1000th block) do not contain the usual transactions and signatures, but is a `Superblock` and contains a summary of the previous 999 blocks.\n\n### Specification\n\n```\nLength = varies, depending on contents\r\nFormat = version | block_number\r\n         | num_transactions | transaction[]\r\n         | num_signatures | signature[]\r\n         | checksum_len | checksum\r\n         | previous_checksum_len | previous_checksum\r\n         | walletstate_checksum_len | walletstate_checksum\r\n         | signature_freeze_checksum_len | signature_freeze_checksum\r\n\t\t | difficulty\r\n\t\t | timestamp\r\n\t\t | previous_superblock_height\r\n\t\t | previous_superblock_checksum_len | previous_superblock_checksum\r\n\t\t | num_superblock_segments | superblock_segment[]\r\n\r\nsignature = signature_len | signature | address_len | address\r\nsuperblock_segment = block_number | block_checksum_len | block_checksum\n```\n\nNote: balance is encoded as a string with the decimal representation of IxiNumber.\n"
  },
  {
    "slug": "/tech-docs",
    "title": "Technical Documents",
    "description": "Explore the core technical aspects of the Ixian ecosystem, including cryptographic foundations, data structures, protocols, and more.",
    "content": "<a href=\"/Ixian_DLT_Whitepaper_v0.9.4_PreRelease.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">\n  Read Whitepaper\n</a>\n\n### What's inside?\n\n* Cryptographic Primitives\n* Data Formats\n* IXI Token Details\n* Optional PoW - Mining\n* Programming Objects\n* Ixian Network Protocol\n"
  },
  {
    "slug": "/tech-docs/ixi-token-details",
    "title": "$IXI Details",
    "description": "",
    "content": "Offering a strong incentive to run Ixian Nodes is essential in maintaining the Ixian network. This incentive arrives in the form of $IXI, a cryptocurrency designed for micro transactions.\r\nUsing $IXI you are able to send money to friends and pay for premium content. Whether you are providing tech support, performing a live show and broadcasting it to paying viewers, you can charge a service fee in $IXI.\n\n## Premine\n\nGenesis block (#1) contains 7 transactions that can be considered as pre-mine:\n\n* transaction to 1AAF8ZagTw6UqiQPUoiKjmoAN45jvR8tdmSmeev4uNzq45QWB for 240000 Ixis, intended for setting up extra 12 initial seed nodes as required - this wallet was used by seed1.ixian.io\n* transaction to 1NpizdRi5rmw586Aw883CoQ7THUT528CU5JGhGomgaG9hC3EF for 20000 Ixis, intended for running an Ixian DLT seed node - this wallet was used by seed2.ixian.io\n* transaction to 1Dp9bEFkymhN8PcN7QBzKCg2buz4njjp4eJeFngh769H4vUWi for 20000 Ixis, intended for running an Ixian DLT seed node - this wallet was used by seed3.ixian.io\n* transaction to 1SWy7jYky8xkuN5dnr3aVMJiNiQVh4GSLggZ9hBD3q7ALVEYY for 20000 Ixis, intended for running an Ixian DLT seed node - this wallet was used by seed4.ixian.io\n* transaction to 1R2WxZ7rmQhMTt5mCFTPhPe9Ltw8pTPY6uTsWHCvVd3GvWupC for 20000 Ixis, intended for running an Ixian DLT seed node - this wallet was used by seed5.ixian.io\n* transaction to 13fiCRZHPqcCFvQvuggKEjDvFsVLmwoavaBw1ng5PdSKvCUGp for 1000000000 Ixis, intended to be used as a reward for developers\n* transaction to 16LUmwUnU9M4Wn92nrvCStj83LDCRwvAaSio6Xtb3yvqqqCCz 1000000000 Ixis, intended to be used by the foundation to further evolve Ixian technology\n\nThe genesis funds or the so called premine amounts to roughly 2 billion $IXI (2,000,320,000), of which 1 billion is locked as a team reward for a vesting period\r\nof 5 years (20% to be released at the end of each year). The other 1 billion $IXI is intended for funding further development and all other important activities.\n\n## Total inflation\n\nA hybrid $IXI distribution model is in place. For initial distribution, mining seems to be the best way for various reasons.\r\nAs more users set up their nodes, the network itself will become more resilient against attackers and increase its capability for handling large numbers of users.\r\nThis means that more users will participate in the distribution of $IXI as well. After a sufficient amount of $IXI has been mined, the mining mechanism will be permanently switched off and new currency will only be generated through other means.\n\nThe Ixian economy differs substantially from what we are used to in the crypto space. Most cryptocurrencies out there rely on a capped supply and smaller and smaller\r\nemissions over time to increase value for investors and early adopters, whether it be PoW related with reducing block rewards or PoS. We have decided to start with a minimum\r\nsupply and gradually increase the rate of new $IXI generated for the first 1802000 blocks (roughly two years), the idea here is to have a more even distribution of $IXI\r\namong miners/users. On block #105120000 (roughly 100 years), mining will stop and we expect the total supply at that point to be about 21 billion $IXI. After block #105120000,\r\nthe only way to generate new $IXI is by running a Master Node, which will inflate the total supply at 36 IXIs per block (or 38 million IXIs per year). By not capping the\r\nsupply after 21 billion $IXI in circulation, we are trying to compensate for coins that get lost over time (i.e. by users losing their keys, sending to invalid addresses, ...).\n\nFor $IXI emission charts and other details visit [https://explorer.ixian.io/?p=emissions](https://explorer.ixian.io/?p=emissions).\n\n## Mining only inflation\n\nThe target mining inflation rate is as follows (you must include a 50% target ratio between solved and unsolved blocks when doing inflation calculations. Only every 2nd block should be solved on average):\n\n* starts with 10 IXI and increases by 0.009 IXI with every block until block height #1051200 (roughly 1 year from genesis block). Target mining inflation is 1.2 billion additional IXIs.\n* 4740 IXI per block until block height #1802000.\n* 2304 IXI per block until block height #6307200.\n* 1152 IXI per block until block height #9460800.\n* 576 IXI per block until block height #12614400.\n* 18 IXI per block until block height #105120000.\n\n## Masternode/Signing only inflation\n\nEach masternode that signs a newly generated block receives a portion of the signing reward and a portion of the transaction fees.\r\nSigning reward and transaction fees are split between all signers of the block (up to 1000) equally.\n\nSigning inflation rate is as follows:\n\n* 0.1% per year until block #86400 (blockheight was reached in less than 2 months)\n* 5% per year until block #1802000\n* 576 IXI per block until block #6307200\n* 288 IXI per block until block #9460800\n* 144 IXI per block until block #12614400\n* 72 IXI per block until block #15768000\n* 36 IXI per block after block #15768000\n\nThis effectively means that after a certain period of time, and sufficient amount of $IXI is generated, the staking reward will be locked. This way we will replenish the supply to compensate for lost coins,\r\nbut not over inflate the circulating supply. By setting the inflation rates at these levels, we are ensuring the long term sustainability of the Ixian platform.\n\n## Transaction Fees\n\nTransaction fees are collected by masternodes when the transaction is added to the block and the block is accepted by the Ixian network.\n\nAt the time of writing minimum transaction fees are set to 0.00005000 IXI per kilobyte of data.\n"
  },
  {
    "slug": "/tech-docs/ixian-network-protocol",
    "title": "Ixian network protocol",
    "description": "",
    "content": ""
  },
  {
    "slug": "/tech-docs/optional-pow-mining",
    "title": "Optional PoW - Mining",
    "description": "",
    "content": "## Introduction\n\nDuring the start up of the Ixian project, a large amount of currency must be generated quickly and awarded to the most active participants. A pre-mined amount would partially solve this problem, but the distribution relies too much on the Ixian team's discretion and does not inspire confidence. The pre-mine amount has therefore been kept relatively small and an additional, temporary way was created to allow the community to generate their own currency.\n\nMining in Ixian is optional for the first five years of operation, after which it will be switched off and new PoW solutions will no longer be accepted by Master Nodes. This document provides a technical description of how the Ixian's optional PoW algorithm works.\n\n## Technical Implementation\n\n### Active History\n\nBecause Ixian DLT is a redacted blockchain, the entire block history is not saved with every node, but only on a few 'Full History Nodes'. The part\r\nof the blockchain, which must be held in memory by each participating node is called the 'Active History', and can be dynamically determined by\r\nthe network after a suitable algorithm is decided. The default window for the \"Active History\" (called the \"Redacted Window Size\"), is 7 days\r\n(20000 blocks).\n\n### Blank Proof-of-Work field\n\nEach block in the chain includes a field for a possible Proof-of-Work solution. This space consists of a solution to the block puzzle and a\r\nsignature from the node which has calculated the challenge.\r\nBlock signatures are still sufficient for validating the transactions in the block. The blank PoW solution field is not included in the\r\nverifying signature for the block, which means that the PoW field can be changed at any time.\r\nA simplified chain with the blank PoW field is represented below:\n\n![Sample Ixian Chain](https://projectixian.github.io/assets/images/hpow_image1.png)\n\n### Transaction Type: Puzzle-Solved\n\nA new transaction type is introduced for the Proof-of-Work operations. This transaction consists of a PoW solution for any block, which is\r\npresent in the Active History at the moment when the transaction is processed, as shown in the image below.\n\n![Active History](https://projectixian.github.io/assets/images/hpow_image2.png)\n\nThe targeted block must currently have no solution for the PoW puzzle.\r\nOnce this transaction is verified by a DLT node and the containing block is accepted by the network, the details are added to the Active History\r\ninto the blank PoW field. That block now has a filled PoW field, and is confirmed by a transaction in an accepted block. Based on this, new\r\ncurrency is generated and awarded to the node which calculated the puzzle.\n\nGraphical representation of the PoW award process:\n\n![PoW Award](https://projectixian.github.io/assets/images/hpow_image3.png)\n\n### Solution Details - Technical\n\nThe PoW solution is formed in the following manner:\n\n![PoW Solution](https://projectixian.github.io/assets/images/hpow_d1.png)\n\nWhere PoW is the solution to the PoW problem using the \"Argon2ID\" hashing functions, whose input message, called \"pwd\" in the reference Argon\r\nimplementation is the combination of the target block checksum - BlockChecksum - and the address of the walled which will receive the reward for\r\nsolving the puzzle - SolverAddress.\r\nThe solution is found by inserting a random, 128-bit value as Nonce, until a hash is found which meets certain criteria based on the *difficulty*\r\nBlock parameter.\n\n### Difficulty Adjustments\n\nBecause new nodes join the network and start searching for the PoW solution, while other nodes stop, the difficulty must be adjusted to reflect the\r\ncurrent network's total hashing power. If the difficulty is too easy, too many Blocks will have their PoW solution. Conversely, if the difficulty\r\nis too high, too few Blocks will be solved.\r\nThe difficulty should be selected such, that roughly 50% of all Blocks in the active history are solved before they are redacted.\n\nThe Block difficulty is an 8-byte unsigned integer, which represents the characteristic of the PoW solution value to which a valid solution must\r\nconform. In Ixian, the entire solution range (a solution is a 256-bit number) is split into 2^64 sub-ranges. The difficulty number, being a 64-bit\r\nunsigned integer, selects one of the sub-ranges, which is interpreted as the absolute ceiling.\r\nA valid PoW solution must be numerically below the chosen ceiling.\n\nIn order to convert the difficulty number into a 'hash-ceiling', the following method is used:\n\n1. A bitwise inverse of the difficulty value is calculated (one's complement)\n2. A zero-value, 256-bit number is generated.\n3. Bits from the inverted difficulty are inserted into the empty 256-bit number at bit positions 13 - 76 (bit 1 is the most significant bit).\n4. Bits before the inserted value are set to zero.\n5. Bits after the inserted value are set to one.\n\nThe resulting hash-ceiling value represents the upper limit of the 256-bit PoW solution. Solutions, which are numerically less than the\r\nhash-ceiling are considered valid for the given difficulty.\n\nThe exact distribution of the sub-ranges allow Ixian to set a wide range of difficulties. In order to prevent some possible exploits, a lower\r\nlimit has been set on the difficulty value.\r\nThe lowest possible difficulty is therefore defined to be 0xA2CB1211629F6141, which equates to (on average) 180000 hashes required in order to\r\nfind a valid solution. The number can be achieved by 10 miners, with 300 H/s each - this was defined as an approximation of the minimum network\r\nsize. With the total hashing power of 3000 H/s, a block solution should be found approximately every 60 seconds.\r\nSince the blocks are generated at 30-second intervals, the resulting solution ratio should be near 50%.\n\nUpper bound on the difficulty is not specified, so the theoretical maximum difficulty could be 0xFFFFFFFFFFFFFFFF, which would require 1.15\r\nzetta-hashes on average to find a block solution. This number was deemed sufficiently large. It would require about 16 quintillion miners at\r\n1200 H/s each) to keep up with the 50% solution ratio.\n"
  },
  {
    "slug": "/tech-docs/programming-objects",
    "title": "Programming Objects",
    "description": "",
    "content": ""
  }
]