[
  {
    "slug": "/api-docs",
    "title": "API Documents",
    "description": "api docs",
    "content": ""
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/add-transaction",
    "title": "Add Transaction",
    "description": "",
    "content": "## Add Transaction\n\nGenerates a new IXI transaction to transfer funds between wallets. Multiple 'from' wallets with different amounts may be specified, as well as multiple target wallets and amounts.\n\nNote: If you do not specify `from`, the required funds and fee will be deducted from the node's addresses (the order depends on the particular implementation). Multiple addresses may be used if the first one chosen does not have sufficient funds.\r\nAlternatively, if you do specify `from`, your total amount must include the required transaction fee. The transaction fee may be calculated in multiple ways:\n\n* Call the API `createrawtransaction`, which will generate a transaction object but not send it to the network. In this way you can measure the object's size and calculate an appropriate fee. This API takes the same parameters as `addtransaction`.\n* Call the API `calculatetransactionfee`, which will return the required fee amount for the given transaction. This API takes the same parameters as `addtransaction`.\n* Use the `autofee` parameter, which will deduct the required transaction fee from the first specified `from` address. The address must have sufficient funds to cover both the amount and fee. You can change the order of `from` addresses to ensure this.\n\nNote: If using the `primaryAddress` parameter, the chosen address (public key) must be a valid signer for all addresses in the `from` list. This is the case if all the `from` addresses were derived from `primaryAddress` via the `generatenewaddress` API. Mixing of `from` addresses from different keypairs is not supported, nor is mixing non-multisig and multisig wallets.\n\n### Method: `addtransaction`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| to | String | Yes | List of Base58 encoded recipient addresses with their amounts. Amounts are separated by '*' character. Addresses are separated by '-' character (i.e. address1\\_amount1-address2\\_amount2) |\r\n| from | String | No | List of Base58 encoded sending addresses with their amounts. Amounts are separated by '*' character. Addresses are separated by '-' character (i.e. address1\\_amount1-address2\\_amount2). All addresses must belong to the same private key. If no from parameter is specified, it will be automatically generated, where the addresses with least IxiCash will be spent first. |\r\n| primaryAddress | String | No | Specify if the node is using a wallet with multiple keypairs in order to select the keypair (public key) which will be used to sign the transaction. The chosen primary address must be a valid signer for all addresses listed in the `from` field. |\r\n| fee | Number | No | Transaction fee, specified in IxiCash per kB. If no fee parameter is specified, the default (which is also the minimum) 0.00005 IxiCash per kB will be used. |\r\n| autofee | Boolean | No | If specified, the system will automatically deduct the required fee from the first address given in `from`. This parameter is not required if you have included the appropriate fees somewhere in the `from` list, or are not specifying the `from` list at all. |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Output:\n\n* success: transaction details are returned as a JSON object and the error field is set to null:\n* fail JSON encoded details with a non-null error and a null result:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_ADDRESS\\_OR\\_KEY | Addresses specified in the `from` parameter does not belong to this node, or the address in the `to` parameter was invalid.  |\r\n| RPC\\_INVALID\\_PARAMS | Invalid `from` amounts, or invalid `to` amounts were specified. |\r\n| RPC\\_VERIFY\\_ERROR | The transaction does not pass verification - this usually means that no usable `\"from\"` addresses were present, or there was something wrong with the signing key. |\r\n| RPC\\_WALLET\\_INSUFFICIENT\\_FUNDS | Address or addresses specified have insufficient balance to be used for the transaction. |\r\n| RPC\\_INTERNAL\\_ERROR | An unexpected error occurred within the node. Please see the node log for details. |\n\n### Example:\n\nGET http://localhost:8081/addtransaction?from=1JKZFqQs4yiH6Dq4bfom7xcpL6zG53DrjcY6HD9QJ6cRWmXdq\\_10000-1PC5kubyLvTmsf16CugqHpBG8B8PK4YjcfSjjLMqbUi8YvkQ\\_5000\\&to=153xXfVi1sznPcRqJur8tutgrZecNVYGSzetp47bQvRfNuDix\\_15000\\&autofee=true\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"11-284bKK4GvGV9stfEGqu1CP4A9T3tTzrbkUsUd2JestPVE3KDPM5Um7sn3Dfv4\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"11\",\r\n    \"nonce\": \"313950\",\r\n    \"signature\": \"54b6315260a94dfec4...a166a16472040dae03\",\r\n    \"pubKey\": \"JHgSS7hbUNnYWsqz8m...wi5i2EPPWjtyTRYRN\",\r\n    \"timestamp\": \"1711936575\",\r\n    \"type\": \"0\",\r\n    \"amount\": \"515000.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"c81b2017498e7c838d1d2d960c80e2c18a102959680414dd37ef143bcc777d7796b171d873683f93425a91fd\",\r\n    \"from\": {\r\n      \"1\": \"515000.01000000\"\r\n    },\r\n    \"to\": {\r\n      \"153xXfVi1sznPcRqJur8tutgrZecNVYGSzetp47bQvRfNuDix\": \"15000.00000000\",\r\n      \"4L5vswa8yS9VKsZzDJ2ry9gWY7KQon5bkvhG1CUuepkwvcy1xQmLsHA9DPmCDbufr\": \"500000.00000000\"\r\n    },\r\n    \"fee\": \"0.01000000\",\r\n    \"totalAmount\": \"515000.01000000\"\r\n  }\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/blacklist-peer",
    "title": "Blacklist Peer",
    "description": "",
    "content": "## Blacklist Peer\n\nBlacklists peer.\n\n### Method: `blacklistPeer`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| host | String | No | Host address to blacklist. |\r\n| wallet | String | No | Base58 Wallet address of host to blacklist. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with \"OK\" in result field on success.\n\n### Example:\n\nGET http://localhost:8081/blacklistPeer\n\n```\n{\r\n  \"result\": \"OK\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/calculate-transaction-fee",
    "title": "Calculate Transaction Fee",
    "description": "",
    "content": "## Calculate Transaction Fee\n\nThis method takes the same parameters as `addtransaction`, except for `autofee`. It does not generate a Transaction object, but rather calculates the size of the resulting Transaction object and therefore the total fee required to send it. The fee is returned as a decimal number in `result`.\n\nNote: If you do not specify `from`, the required funds and fee will be deducted from the node's addresses (the order is implementation-defined). Multiple addresses may be used if the first one chosen does not have sufficient funds. If the order (and amounts) matters, then use the `from` parameter and specify manually.\n\nNote: If using the `primaryAddress` parameter, the chosen address (public key) must be a valid signer for all addresses in the `from` list. This is the case if all the `from` addresses were derived from `primaryAddress` via the `generatenewaddress` API. Mixing of `from` addresses from different keypairs is not supported, nor is mixing non-multisig and multisig wallets.\n\n### Method: `calculatetransactionfee`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| to | String | Yes | List of Base58 encoded recipient addresses with their amounts. Amounts are separated by '*' character. Addresses are separated by '-' character (i.e. address1\\_amount1-address2\\_amount2) |\r\n| from | String | No | List of Base58 encoded sending addresses with their amounts. Amounts are separated by '*' character. Addresses are separated by '-' character (i.e. address1\\_amount1-address2\\_amount2). All addresses must belong to the same private key. If no from parameter is specified, it will be automatically generated, where the addresses with least IxiCash will be spent first. |\r\n| primaryAddress | String | No | Specify if the node is using a wallet with multiple keypairs in order to select the keypair (public key) which will be used to sign the transaction. The chosen primary address must be a valid signer for all addresses listed in the `from` field. |\r\n| fee | Number | No | Transaction fee, specified in IxiCash per kB. If no fee parameter is specified, the default (which is also the minimum) 0.00005 IxiCash per kB will be used. |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Output:\n\n* success: required total transaction fee is calculated and returned as a number in result.\n* fail JSON encoded details with a non-null error and a null result:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_ADDRESS\\_OR\\_KEY | Addresses specified in the `from` parameter does not belong to this node, or `to` address is invalid. |\r\n| RPC\\_INVALID\\_PARAMS | Invalid `from` amounts, or invalid `to` amounts were specified. |\r\n| RPC\\_VERIFY\\_ERROR | The transaction does not pass verification - this usually means that no usable `from` addresses were present, or there was something wrong with the signing key. |\r\n| RPC\\_WALLET\\_INSUFFICIENT\\_FUNDS | Address or addresses specified have insufficient balance to be used for the transaction. |\r\n| RPC\\_TRANSACTION\\_ERROR | An error occurred while adding the transaction, check the message and log file for details. |\r\n| RPC\\_INTERNAL\\_ERROR | An unexpected error occurred within the node. Please see the node log for details. |\n\n### Example:\n\nGET http://localhost:8081/calculatetransactionfee?from=1JKZFqQs4yiH6Dq4bfom7xcpL6zG53DrjcY6HD9QJ6cRWmXdq\\_10000-1PC5kubyLvTmsf16CugqHpBG8B8PK4YjcfSjjLMqbUi8YvkQ\\_5000\\&to=153xXfVi1sznPcRqJur8tutgrZecNVYGSzetp47bQvRfNuDix\\_15000\n\n```\n{\r\n\t\"result\": \"0.00005\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/clear-peer-blacklist",
    "title": "Clear Peer Blacklist",
    "description": "",
    "content": "## Clear Peer Blacklist\n\nClears peer blacklist.\n\n### Method: `clearPeerBlacklist`\n\n### Input parameters:\n\nNone.\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with \"OK\" in result field on success.\n\n### Example:\n\nGET http://localhost:8081/clearPeerBlacklist\n\n```\n{\r\n  \"result\": \"OK\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/clients",
    "title": "Clients",
    "description": "",
    "content": "## Clients\n\nReturns a list of clients that are connected to this node.\n\n### Method: `clients`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: list of clients JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/clients\n\n```\n{\r\n\t\"result\": [\r\n\t\t\"172.20.207.81:55700\",\r\n\t\t\"172.20.207.81:55859\",\r\n\t\t...\r\n\t],\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/connect",
    "title": "Connect",
    "description": "",
    "content": "## Connect\n\nInitiates a network connection to the specified address and port.\n\nNote: The `to` parameter must include both a host address and a port. The host address may be a fully qualified domain name (FQDN) or an IP address, but port must be present in both cases.\n\n### Method: `connect`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| to | String | Yes | Hostname or IP address and port of the target Ixian node. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMS | The required parameter `\"to\"` was not supplied. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object containinly only the string \"Connecting to node `to`\" as the result.\n\n### Example:\n\nGET http://localhost:8081/connect?to=192.168.1.25:10234\n\n```\n{\r\n\t\"result\": \"Connecting to node 192.168.1.25\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/create-raw-transaction",
    "title": "Create Raw Transaction",
    "description": "",
    "content": "## Create Raw Transaction\n\nGenerates a new IXI transaction, but doesn't add it to the Transaction Pool. This enables manual TX fee calculations and features such as offline transactions.\n\nNote: If you do not specify `from`, the required funds and fee will be deducted from the node's addresses (the order is unspecified). Multiple addresses may be used if the first one chosen does not have sufficient funds.\r\nIf you do specify `from`, it will not include any transaction fees. It is up to the caller of this API to examine the returned Transaction object and add the fee in the `from` list. This allows greater flexibility than `autofee` or not specifying the `from` list.\r\nNote: The transaction can be returned in a raw (binary) form, encoded as a hexadecimal string. In order to convert it into a JSON object, use the API call [Decode Raw Transaction](https://projectixian.github.io/api_docs/core_decode_raw_transaction.html), or supply the parameter `json` when creating the raw transaction.\r\nNote: The returned transaction is not signed.\n\nNote: If using the `primaryAddress` parameter, the chosen address (public key) must be a valid signer for all addresses in the `from` list. This is the case if all the `from` addresses were derived from `primaryAddress` via the `generatenewaddress` API.\n\n### Method: `createrawtransaction`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| to | String | Yes | List of Base58 encoded recipient addresses with their amounts. Amounts are separated by '*' character. Addresses are separated by '-' character (i.e. address1\\_amount1-address2\\_amount2) |\r\n| from | String | No | List of Base58 encoded sending addresses with their amounts. Amounts are separated by '*' character. Addresses are separated by '-' character (i.e. address1\\_amount1-address2\\_amount2). All addresses must belong to the same private key. If no from parameter is specified, it will be automatically generated, where the addresses with least IxiCash will be spent first. |\r\n| primaryAddress | String | No | Specify if the node is using a wallet with multiple keypairs in order to select the keypair (public key) which will be used to sign the transaction. The chosen primary address must be a valid signer for all addresses listed in the `from` field. |\r\n| fee | Number | No | Transaction fee, specified in IxiCash per kB. If no fee parameter is specified, the default (which is also the minimum) 0.00005 IxiCash per kB will be used. |\r\n| autofee | Boolean | No | If specified, the system will automatically deduct the required fee from the first address given in `from`. This parameter is not required if you have included the appropriate fees somewhere in the `from` list, or are not specifying the `from` list at all. |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\r\n| json | Boolean | No | If specified, the transaction will be returned as a JSON transaction object and not encoded as a hexstring. |\n\n### Output:\n\n* success: transaction is returned as a hexadecimal string or a JSON object and the error field is set to null. This transaction is not added to the network.\n* fail JSON encoded details with a non-null error and a null result:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_ADDRESS\\_OR\\_KEY | Addresses specified in the `from` parameter does not belong to this node, or an invalid `to` address was specified. |\r\n| RPC\\_INVALID\\_PARAMS | Invalid `from` amounts, or invalid `to` amounts were specified. |\r\n| RPC\\_VERIFY\\_ERROR | The transaction does not pass verification - this usually means that no usable `from` addresses were present, or there was something wrong with the signing key. |\r\n| RPC\\_WALLET\\_INSUFFICIENT\\_FUNDS | Address or addresses specified have insufficient balance to be used for the transaction. |\r\n| RPC\\_TRANSACTION\\_ERROR | An error occurred while adding the transaction, check the message and log file for details. |\r\n| RPC\\_INTERNAL\\_ERROR | An unexpected error occurred within the node. Please see the node log for details. |\n\n### Example:\n\nGET http://localhost:8081/createrawtransaction?from=1JKZFqQs4yiH6Dq4bfom7xcpL6zG53DrjcY6HD9QJ6cRWmXdq\\_10000-1PC5kubyLvTmsf16CugqHpBG8B8PK4YjcfSjjLMqbUi8YvkQ\\_5000\\&to=153xXfVi1sznPcRqJur8tutgrZecNVYGSzetp47bQvRfNuDix\\_15000\n\n```\n{\r\n\t\"result\": \"0300000...0ad2a25212b003ef0259697760e0\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/decode-raw-transaction",
    "title": "Decode Raw Transaction",
    "description": "",
    "content": "## Decode Raw Transaction\n\nThis is a convenience function which converts a hex-encoded transaction from its raw format into a JSON object, so that it may be parsed or analyzed.\n\nNote: This method accepts both a signed or an unsigned raw transaction and will return the appropriate fields in the JSON object.\n\n### Method: `decoderawtransaction`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| transaction | string | Yes | The encoded transaction, as returned by [Create Raw Transaction](https://projectixian.github.io/api_docs/core_create_raw_transaction.html) |\n\n### Output:\n\n* success: transaction details are returned as a JSON object and the error field is set to null. This transaction is not added to the network.\n* fail JSON encoded details with a non-null error and a null result:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMETER | The `transaction` parameter is missing or does not represent a valid transaction object. |\n\n### Example:\n\nGET http://localhost:8081/decoderawtransaction?transaction=0300000...0ad2a25212b003ef0259697760e0\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"13-jbFyKmVfFtV86rjMnbxrmYuUzn3D7T3s6hZU1HfzbjPMT2A4jHhkR56CLsER\",\r\n    \"version\": 3,\r\n    \"blockHeight\": \"13\",\r\n    \"nonce\": \"7535\",\r\n    \"pubKey\": \"3zzdr4iT48AbaVudpGjZQi22fGiz4XupTfweGiiFjGNVVqfx6h4M2CF9H6bKjqTjj\",\r\n    \"timestamp\": \"1551519157\",\r\n    \"type\": \"0\",\r\n    \"amount\": \"10000.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"2d8368037d16aba9b650f3fd5a61a937505a1b43a6989d7ba500e72d7f60d0a2988fc5c5afe997015b8529ec\",\r\n    \"from\": {\r\n      \"1\": \"10000.00005000\"\r\n    },\r\n    \"to\": {\r\n      \"5EVv1FqciHzJtPQbA8kBTaPzdSCzLVJ2X6oBTFA198au1qjoML6TjYz75h8w2QUv1\": \"10000.00000000\"\r\n    },\r\n    \"fee\": \"0.00005000\",\r\n    \"totalAmount\": \"10000.00005000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/extend-name-registration",
    "title": "Extend Name Registration",
    "description": "",
    "content": "## Extend Name Registration\n\nExtend name registration for a specified amount of time.\n\n### Method: `extendName`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| name | String | Yes | Name to be registered. |\r\n| extensionTime | Number | Yes | Time in blocks to extend the name for. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the transaction in result field, which extends a name.\n\n### Example:\n\nGET http://localhost:8081/extendname?name=test\\&extensionTime=864000\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"446-iSQxh1KZf5bHADpfg9rFnBQWJksF8jtNbQEGMkvR92rskETRK46cvov29Rko\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"446\",\r\n    \"nonce\": \"93785\",\r\n    \"signature\": \"5155031ee73...13e3f077009811\",\r\n    \"pubKey\": \"JHgSS7hbUN...Ywi5i2EPPWjtyTRYRN\",\r\n    \"data\": \"0341409...02f0d00\",\r\n    \"timestamp\": \"1711931901\",\r\n    \"type\": \"4\",\r\n    \"amount\": \"50000.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"7f72ba1ae8b47b3efb5283fbef7256d861d9e8c2fbdf436faedb4042769991500f41ab8b066dd159a4fcaabc\",\r\n    \"from\": {\r\n      \"1\": \"50000.01000000\"\r\n    },\r\n    \"to\": {\r\n      \"125D6XDzTZzQUWsyQZmQZmQZmQZmQZmQZmQZmQZmQZmQb8t25\": \"50000.00000000\"\r\n    },\r\n    \"fee\": \"0.01000000\",\r\n    \"totalAmount\": \"50000.01000000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/generate-new-address",
    "title": "Generate New Address",
    "description": "",
    "content": "## Generate New Address\n\nGenerates new address for receiving and spending IxiCash, using the chosen public key. The parameter `address` controls which keypair will be used to generate a new address. The specified address must have a public and private keypair loaded in the running node or client.\n\nNote: The required 'nonce' value used to generate a new address is determined automatically.\n\n### Method: `generatenewaddress`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| address | String | No | Primary address (key pair) which will be used to generate a new address. |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: new address in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/generatenewaddress\n\n```\n{\r\n\t\"result\": \"1KXcNjfyChUPhMK5Wnkj8ZQ6GQCiYs65uBaWkK9jdCvrWuDgS\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/get-activity",
    "title": "Get Activity",
    "description": "",
    "content": "## Get Activity\n\nRetrieves the activity for the currently loaded wallet with optional filtering on type and paging support.\n\n### Method: `activity`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| fromIndex | Number | No | Starting index (used for splitting the results into pages). |\r\n| count | Number | No | Number of results to fetch. By itself, this parameter is useful for fetching only the recent history, but combined with `fromIndex` this parameters enables fetching results in pages. |\r\n| type | Number | No | Type of the activity to fetch as a number. See below. |\r\n| orderBy | String | No | Ordering method of requested data. Can be \"insertedTimestamp\", \"timestamp\" or \"blockheight\". Default is \"insertedTimestamp\". |\r\n| descending | Boolean | No | Ordering direction of requested data, set to \"true\" for descending order. Default is ascending order.  |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Activity Types\n\n| Id | Type | Detail |\r\n| --- | --- | --- |\r\n| 100 | TransactionReceived | A transaction has been received. (Destination address belongs to the currently loaded wallet. |\r\n| 101 | TransactionSent | A transaction has been sent from the currently loaded wallet. |\r\n| 200 | MiningReward | A mining reward has been received by the currently loaded wallet. |\r\n| 201 | StakingReward | A staking reward has been received by the currently loaded wallet. |\r\n| 202 | TxFeeReward | A transaction fee reward has been received by the currently loaded wallet. |\r\n| 300 | ContactRequest | A contact request has been received. |\n\n### Output:\n\n* activity details are returned as a JSON object and the error field is set to null:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Example:\n\nGET http://localhost:8081/activity\n\n```\n{\r\n  \"result\": [\r\n    {\r\n      \"seedHash\": \"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZFYZkO\",\r\n      \"wallet\": \"4iMKArchGjmLsZFsj2tYrBgPjjypvEwquB2pnbEvYAyihSeEi1FN5XBsWru2iKDXK\",\r\n      \"from\": \"1ixianinfinimine234234234234234234234234234242HP\",\r\n      \"toList\": \"||4iMKArchGjmLsZFsj2tYrBgPjjypvEwquB2pnbEvYAyihSeEi1FN5XBsWru2iKDXK:/tkU||5DY8ZF2Y1xbB2n7V7c3z8pcAoLAsScAVAiZdcnqBPbLuGHiq9RWamn83hautJvEoy:ZEwj||4C62hPSVNHTXe4aMtgoFYZ3KVCNXmkCr7MmJRprWukvtUSWTsMsm6UaPLqmiVtnh1:7tI/||4L5vswa8yS9VKsZzDJ2ry9gWY7KQon5bkvhG1CUuepkwvcy1xQmLsHA9DPmCDbufr:mDW5AA==\",\r\n      \"type\": 201,\r\n      \"data\": \"APyudjHAmnhQfZitq5BY8vgA1PboOXgm10RmMaeGWaHiltRiQdXyrWoA4pE9OKTq\",\r\n      \"value\": \"0.01366526\",\r\n      \"timestamp\": 1709254781,\r\n      \"status\": 2,\r\n      \"blockHeight\": 30383,\r\n      \"txid\": \"stk-30377-30382-HBEF6nRAb4qudWecJQnopZCfseUGYXp2KKVvpcbCNYZSAmqCTw4cpcqN7aN5\",\r\n      \"id\": \"EvniSJUZje4PU46HAqybNoQpZ8mKrpUULcY6oniijR3XehRovo9TSw2fBBMG\"\r\n    },\r\n    ...\r\n  ],\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/get-block-height",
    "title": "Get Block Height",
    "description": "",
    "content": "## Get Block Height\n\nReturns the number of Ixian blocks generated so far, usually named 'Block Height'.\n\n### Method: `blockheight`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: number of Ixian blocks since the Genesis block\n\n### Example:\n\nGET http://localhost:8081/blockheight\n\n```\n{\r\n\t\"result\": 432178,\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/get-presence",
    "title": "Get Presence",
    "description": "",
    "content": "## Get Presence\n\nReturns presence information of the specified wallet.\n\n### Method: `getPresence`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the wallet bytes encoded as a hexadecimal string.\n\n### Example:\n\nGET http://localhost:8081/getPresence?wallet=4iMKArchGjmLsZFsj2tYrBgPjjypvEwquB2pnbEvYAyihSeEi1FN5XBsWru2iKDXK\n\n```\n{\r\n  \"result\": {\r\n    \"version\": 1,\r\n    \"wallet\": {\r\n      \"version\": 1,\r\n      \"addressWithChecksum\": \"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZFYZkO\",\r\n      \"addressNoChecksum\": \"Ab7Bkj6gj6Bm5WukZVeptezz2oLEhLcBDXehZQ583aEuTdb+n78AQzGqRqZF\",\r\n      \"nonce\": null,\r\n      \"pubKey\": null\r\n    },\r\n    \"pubkey\": \"AQAAAAAAAgAA7Gd0ZN...Wdu7w/us52kDAAAAAQAB\",\r\n    \"metadata\": null,\r\n    \"addresses\": [\r\n      {\r\n        \"version\": 2,\r\n        \"device\": \"aSKhScV0tkOaIq0IjNZyWw==\",\r\n        \"address\": \"10.23.11.2:10000\",\r\n        \"type\": \"M\",\r\n        \"nodeVersion\": \"xdc-0.9.2a\",\r\n        \"lastSeenTime\": 1711928565,\r\n        \"signature\": \"ynRhobTOXAMys...M5YmAZxzeNF30vLQudLCY=\"\r\n      }\r\n    ],\r\n    \"powSolution\": {\r\n      \"blockNum\": 271,\r\n      \"solution\": \"z6qt1qRGHMwi2w+dX+gWnPHtIJhM4rmDlBqjQ7VjNuiRUzD2OxcHRs6oVzSjSSbEg2LuQghDGUfAPrZ08M8/DA==\",\r\n      \"signingPubKey\": \"AgAAAAAAAQAAlpmt...AqfHk5HQMAAAABAAE=\",\r\n      \"checksum\": \"4eNPs8p1lda/BsCCfCeUy9EVs1bZrP9RgH+zWAWSZuF02obk/XhhSHGQRNJVmqs0/mGkqyucT19gIRXCJAAAAA==\",\r\n      \"difficulty\": \"116843993.98621778\",\r\n      \"bits\": 3901456573219758000\r\n    }\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/get-total-balance",
    "title": "Get Total Balance",
    "description": "",
    "content": "## Get Total Balance\n\nGets the total balance of IXIcoins in all currently loaded wallets on this Ixian client. Essentially, this retrieves all your Ixian assets available to you on the chosen node or client.\n\n### Method: `gettotalbalance`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object containinly the number of total IxiCoins in local wallets\n\n### Example:\n\nGET http://localhost:8081/gettotalbalance\n\n```\n{\r\n\t\"result\": \"100000000.00000000\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/get-viewing-wallet",
    "title": "Get Viewing Wallet",
    "description": "",
    "content": "## Get Viewing Wallet\n\nRetrieves the currently loaded wallet as a viewing wallet in hexadecimal string. The wallet is encrypted with the user's password and the value is prefixed with the string `IXIHEX`.\n\n### Method: `getViewingWallet`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the viewing wallet bytes encoded as a hexadecimal string.\n\n### Example:\n\nGET http://localhost:8081/getViewingWallet\n\n```\n{\r\n  \"result\": \"IXIHEX0200000050090...cab76cfb758a14\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/get-wallet-backup",
    "title": "Get Wallet Backup",
    "description": "",
    "content": "## Get Wallet Backup\n\nRetrieves the currently loaded wallet as a hexadecimal string. The wallet is encrypted with the user's password and the value is prefixed with the string `IXIHEX`.\n\n### Method: `getwalletbackup`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the wallet bytes encoded as a hexadecimal string.\n\n### Example:\n\nGET http://localhost:8081/getwalletbackup\n\n```\n{\r\n  \"result\": \"IXIHEX05000000013844...cab76cfb758a14\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands",
    "title": "Ixian Core Generic API Commands",
    "description": "Ixian Core Generic API Commands",
    "content": ""
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/isolate",
    "title": "Isolate",
    "description": "",
    "content": "## Isolate\n\nStops all network operations and disconnects all clients and servers.\n\n### Method: `isolate`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\nNone\n\n### Output:\n\n* a JSON object containinly only the string \"Isolating from network now.\" as the result.\n\n### Example:\n\nGET http://localhost:8081/isolate\n\n```\n{\r\n\t\"result\": \"Isolating from network now.\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/list-wallets",
    "title": "List Wallets",
    "description": "",
    "content": "## List Wallets\n\nLists all loaded wallets.\n\n### Method: `listWallets`\n\n### Input parameters:\n\nNone.\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with list of loaded wallets in result field on success.\n\n### Example:\n\nGET http://localhost:8081/listWallets\n\n```\n{\r\n  \"result\": [\r\n    \"3WFuwLRowdZBTUUGqmUvSfx14U1tT1c2bcpSV3vai7ghi4fQ4jy4Jjf9xq3Gg\"\r\n  ],\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/load-wallet",
    "title": "Load Wallet",
    "description": "",
    "content": "## Load Wallet\n\nLoads another wallet from file. If wallet is already loaded, it won't reload it but just return it's primary address.\n\n### Method: `loadWallet`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| file | String | Yes | Filename of the wallet file. |\r\n| password | String | Yes | Password of the provided wallet. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_WALLET\\_ERROR | An error occurred. File doesn't exist, is incorrect or incorrect password is used. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the wallet bytes encoded as a hexadecimal string.\n\n### Example:\n\nGET http://localhost:8081/loadWallet\n\n```\n{\r\n  \"result\": \"4iMKArchGjmLsZFsj2tYrBgPjjypvEwquB2pnbEvYAyihSeEi1FN5XBsWru2iKDXK\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/my-public-key",
    "title": "My Public Key",
    "description": "",
    "content": "## My Public Key\n\nReturns the primary public key of this node.\n\n### Method: `mypubkey`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: public key in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/mypubkey\n\n```\n{\r\n\t\"result\": \"00020000...5d1e69cb503000000010001\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/my-wallet",
    "title": "My Wallet",
    "description": "",
    "content": "## My Wallet\n\nReturns all the loaded (unlocked) wallets in the node's wallet file and their balances.\n\n### Method: `mywallet`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON-encoded list of wallets and balances, with the error field set to null\n\n### Example:\n\nGET http://localhost:8081/mywallet\n\n```\n{\r\n\t\"result\": {\r\n\t\t\"1JKZFqQs4yiH6Dq4bfom7xcpL6zG53DrjcY6HD9QJ6cRWmXdq\": \"99880008.39139947\",\r\n\t\t\"1PC5kubyLvTmsf16CugqHpBG8B8PK4YjcfSjjLMqbUi8YvkQ5\": \"11240.00000000\"\r\n\t},\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/pause-network-client",
    "title": "Pause Network Client",
    "description": "",
    "content": "## Pause Network Client\n\nDisconnects from all servers.\n\n### Method: `pauseClient`\n\n### Input parameters:\n\nNone.\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the string \"Network Client paused.\" in result field.\n\n### Example:\n\nGET http://localhost:8081/pauseClient\n\n```\n{\r\n  \"result\": \"Network Client paused.\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/reconnect",
    "title": "Reconnect",
    "description": "",
    "content": "## Reconnect\n\nStops all network operations, disconnects all clients and servers, then restarts the networking and attempts to reconnect to the network.\n\n### Method: `reconnect`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\nNone\n\n### Output:\n\n* a JSON object containinly only the string \"Reconnecting node to network now.\" as the result.\n\n### Example:\n\nGET http://localhost:8081/reconnect\n\n```\n{\r\n\t\"result\": \"Reconnecting node to network now.\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/recover-registered-name",
    "title": "Recover Registered Name",
    "description": "",
    "content": "## Recover Registered Name\n\nRecover a registered name, by using a recovery key.\n\n### Method: `recoverName`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| name | String | Yes | Name to be registered. |\r\n| nextRecoveryHash | String | No | Next Recovery hash in HEX. |\r\n| nextPkHash | String | No | Next Public Key hash in HEX. |\r\n| sigPk | String | No | Signature Public Key hash in HEX. |\r\n| sig | String | No | Signature in HEX. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the transaction in result field, which recovers a name.\n\n### Example:\n\nGET http://localhost:8081/recoverName?name=test\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"416-GmLELpqteeTLv551uUtyLADHGw2SxgfPH5EBQn8YVe2PjMZFJqaFYW1GQbCa\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"416\",\r\n    \"nonce\": \"501522\",\r\n    \"signature\": \"b58cc4abea30a...ba2a6a0ab227b63e2a9b9439259d7453fc38d\",\r\n    \"pubKey\": \"JHgSS7hbUNnYWs...U2j3NFmiMazymoYwi5i2EPPWjtyTRYRN\",\r\n    \"data\": \"0541409be670f...a1c2d7f598025146472a435e47b48edb5b23f5bd\",\r\n    \"timestamp\": \"1711930988\",\r\n    \"type\": \"4\",\r\n    \"amount\": \"0.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"307c3363308fee26da1464b54d4235e101bf2c4c31488d8c7d285f6d4385219c8ad99ad22e6c521abbdd29af\",\r\n    \"from\": {\r\n      \"1\": \"0.01500000\"\r\n    },\r\n    \"to\": {\r\n      \"125D6XDzTZzQUWsyQZmQZmQZmQZmQZmQZmQZmQZmQZmQb8t25\": \"0.00000000\"\r\n    },\r\n    \"fee\": \"0.01500000\",\r\n    \"totalAmount\": \"0.01500000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/register-name",
    "title": "Register Name",
    "description": "",
    "content": "## Register Name\n\nRegister an Ixian Name.\n\n### Method: `registerName`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| name | String | Yes | Name to be registered. |\r\n| registrationTime | Number | Yes | Registration time in blocks. |\r\n| capacity | Number | Yes | Capacity in kB. |\r\n| recoveryHash | String | No | Recovery hash in HEX. |\r\n| pkHash | String | No | PublicKey hash in HEX. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the transaction in result field, which registers a name.\n\n### Example:\n\nGET http://localhost:8081/registerName?name=test\\&registrationTime=864000\\&capacity=10\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"403-yjSY9heSFDLcrvu7yXu3jfKkw4xJoe6YpCULZw3zC4FS89YCEseFByShUANt\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"403\",\r\n    \"nonce\": \"40792\",\r\n    \"signature\": \"a3861219705...863b3d2ccd178097981c95b\",\r\n    \"pubKey\": \"JHgSS7hbUN...3NFmiMazymoYwi5i2EPPWjtyTRYRN\",\r\n    \"data\": \"0141409b...7cdda12e4dd6fe9fbf004331aa46a645\",\r\n    \"timestamp\": \"1711930571\",\r\n    \"type\": \"4\",\r\n    \"amount\": \"50000.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"ae7c44383cb5a488088abc188f06eb3bf652d4e90922019da84e34e0f2c37b80aff6b83761f8d260b0c93b91\",\r\n    \"from\": {\r\n      \"1\": \"50000.01000000\"\r\n    },\r\n    \"to\": {\r\n      \"125D6XDzTZzQUWsyQZmQZmQZmQZmQZmQZmQZmQZmQZmQb8t25\": \"50000.00000000\"\r\n    },\r\n    \"fee\": \"0.01000000\",\r\n    \"totalAmount\": \"50000.01000000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/resume-network-client",
    "title": "Resume Network Client",
    "description": "",
    "content": "## Resume Network Client\n\nStarts connecting to servers again.\n\n### Method: `resumeClient`\n\n### Input parameters:\n\nNone.\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the string \"Network Client resumed.\" in result field.\n\n### Example:\n\nGET http://localhost:8081/resumeClient\n\n```\n{\r\n  \"result\": \"Network Client resumed.\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/send-raw-transaction",
    "title": "Send Raw Transaction",
    "description": "",
    "content": "## Send Raw Transaction\n\nTakes a hexadecimal representation of a valid, signed transaction and sends it to the network. In order to generate a valid transaction value, use the methods [Create Raw Transaction](#create-raw-transaction) and [Sign Raw Transaction](#sign-raw-transaction).\n\n### Method: `sendrawtransaction`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| transaction | string | Yes | The encoded transaction, as returned by [Create Raw Transaction](#create-raw-transaction) |\n\n### Output:\n\n* success: transaction details are returned as a JSON object and the error field is set to null\n* fail JSON encoded details with a non-null error and a null result\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMETER | The `transaction` parameter is missing or does not represent a valid transaction object. |\r\n| RPC\\_VERIFY\\_ERROR | The transaction was not valid, or an unexpected error has occurred in the node. Please see the node's log for details. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Example:\n\nGET http://localhost:8081/sendrawtransaction?transaction=03000000000000000e313...cd149493f0d973b7d7bb9b6\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"13-jbFyKmVfFtV86rjMnbxrmYuUzn3D7T3s6hZU1HfzbjPMT2A4jHhkR56CLsER\",\r\n    \"version\": 3,\r\n    \"blockHeight\": \"13\",\r\n    \"nonce\": \"7535\",\r\n    \"signature\": \"36d459...985ec859bb6ca\",\r\n    \"pubKey\": \"3zzdr4iT48AbaVudpGjZQi22fGiz4XupTfweGiiFjGNVVqfx6h4M2CF9H6bKjqTjj\",\r\n    \"timestamp\": \"1551519157\",\r\n    \"type\": \"0\",\r\n    \"amount\": \"10000.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"2d8368037d16aba9b650f3fd5a61a937505a1b43a6989d7ba500e72d7f60d0a2988fc5c5afe997015b8529ec\",\r\n    \"from\": {\r\n      \"1\": \"10000.00005000\"\r\n    },\r\n    \"to\": {\r\n      \"5EVv1FqciHzJtPQbA8kBTaPzdSCzLVJ2X6oBTFA198au1qjoML6TjYz75h8w2QUv1\": \"10000.00000000\"\r\n    },\r\n    \"fee\": \"0.00005000\",\r\n    \"totalAmount\": \"10000.00005000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/servers",
    "title": "Servers",
    "description": "",
    "content": "## Servers\n\nReturns a list of servers that this node is connected to.\n\n### Method: `servers`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: list of servers JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/servers\n\n```\n{\r\n\t\"result\": [\r\n\t\t\"172.20.207.81:10000\",\r\n\t\t\"172.20.207.81:10002\",\r\n\t\t...\r\n\t],\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/shutdown",
    "title": "Shutdown",
    "description": "",
    "content": "## Shutdown\n\nGracefully shuts down the running Ixian executable and closes the program.\r\nNote: It is not possible to 'revive' the node after this command without access to the remote computer's OS.\n\n### Method: `shutdown`\n\n### Input parameters:\n\nNone\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object containinly only the string \"Node shutdown\" as the result.\n\n### Example:\n\nGET http://localhost:8081/shutdown\n\n```\n{\r\n\t\"result\": \"Node shutdown\",\r\n\t\"error\": null,\r\n\t\"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/sign",
    "title": "Sign",
    "description": "",
    "content": "## Sign\n\nSigns a specified string.\n\n### Method: `sign`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| message or hash | String | Yes | Message or hash to be signed. |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the wallet bytes encoded as a hexadecimal string.\n\n### Example:\n\nGET http://localhost:8081/sign?message=test\n\n```\n{\r\n  \"result\": \"5237481874cdf80...e3a3b89fce20f735b749eda9fb2cc6\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/sign-raw-transaction",
    "title": "Sign Raw Transaction",
    "description": "",
    "content": "## Sign Raw Transaction\n\nApplies the node's signature to a raw transaction and returns a modified hexadecimal value.\n\nNote: If a signed transaction is given as an input, the signature is overwritten.\n\n### Method: `signrawtransaction`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| transaction | string | Yes | The encoded transaction, as returned by [Create Raw Transaction](https://projectixian.github.io/api_docs/core_create_raw_transaction.html) |\n\n### Output:\n\n* success: transaction is returned as a hexadecimal string and the error field is set to null. This transaction is not added to the network.\n* fail JSON encoded details with a non-null error and a null result:\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMETER | The `transaction` parameter is missing or does not represent a valid transaction object. |\n\n### Example:\n\nGET http://localhost:8081/signrawtransaction?transaction=0300000...0ad2a25212b003ef0259697760e0\n\n```\n{\r\n  \"result\": \"03000000000000000e313...cd149493f0d973b7d7bb9b6\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/status",
    "title": "Status",
    "description": "",
    "content": "## Status\n\nReturns the status of the node.\n\n### Method: `status`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| verbose | Boolean | No | Additional details are returned. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: status JSON-encoded in the result field with the error field set to null\n* fail: JSON encoded details with a non-null error and a null result\n\n### Example:\n\nGET http://localhost:8081/status\n\n```\n{\r\n  \"result\":{\r\n    \"Core Version\":\"xcore-0.9.2a\",\r\n    \"Node Version\":\"xsbc-0.8.0\",\r\n    \"Network type\":\"main\",\r\n    \"My time\":1711921632,\r\n    \"Network time difference\":0,\r\n    \"Real network time difference\":0,\r\n    \"My External IP\":\"10.11.12.13\",\r\n    \"My Listening Port\":15235,\r\n    \"Core Status\":1,\r\n    \"Block Height\":4094011,\r\n    \"Block Version\":10,\r\n    \"Network Block Height\":4094011,\r\n    \"Node Type\":\"C\",\r\n    \"Connectable\":true,\r\n    \"Queues\":{\r\n      \"RcvLow\":0,\r\n      \"RcvMedium\":0,\r\n      \"RcvHigh\":0,\r\n      \"SendClients\":0,\r\n      \"SendServers\":0,\r\n      \"Logging\":0,\r\n      \"Pending Transactions\":0\r\n    },\r\n    \"Presences\":1,\r\n    \"Masters\":0,\r\n    \"Relays\":0,\r\n    \"Clients\":1,\r\n    \"Network Clients\":[\r\n      \"10.10.1.3:1212\",\r\n      \"10.10.1.4:1312\"\r\n    ],\r\n    \"Network Servers\":[\r\n      \"10.10.1.1:1012\",\r\n      \"10.10.1.2:1012\"\r\n    ]\r\n  },\r\n  \"error\":null,\r\n  \"id\":null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/unload-wallet",
    "title": "Unload Wallet",
    "description": "",
    "content": "## Unload Wallet\n\nUnloads specified wallet.\n\n### Method: `unloadWallet`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| wallet | String | No | Base58 Primary Wallet address in case multiple wallets are being used. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with \"OK\" string, if wallet was unloaded in result field.\n* a JSON object with \"FAIL\" string in result field, if wallet can't be unloaded.\n\n### Example:\n\nGET http://localhost:8081/unloadWallet\n\n```\n{\r\n  \"result\": \"OK\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/update-name-capacity",
    "title": "Update Name Capacity",
    "description": "",
    "content": "## Update Name Capacity\n\nUpdate Name Capacity for a specified amount.\n\n### Method: `extendName`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| name | String | Yes | Name to be registered. |\r\n| newCapacity | Number | Yes | New capacity in kB. |\r\n| nextPkHash | String | No | Next Public Key hash in HEX. |\r\n| sigPk | String | No | Signature Public Key hash in HEX. |\r\n| sig | String | No | Signature in HEX. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the transaction in result field, which updates the capacity.\n\n### Example:\n\nGET http://localhost:8081/updateNameCapacity?name=test\\&newCapacity=200\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"12-YgoasugxF3umGU4592jJisYRX2iU4xguC5QWa44UvCg4jZt1PT6MAeTQCVgL\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"12\",\r\n    \"nonce\": \"890022\",\r\n    \"signature\": \"a36e4270f8f48020e5b7add97f852...88a750a4ab9238d1528a610658da\",\r\n    \"pubKey\": \"JHgSS7hbUNnYWsXgTbs2qz8mDm...U2U2j3NFmiMazymoYwi5i2EPPWjtyTRYRN\",\r\n    \"data\": \"0441409be670f26e...5a7b27e5cb8c69d376b9190c8d9b56dbfea1614\",\r\n    \"timestamp\": \"1711934655\",\r\n    \"type\": \"4\",\r\n    \"amount\": \"1000000.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"61747aba78eb1febfeb542789f35f66733d8ef5bc692a84d56fec4264f0723f708b5dca8d9c40b1672f6ab01\",\r\n    \"from\": {\r\n      \"1\": \"1000000.01500000\"\r\n    },\r\n    \"to\": {\r\n      \"125D6XDzTZzQUWsyQZmQZmQZmQZmQZmQZmQZmQZmQZmQb8t25\": \"1000000.00000000\"\r\n    },\r\n    \"fee\": \"0.01500000\",\r\n    \"totalAmount\": \"1000000.01500000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/update-name-records",
    "title": "Update Name Records",
    "description": "",
    "content": "## Update Name Records\n\nUpdate Name Records.\n\n### Method: `updateNameRecord`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| name | String | Yes | Name to be registered. |\r\n| records\\[] | Array | Yes | Array of records \\[ \"key,TTL,data\" ]. |\r\n| nextPkHash | String | No | Next Public Key hash in HEX. |\r\n| sigPk | String | No | Signature Public Key hash in HEX. |\r\n| sig | String | No | Signature in HEX. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with the transaction in result field, which updates the name records.\n\n### Example:\n\nGET http://localhost:8081/updateNameRecord?name=test\\&records\\[]=abc,2,testData1\\&records\\[]=def,3,testData2\\&records\\[]=ghi,3,testData3\n\n```\n{\r\n  \"result\": {\r\n    \"id\": \"12-uFz12W98ebdbtMg9egjP5p9f1zWgF3tkQ9YAbCB13LNE6WJmPUM59rDctZ1r\",\r\n    \"version\": 7,\r\n    \"blockHeight\": \"12\",\r\n    \"nonce\": \"953806\",\r\n    \"signature\": \"3b3faa9a726f0818fa1795be...865d7ff8701b28b059b39c4112cd2\",\r\n    \"pubKey\": \"JHgSS7hbUNnYWsXgTbs2qz8mD...FmiMazymoYwi5i2EPPWjtyTRYRN\",\r\n    \"data\": \"0241409be670f26e3a9d0fa3e...f34df22cd7fbb324\",\r\n    \"timestamp\": \"1711936613\",\r\n    \"type\": \"4\",\r\n    \"amount\": \"0.00000000\",\r\n    \"applied\": \"0\",\r\n    \"checksum\": \"a0ba16873ebe68f2f1f319d9f199dbb453a53275aae5f4aad2fcbe0ae533e524cc1c2507498df1448af53599\",\r\n    \"from\": {\r\n      \"1\": \"0.01500000\"\r\n    },\r\n    \"to\": {\r\n      \"125D6XDzTZzQUWsyQZmQZmQZmQZmQZmQZmQZmQZmQZmQb8t25\": \"0.00000000\"\r\n    },\r\n    \"fee\": \"0.01500000\",\r\n    \"totalAmount\": \"0.01500000\"\r\n  },\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/validate-address",
    "title": "Validate Address",
    "description": "",
    "content": "## Validate Address\n\nEnsures that the given address is in the correct format.\n\n### Method: `validateaddress`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| address | String | Yes | Wallet address to validate |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_ADDRESS\\_OR\\_KEY | The provided vaue does not represent a valid Ixian address, or there was no value provided. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* success: string \"OK\" in the result field.\n* fail: JSON encoded error details and the result field set to null\n\n### Example:\n\nGET http://localhost:8081/validateaddress?address=4qX7Uot9BbweZh56gVeXWRwoe2Wb6vesNJtZJzm672uHUqucsHENe1849Vy5V4mHg\n\n```\n{\r\n    \"result\": \"OK\",\r\n    \"error\": null,\r\n    \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/api-docs/ixian-core-generic-api-commands/verify",
    "title": "Verify",
    "description": "",
    "content": "## Verify\n\nVerifies a specified string.\n\n### Method: `verify`\n\n### Input parameters:\n\n| Parameter | Type | Required | Description |\r\n| --- | --- | --- | --- |\r\n| message or hash | String | Yes | Message or hash to be verified. |\r\n| publicKey | String | Yes | Public Key as Hex String. |\r\n| signature | String | Yes | Signature as Hex String. |\n\n### Errors:\n\n| Error | Description |\r\n| --- | --- |\r\n| RPC\\_INVALID\\_PARAMS | Invalid Parameters are used. |\r\n| RPC\\_INTERNAL\\_ERROR | An unknown error occurred in the node. Please check the node log for details. |\n\n### Output:\n\n* a JSON object with \"OK\" or \"FAIL\" string in result field.\n\n### Example:\n\nGET http://localhost:8081/verify?message=test\\&publicKey=010000000000020000ec677464d9091f151bbd5d7ac9bc65e37925e3265a89e0e0e211cda42ca1c9ae0271ac114bd4776c6e5924923f17e81583c090893f64a631df03249319d475e27093352b574cd645309d31ccebc1ed1118ca5443e8f8c96fff07e4832490e1790c6d66a630636c79e2a14b45c0ca202692203d4ee3dcfce74cd5adae413e4db52f02b71ea254697295ec03440e5b312f0e2ab3dce1f3317078837912e505729c86db8f9c6629e8037dfe96570087d536e875d8c44b01e808690383e8ae34e70df20aa97b277158ff0b013e453bdb5f591dad1c9442980067d2769fe801486a48a17c87b30fab828aa4ae9af495d0a436df8da8ad786bfac4e20ad98e36b06814cc4c45f806c5ebcfacd686bd9b2614be7420204202ef22bd05410a45fd130b7ce9cf1bf8d7aecf6efdbefe4135161fc00330be211a4b36c550dd633f52fb93acc0b5a805cfc9508a9a22b7aa562747260bfbe05df40d68e7eebc59b9b706e75d83dca9ff18c59756f3d6c304e6e4e861db546fcad35c8856b82614fe90e9ab4a66309ac7086528a0eb808e41bf487c714ad5637f4ab99ad667619d7871dc6e16a1340c07e01f11b80b16b6faed7d028922c69453e5c7d767b2932279aa126edc06b7c79cc1b7bbe913812b02eeea384511a94faef637a4f97e841f324b84d73929ccea9f7051970a9efd93150b5f9080be13b7285809e2bd59dbbbc3fbace76903000000010001\\&signature=5237481874cdf80b43ae5bee7a3e5003b1919c1991f8de841d2f309e4f42b9a36aa290dc452b20702d3f96e30575007299b7ae89773bd924af0f18b31ffa13be0b13d0a1c7c078b72a9ca0319c0c6c7a441c420d9945feb9ec60a437152c9406ac592d1cc3723933f5ff5a65dbf7d58bd53173508b3207ee7305b7157a39c6b3af25122236acf81a94c4446ef8fa1a46ac16b6d0bb2ac86c15571a21da32c6f0b4b362142d68bf9ad17934061a2e601d574a126f48ae7109f27c42af6a22645c47e590b99b86f7925ae2911232307530eb33280671acadfd64494ba783a9ff1374895f85896e9ba60b7f2039782e82c5752ec01dc89640702644ec938bbcea00ea5217cf2c60d7fe23e7744b68a5fb7a3eccdd26304a24a8d7e1bf9ab7d0a52aab9639fa5895e18819a57733176c4a3d08bdeb3c8c0b9347428cb79e9f36fe285973d709d98819de3d0514d77717aef22dd1e413e8938bbe7ce30b60688e93c0f7a48bf4dcc901bf6a20188c0031322452b8c3c005d50baef1b78e8b75068e8034e0553f773d66a9a7ee99d3e80f4541476ae1564d392682d259e4229eb76a1dbd2221d2e044909693c9b41658d3b531d322062a3679f86fbe6dc74b0f4c0d9a95ce8cb3bfae65efa5a726098c8242998789d09cc7d63227105e5931fa5b248bc17f6063da02d9e27a7f9e49752dbfef99e3a3b89fce20f735b749eda9fb2cc6\n\n```\n{\r\n  \"result\": \"OK\",\r\n  \"error\": null,\r\n  \"id\": null\r\n}\n```\n"
  },
  {
    "slug": "/introduction/changelog",
    "title": "Changelog",
    "description": "Changelogs and improvements to the Documents projects.",
    "content": "## Added\n\n**Linting and Formatting**:\n\n* Added `npm run lint` and `npm run lint:fix` scripts to automate linting tasks.\n* Added `npm run format` and `npm run format:check` scripts to ensure consistent code formatting.\n\n**SEO Enhancements**:\n\n* Added an SEO component to MDX pages to dynamically include `keywords` and `lastModified` metadata for improved SEO generation.\n\n## Updated\n\n**Next.js Upgrade**:\n\n* Upgraded the project from **Next.js 14** to **Next.js 15**, leveraging the latest features and performance improvements.\n\n**Codebase Improvements**:\n\n* Reordered imports across the project files for better consistency and readability.\n\n**Mermaid Component**:\n\n* Fixed an ID bug that caused rendering issues when multiple Mermaid diagrams were included in MDX pages.\n* Improved initialization and rendering logic to prevent duplicate diagram rendering.\n"
  },
  {
    "slug": "/introduction",
    "title": "Introduction",
    "description": "This section provides an overview of how to get started with the Documents, Next.js Document Starter Kit.",
    "content": "![Banner](/images/banner.png \"Documents\")\n\n## Documents\n\nWelcome to **Documents**, a powerful and flexible Next.js documentation starter kit designed to simplify the process of creating high-quality, comprehensive\nproduct documentation, technical manuals, and business guides. Built with **React**, **Tailwind CSS**, and **TypeScript**, this starter kit provides the\nfoundation to build your project documentation and knowledge base.\n\nDocuments was crafted to streamline the creation, management and showcasing of documentation, allowing developers and teams to focus on the content rather\nthan building the underlying structure. This documentation aims to help you get up and running with the kit, exploring the various features and providing\ninsights into how to structure and present your content effectively.\n\n<CardGrid>\n  <Card subtitle=\"Instructions\" title=\"Installation\" description=\"Get started with Documents using our quick start installation guide to get your project started.\" href=\"/docs/introduction/installation\" />\n\n  <Card subtitle=\"Setup\" title=\"Site Settings\" description=\"Setting up your Documents projects layout, links and search engine optimisation.\" href=\"/docs/introduction/setup\" />\n\n  <Card subtitle=\"Support\" title=\"Rubix Studios\" description=\"Australia's leading branding, marketing and web development company.\" href=\"https://www.rubixstudios.com.au/\" external={true} />\n</CardGrid>\n\n## Why Documents?\n\nDocuments was created as an open-source project to help the community streamline their documentation process, enabling developers to focus on more critical\ntasks. Built with scalability in mind, it adapts to projects of all sizes, from single-page guides to comprehensive knowledge bases.\n\nThe integration of MDX, custom components and Tailwind CSS ensures an intuitive experience, simplifying both content creation and management.\n\n* **Product Guides**: Comprehensive manuals for product usage, setup and troubleshooting.\n* **Business Documentation**: Clear and structured documentation for internal processes, policies and systems.\n* **Technical Manuals**: Detailed guides for APIs, software development kits (SDKs) and technical processes.\n\nDocuments offers extensive customization options, allowing you to easily align the design and functionality with your branding.\n\n## Key Features\n\nHere are some of the features that make **Documents** ideal for building your documentation:\n\n| Feature                              | Description                                                                                                     |\n| ------------------------------------ | --------------------------------------------------------------------------------------------------------------- |\n| **Content Creation**                 | Write documentation using Markdown with JSX, custom components and Mermaid.js for diagrams.                     |\n| **Navigation & Structure**           | Organize content with multi-level navigation, automatically generated tables of contents and smooth pagination. |\n| **Code Features**                    | Syntax highlighting, enhanced code blocks and a code switcher with copy functionality.                          |\n| **Advanced Search**                  | Fuzzy search with term highlighting for quick and accurate results.                                             |\n| **Theming & Layout**                 | Supports light/dark modes with automatic switching and responsive design.                                       |\n| **Math & Tables**                    | Seamless integration of LaTeX for math and structured tables.                                                   |\n| **SEO & Meta Tags**                  | Built-in SEO, metadata generation and control over meta tags for better search rankings and social sharing.     |\n| **AI-powered Docs (In Development)** | Future feature for AI-driven content discussions and search.                                                    |\n\n## How to Use These Documents\n\nYou'll find the documentation's navigation bar on the left side of the screen. The pages are organized in a logical sequence, progressing from foundational\ntopics to more advanced concepts, allowing you to follow along step-by-step as you build your documentation. However, feel free to explore the content in\nany order, selecting the sections most relevant to your use case.\n\nOn the right side of the screen, a table of contents provides easy navigation between sections of each page. For quick access to specific content, you can\nuse the search bar at the top or the search shortcut (`Ctrl+K` or `Cmd+K`).\n\nHead over to the [Installation Guide](/docs/introduction/installation).\n\n## Join our Community\n\nIf you have questions about anything related to Documents, you're always welcome to ask our community on [GitHub](https://github.com/rubixvi/rubix-documents), [X (Twitter)](https://x.com/rubixstory), [Facebook](https://www.facebook.com/rubixstudios)\nand [Reddit](https://www.reddit.com/r/RubixStudios/).\n"
  },
  {
    "slug": "/introduction/installation",
    "title": "Installation",
    "description": "This guide covers the installation of Documents and how to edit your new project.",
    "content": "To install and edit the Documents, you need to have several prerequisites in place. Here's a list of all the essential pre-requisites\nfor setting up and working on this project.\n\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Frubixvi%2Frubix-documents\\&project-name=my-documents\\&repository-name=my-documents\\&demo-title=Documents\\&demo-description=This%20Document%20Starter%20Kit%20is%20developed%20with%20Next.js%2C%20Tailwind%20CSS%20and%20TypeScript.%20It%20serves%20as%20a%20flexible%20and%20scalable%20foundation%20for%20building%20documentation%20websites%20or%20content-driven%20projects.\\&demo-url=https%3A%2F%2Frubix-documents.vercel.app%2F\\&demo-image=https%3A%2F%2Fgithub.com%2Frubixvi%2Frubix-documents%2Fblob%2Fmain%2Fpublic%2Fscreens%2Fscreen-1.png)\n\n## Prerequisites\n\n<Step>\n  <StepItem title=\"System Requirements\">\n    * **Node.js:** Make sure you have Node.js installed. The project uses `npm`, which comes with Node.js. Install Node.js from here.\n    * **NPM or Yarn:** Since the project uses `npm` commands, ensure that npm is installed with Node.js. Alternatively, you can use Yarn if preferred.\n\n    To verify installation, run:\n\n    ```bash\n    node -v\n    npm -v\n    ```\n  </StepItem>\n\n  <StepItem title=\"Git\">\n    You need to have Git installed to clone the repository. Download Git from [here](https://git-scm.com/).\n\n    ```bash\n    git --version\n    ```\n  </StepItem>\n\n  <StepItem title=\"Code Editor\">\n    You’ll need a code editor to work on the project. Common options include:\n\n    * [Visual Studio Code](https://code.visualstudio.com/)\n    * [WebStorm](https://www.jetbrains.com/webstorm/)\n    * Any other text editor you prefer.\n  </StepItem>\n\n  <StepItem title=\"Required Knowledge\">\n    * **Next.js:** Since this is a Next.js project, you should be familiar with Next.js basics.\n    * **React:** The project uses React, so understanding React's component structure and hooks will help.\n    * **TypeScript:** The project is written in TypeScript, so you should have a basic understanding of it.\n    * **Tailwind:** The project uses Tailwind CSS for styling.\n    * **MDX:** Markdown + JSX (MDX) is used for writing documentation.\n  </StepItem>\n</Step>\n\n## Installation\n\n<Step>\n  <StepItem title=\"Clone the Repository\">\n    First, clone the repository to your local machine using Git:\n\n    ```bash\n    git clone https://github.com/rubixvi/rubix-documents.git\n    ```\n\n    Change the directory to the project folder:\n\n    ```bash\n    cd rubix-documents\n    ```\n  </StepItem>\n\n  <StepItem title=\"Install Dependencies\">\n    Use npm to install all the required dependencies:\n\n    ```bash\n    npm install\n    ```\n\n    This will install all the dependencies listed in the package.json file, including:\n\n    * Next.js\n    * React\n    * TypeScript\n    * Tailwind CSS\n    * MDX components\n    * Other dependencies like ESLint, PostCSS, Husky, etc.\n  </StepItem>\n\n  <StepItem title=\"Running the Development Server\">\n    Start the development server by running:\n\n    ```bash\n    npm run dev\n    ```\n\n    This will start the local server, and you can open your browser at:\n\n    ```arduino\n    http://localhost:3000\n    ```\n  </StepItem>\n\n  <StepItem title=\"Editing the Project\">\n    * **MDX Files:** Documentation content is stored in `contents/docs`.\n    * **Components:** You can edit React components in the `components/` directory.\n    * **Tailwind:** Tailwind styling are managed in `tailwind.config.ts` and `app/globals.css`.\n\n    To make any changes to the project, open the files in your editor and modify them as needed.\n\n    <Note title=\"Required\" type=\"danger\">\n      The project's search functionality relies on the Husky's automation to build\n      `search-data/documents.json` ensure git commit is performed to generate this\n      file.\n    </Note>\n  </StepItem>\n\n  <StepItem title=\"Building for Production\">\n    Once you’ve made your changes and want to build the project for production:\n\n    ```bash\n    npm run build\n    ```\n\n    This will generate a production-ready build of the app.\n  </StepItem>\n\n  <StepItem title=\"Running Production Server\">\n    To run the production server:\n\n    ```bash\n    npm run start\n    ```\n\n    The production app will be available at:\n\n    ```arduino\n    http://localhost:3000\n    ```\n  </StepItem>\n</Step>\n\n## Optional\n\n<Step>\n  <StepItem title=\"Deploying to Vercel\">\n    This project is optimized for Vercel deployment. To deploy to Vercel:\n\n    * Go to [vercel.com](https://vercel.com/) and sign up.\n    * Link your GitHub repository and deploy the project.\n    * Vercel will handle the build process for you automatically.\n  </StepItem>\n\n  <StepItem title=\"Linting and Pre-commit Hooks\">\n    The project uses ESLint for linting and Husky for Git hooks. These tools are configured automatically, but you can customize them in `.eslintrc.json` and `.husky` directories.\n  </StepItem>\n</Step>\n\n## Important Information\n\nThe project's search functionality relies on the Husky's automation to build `search-data/documents.json` ensure git commit is performed to generate this file.\n"
  },
  {
    "slug": "/introduction/setup",
    "title": "Setup",
    "description": "Setting up and configuring your documentation project",
    "content": "Setting up your new documentation project is straightforward. Most of the essential project settings can be configured within the `settings` folder.\n\n## Settings\n\nThis section provides the core settings for your documentation site, such as defining the site's URL, site icon and title.\n\n```tsx showLineNumbers\nexport const url = \"\"                 // The URL for your documentation site\nexport const siteicon = \"\"            // Icon displayed next to the site name in the header\nexport const sitename = \"\"            // Title of your documentation site\n```\n\n## Google Tags\n\nThis section allows you to integrate Google Tag Manager into your documentation project. You can add your GTM code and configure whether it's connected.\n\n```tsx showLineNumbers\nexport const gtm = \"\"                 // Add your Google Tag Manager code here\nexport const gtmconnected = true      // Set to true if GTM is connected, otherwise set to false\n```\n\n## Search Engine\n\nConfigure essential SEO settings to ensure your documentation site is optimized for search engines. This includes meta descriptions, keywords and social media sharing details like images and alt text.\n\n```tsx showLineNumbers\nexport const description = \"\"         // Description of your documentation site for SEO\nexport const keywords = [\"\", \"\"]      // List of SEO keywords for your documentation site\nexport const urlimage = \"\"            // The URL of the image used when sharing on social media)\nexport const imagealt = \"\"            // Alt text for shared images, helpful for screen readers\nexport const twitterhandle = \"\"       // Your company’s Twitter handle for social sharing\n```\n\n## Footer Branding\n\nThe footer settings allow you to customize the company information displayed at the bottom of the site. You can add the company name and the URL that the name will link to.\n\n```tsx showLineNumbers\nexport const companyname = \"\"         // The company name displayed in the copyright section\nexport const companylink = \"\"         // The URL your company name should link to\n```\n\n## General Layout\n\nThe layout settings control the appearance and functionality of various elements of the documentation site, such as branding, the right sidebar, feedback options, table of contents, and scroll-to-top functionality.\n\n```tsx showLineNumbers\nexport const branding = true          // Set to true to display our branding elements\nexport const rightsidebar = true      // Set to true to enable the right sidebar with feedback, table of contents and scroll-to-top\nexport const feedbackedit = true      // Control to enable/disable feedback on GitHub\nexport const tableofcontent = true    // Control to enable/disable the generated table of contents\nexport const totopscroll = true       // Control to enable/disable scroll-to-top button\n```\n\n## Github Control\n\nIf your MDX files are hosted on GitHub, you can configure the project to load documents directly from there. This option can be useful for syncing documentation updates directly with your repository.\n\n```tsx showLineNumbers\nexport const loadfromgithub = false   // Set to true to load your MDX documents directly from GitHub\n```\n\n## Project Structure\n\n<CardGrid>\n  <Card title=\"Navigation\" href=\"/docs/navigation\" icon=\"alignJustify\" variant=\"small\" description=\"Creating your navigation\" />\n</CardGrid>\n"
  },
  {
    "slug": "/markdown/cards",
    "title": "Cards",
    "description": "Explore and implement various card styles, including small, large and image cards.",
    "content": "This section introduces the different card styles available in the system, from compact small cards to visually rich image cards. Each example is paired with JSX code snippets, providing you with a practical guide to incorporate these components seamlessly into your project.\n\n## Small Card\n\n<CardGrid>\n  <Card title=\"Instructions\" href=\"/docs/introduction/installation\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n\n  <Card title=\"Setup\" href=\"/docs/introduction/setup\" icon=\"alignJustify\" variant=\"small\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" icon=\"alignJustify\" external={true} variant=\"small\" />\n</CardGrid>\n\n```jsx\n<CardGrid>\n  <Card\n    title=\"Instructions\"\n    href=\"/docs/introduction/installation\"\n    icon=\"alignJustify\"\n    variant=\"small\"\n    description=\"test description\"\n  />\n  <Card\n    title=\"Setup\"\n    href=\"/docs/introduction/setup\"\n    icon=\"alignJustify\"\n    variant=\"small\"\n  />\n  <Card\n    title=\"Rubix Studios\"\n    href=\"https://www.rubixstudios.com.au\"\n    icon=\"alignJustify\"\n    external={true}\n    variant=\"small\"\n  />\n</CardGrid>\n```\n\n## Large Card\n\n<CardGrid>\n  <Card subtitle=\"Instructions\" title=\"Installation\" description=\"Get started with Documents using our quick start installation guide to get your project started.\" href=\"/docs/introduction/installation\" />\n\n  <Card subtitle=\"Setup\" title=\"Site Settings\" description=\"Setting up your Documents projects layout, links and search engine optimisation.\" href=\"/docs/introduction/setup\" />\n\n  <Card subtitle=\"Support\" title=\"Rubix Studios\" description=\"Australia's leading branding, marketing and web development company.\" href=\"https://www.rubixstudios.com.au/\" external={true} />\n</CardGrid>\n\n```jsx\n<CardGrid>\n  <Card\n    subtitle=\"Instructions\"\n    title=\"Installation\"\n    description=\"Get started with Documents using our quick start installation guide to get your project started.\"\n    href=\"/docs/introduction/installation\"\n  />\n  <Card\n    subtitle=\"Setup\"\n    title=\"Site Settings\"\n    description=\"Setting up your Documents projects layout, links and search engine optimisation.\"\n    href=\"/docs/introduction/setup\"\n  />\n  <Card\n    subtitle=\"Support\"\n    title=\"Rubix Studios\"\n    description=\"Australia's leading branding, marketing and web development company.\"\n    href=\"https://www.rubixstudios.com.au/\"\n    external={true}\n  />\n</CardGrid>\n```\n\n## Image Card\n\n<CardGrid>\n  <Card title=\"Instructions\" href=\"/docs/introduction/installation\" image=\"/images/og-image.png\" variant=\"image\" />\n\n  <Card title=\"Setup\" href=\"/docs/introduction/setup\" image=\"/images/og-image.png\" variant=\"image\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" image=\"/images/og-image.png\" external={true} variant=\"image\" />\n</CardGrid>\n\n```jsx\n<CardGrid>\n  <Card\n    title=\"Instructions\"\n    href=\"/docs/introduction/installation\"\n    image=\"/images/og-image.png\"\n    variant=\"image\"\n  />\n  <Card\n    title=\"Setup\"\n    href=\"/docs/introduction/setup\"\n    image=\"/images/og-image.png\"\n    variant=\"image\"\n  />\n  <Card\n    title=\"Rubix Studios\"\n    href=\"https://www.rubixstudios.com.au\"\n    image=\"/images/og-image.png\"\n    external={true}\n    variant=\"image\"\n  />\n</CardGrid>\n```\n"
  },
  {
    "slug": "/markdown/diagrams",
    "title": "Diagrams",
    "description": "Add various diagram types, including flowcharts, decision trees and entity-relationship diagrams.",
    "content": "Diagrams are powerful tools for visualizing processes, relationships, and decisions. This section showcases different types of diagrams created using **Mermaid**, complete with examples and reusable code snippets to integrate into your projects.\n\n## Flowchart\n\nA flowchart represents a sequence of steps or processes in a visual format. Use this diagram to map workflows, decision-making processes, or operational flows.\n\n```jsx\n<Mermaid\n  chart={\\`\n    graph TD;\n    Start --> Task1;\n    Task1 --> Task2;\n    Task2 --> End;\n  \\`}\n/>\n```\n\n## Decision Tree\n\nDecision trees illustrate choices and possible outcomes, making them ideal for decision-making workflows or processes involving multiple paths.\n\n```jsx\n<Mermaid\n  chart={\\`\n    graph TD;\n    A[Start] --> B{Is it raining?};\n    B -->|Yes| C[Take an umbrella];\n    B -->|No| D[Enjoy the weather];\n    C --> E[Go outside];\n    D --> E;\n  \\`}\n/>\n```\n\n## Entity-Relationship Diagram\n\nEntity-relationship diagrams (ERDs) are used to model relationships between entities in a system. They are widely used in database design and system architecture planning.\n\n```jsx\n<Mermaid\n  chart={\\`\n    erDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    PRODUCT ||--o{ LINE-ITEM : \"included in\"\n    CUSTOMER {\n        string name\n        string email\n    }\n    ORDER {\n        int orderNumber\n        date orderDate\n    }\n    LINE-ITEM {\n        int quantity\n        float price\n    }\n    PRODUCT {\n        int productId\n        string name\n        float price\n    }\n  \\`}\n/>\n```\n\nEach of these diagrams serves a specific purpose and Mermaid makes it easy to generate them dynamically. Feel free to experiment with the provided code snippets and adapt them to your needs.\n"
  },
  {
    "slug": "/markdown/filetree",
    "title": "Filetree",
    "description": "This section provides an overview of file structures and their implementation using the FileTree component.",
    "content": "This section demonstrates the structure of a file tree using the `FileTree` component. Below is an example showcasing folders and files organized hierarchically for a project setup.\n\n<FileTree>\n  <Folder name=\"src\" label=\"Source Code\">\n    <File name=\"index.tsx\" label=\"Index File\" />\n\n    <Folder name=\"components\" label=\"Components\">\n      <File name=\"button.tsx\" label=\"Button Component\" />\n\n      <File name=\"input.tsx\" label=\"Input Component\" />\n    </Folder>\n\n    <Folder name=\"pages\" label=\"Pages\">\n      <File name=\"home.tsx\" label=\"Home Page\" />\n\n      <File name=\"about.tsx\" label=\"About Page\" />\n    </Folder>\n  </Folder>\n</FileTree>\n\n## How to Use\n\nIntegrate the `FileTree` component into your project to visually represent file and folder structures. This is particularly useful for documentation, tutorials, or providing users with an overview of your project's architecture.\n\n### JSX Code Example\n\nHere is how you can define the file tree structure in for use in your project:\n\n```jsx\n<FileTree>\n  <Folder name=\"src\" label=\"Source Code\">\n    <File name=\"index.tsx\" label=\"Index File\" />\n    <Folder name=\"components\" label=\"Components\">\n      <File name=\"button.tsx\" label=\"Button Component\" />\n      <File name=\"input.tsx\" label=\"Input Component\" />\n    </Folder>\n    <Folder name=\"pages\" label=\"Pages\">\n      <File name=\"home.tsx\" label=\"Home Page\" />\n      <File name=\"about.tsx\" label=\"About Page\" />\n    </Folder>\n  </Folder>\n</FileTree>\n```\n\nUse this code as a template to set up your own file tree structure and customize it as needed.\n"
  },
  {
    "slug": "/markdown",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\n| :------------ | :---------: | ----------: |\n| Header        |    Title    | Here's this |\n| Paragraph     |    Text     |    And more |\n| Strikethrough |             |    ~~Text~~ |\n\n# Sample Document with Mermaid\n\nHere is a Mermaid diagram:\n\nThis diagram should render automatically without any extra imports.\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nThank you for choosing the Documentation Template for your project. Whether you're documenting software, APIs, or processes, we're here to support you in creating clear and effective documentation. Happy documenting!\n"
  },
  {
    "slug": "/markdown/lists",
    "title": "Lists",
    "description": "This section provides an overview of creating and using lists in the Documents boilerplate.",
    "content": "Learn how to create and render different types of lists in the Documents boilerplate. Examples include checklists, ordered lists, unordered lists and nested lists.\n\n## Checklist\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n```jsx\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n```\n\n## Simple List\n\n* Item 1\n* Item 2\n* Item 3\n\n```jsx\n- Item 1\n- Item 2\n- Item 3\n```\n\n## Number List\n\n1. Research\n2. Draft the content\n3. Review and edit\n4. Publish\n\n```jsx\n1. Research\n2. Draft the content\n3. Review and edit\n4. Publish\n```\n\n## Nested List\n\n* Main Category 1\n  * Sub Item 1.1\n  * Sub Item 1.2\n* Main Category 2\n  * Sub Item 2.1\n  * Sub Item 2.2\n\n```jsx\n- Main Category 1\n  - Sub Item 1.1\n  - Sub Item 1.2\n- Main Category 2\n  - Sub Item 2.1\n  - Sub Item 2.2\n```\n\nUse these examples as a foundation to create and customize lists that fit your project's needs.\n"
  },
  {
    "slug": "/markdown/maths",
    "title": "Maths",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n## Basic Algebra\n\nThe area of a circle ($$A$$) can be calculated using the radius ($$r$$) as follows:\n\n```math\nA = \\pi r^2\n```\n\n## Quadratic Formula\n\nThe quadratic formula for solving an equation of the form $$ax^2 + bx + c = 0$$ is:\n\n```math\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n```\n\n## Newton's Second Law of Motion\n\nNewton's second law of motion states that force ($$F$$) is the product of mass ($$m$$) and acceleration ($$a$$):\n\n```math\nF = ma\n```\n\n## Pythagorean Theorem\n\nThe Pythagorean theorem relates the lengths of the sides of a right triangle:\n\n```math\na^2 + b^2 = c^2\n```\n\n## Einstein's Mass-Energy Equivalence\n\nEinstein's famous equation relates energy ($$E$$), mass ($$m$$), and the speed of light ($$c$$):\n\n```math\nE = mc^2\n```\n"
  },
  {
    "slug": "/markdown/notes",
    "title": "Notes",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n## Standard Note\n\n<Note title=\"Required\">\n  The project's search functionality relies on the Husky's automation to build\n  `search-data/documents.json` ensure git commit is performed to generate this\n  file.\n</Note>\n\n## Success Note\n\n<Note title=\"Required\" type=\"success\">\n  The project's search functionality relies on the Husky's automation to build\n  `search-data/documents.json` ensure git commit is performed to generate this\n  file.\n</Note>\n\n## Warning Note\n\n<Note title=\"Required\" type=\"warning\">\n  The project's search functionality relies on the Husky's automation to build\n  `search-data/documents.json` ensure git commit is performed to generate this\n  file.\n</Note>\n\n## Danger Note\n\n<Note title=\"Required\" type=\"danger\">\n  The project's search functionality relies on the Husky's automation to build\n  `search-data/documents.json` ensure git commit is performed to generate this\n  file.\n</Note>\n"
  },
  {
    "slug": "/markdown/steps",
    "title": "Steps",
    "description": "This section provides an overview of Introduction.",
    "content": "The `<Step>` and `<StepItem>` components allow you to create structured step-by-step guides in your documentation. These components are particularly useful when you want to break down a process or tutorial into easy-to-follow stages.\n\n## Steps\n\nTo create a step-by-step guide in your MDX, you can use the following structure:\n\n<Step>\n  <StepItem title=\"Install Node.js\">\n    Make sure you have Node.js installed on your machine. You can download it from [here](https://nodejs.org).\n\n    To verify the installation, run the following command:\n\n    ```bash\n    node -v\n    ```\n  </StepItem>\n\n  <StepItem title=\"Install Dependencies\">\n    After cloning the repository, navigate to the project directory and install the necessary dependencies:\n\n    ```bash\n    npm install\n    ```\n  </StepItem>\n\n  <StepItem title=\"Run the Project\">\n    Start the development server:\n\n    ```bash\n    npm run dev\n    ```\n\n    You can access the application at:\n\n    ```bash\n    http://localhost:3000\n    ```\n  </StepItem>\n</Step>\n"
  },
  {
    "slug": "/markdown/table",
    "title": "Table",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n| Syntax        | Description |   Test Text |\n| :------------ | :---------: | ----------: |\n| Header        |    Title    | Here's this |\n| Paragraph     |    Text     |    And more |\n| Strikethrough |             |    ~~Text~~ |\n\n| Feature       | Documentation Link |                    Notes |\n| :------------ | :----------------: | -----------------------: |\n| **Feature A** |     [Docs](#)      | For more info click here |\n| **Feature B** |     [Guide](#)     |  See the full guide here |\n| **Feature C** |     [Setup](#)     |       Setup instructions |\n"
  },
  {
    "slug": "/markdown/tabs",
    "title": "Tabs",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n"
  },
  {
    "slug": "/navigation",
    "title": "Navigation",
    "description": "How to build our your documents menu and navigations.",
    "content": ""
  },
  {
    "slug": "/random",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\n| :------------ | :---------: | ----------: |\n| Header        |    Title    | Here's this |\n| Paragraph     |    Text     |    And more |\n| Strikethrough |             |    ~~Text~~ |\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nAdding some random stuff to change the code\n"
  },
  {
    "slug": "/structure/deep/deeper/even-deeper",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\n| :------------ | :---------: | ----------: |\n| Header        |    Title    | Here's this |\n| Paragraph     |    Text     |    And more |\n| Strikethrough |             |    ~~Text~~ |\n\n<CardGrid>\n  <Card title=\"Page Structure\" href=\"/docs/structure/deep/deeper\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n\n  <Card title=\"Page Structure\" href=\"/docs/structure/deep/deeper\" icon=\"alignJustify\" variant=\"small\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" icon=\"alignJustify\" external={true} variant=\"small\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" image=\"/images/og-image.png\" external={true} variant=\"image\" />\n</CardGrid>\n"
  },
  {
    "slug": "/structure/deep/deeper",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\n| :------------ | :---------: | ----------: |\n| Header        |    Title    | Here's this |\n| Paragraph     |    Text     |    And more |\n| Strikethrough |             |    ~~Text~~ |\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nThank you for choosing the Documentation Template for your project. Whether you're documenting software, APIs, or processes, we're here to support you in creating clear and effective documentation. Happy documenting!\n\n## Tabs Example\n"
  },
  {
    "slug": "/structure/deep",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\n| :------------ | :---------: | ----------: |\n| Header        |    Title    | Here's this |\n| Paragraph     |    Text     |    And more |\n| Strikethrough |             |    ~~Text~~ |\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nThank you for choosing the Documentation Template for your project. Whether you're documenting software, APIs, or processes, we're here to support you in creating clear and effective documentation. Happy documenting!\n\n## Tabs Example\n"
  },
  {
    "slug": "/structure",
    "title": "Structure",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\n| :------------ | :---------: | ----------: |\n| Header        |    Title    | Here's this |\n| Paragraph     |    Text     |    And more |\n| Strikethrough |             |    ~~Text~~ |\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nThank you for choosing the Documentation Template for your project. Whether you're documenting software, APIs, or processes, we're here to support you in creating clear and effective documentation. Happy documenting!\n"
  },
  {
    "slug": "/tech-docs/cryptographic-primitives",
    "title": "Cryptographic primitives",
    "description": "",
    "content": "Below is a list of all cryptographic operations used by the Ixian DLT and S2 networks. The list contains a brief reasoning for the choice and a list places where the primitive is being used.\n\n## Signature - RSA with SHA512\n\nSee: [RSACryptoServiceProvider.SignData](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider.signdata?view=netframework-4.7.2)\n\nKey size: Minimum 4096 bits\n\n### Used for\n\n| Code file | Function | Input data | Reason |\r\n| --- | --- | --- | --- |\r\n| Block.cs | applySignature() | blockChecksum | Working of the Ixian's Consensus algorithm - nodes sign the block they consider valid with their private key using RSA/SHA512 to achieve an acceptable speed of verification. |\r\n| Block.cs | verifySignature() | blockChecksum | Each signature on the `Block` is verified against the signing node's public key in the WalletState. Valid signatures are counted to determine the block acceptance consensus. |\r\n| CoreNetworkProtocol.cs | sendHelloMessage() | unique device identification data | Nodes sign their unique identification when they send the initial protocol handshake message to prevent impersonation on the network. |\r\n| CoreNetworkProtocol.cs | processHelloMessage() | unique device identification data | Upon receiving the Hello message, each node should verify that the signature is valid, in order to prevent impersonation on the network. |\r\n| PresenceList.cs | keepAlive() | unique device id + timestamp | Nodes sign their Keep Alive messages in order to prevent impersonation and Presence List falsification. |\r\n| PresenceList.cs | receiveKeepAlive() | unique device id + timestamp | Keep alive messages which are received from neighbors are verified against the neighbor's public key in the WalletState in order to prevent impersonation and Presence List manipulation. |\r\n| Transaction.cs | multiple functions | transaction checksum | Each transaction is signed by the Node which generated the transaction. RSA/SHA512 is used to achieve an acceptable verification throughput on Master Nodes. |\r\n| Transaction.cs | verifySignature() | transaction checksum | Each transaction is verified before being applied to the block chain, in order to ensure that it was sent by the owner of the wallet. |\n\n## Hashing - SHA512sq\n\nSee [SHA512Managed](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha512managed?view=netframework-4.7.2)\n\nNote: Ixian uses a squared/truncated version of the SHA512 algorithm. It is calculated as follows:\n\n```\nh1 = sha512(input_data);\r\nh2 = sha512(h1);\r\nreturn h2.First(hash_len);\n```\n\n### Used for\n\n| Code file | Function | Input data | Truncated length | Reason |\r\n| --- | --- | --- | --- | --- |\r\n| Address.cs | constructAddress() | base\\_address | 3 bytes | The last three bytes of an address are the checksum, used to ensure integrity during transmission or save/load. |\r\n| Address.cs | constructAddress\\_v1 | public\\_key | 44 bytes | For addressees version 1, the squared/truncated hash value is used as the base of the address. |\r\n| Block.cs | calculateChecksum() | block raw data | 44 bytes | For block version 2, the squared/truncated hash is used as the block checksum. |\r\n| Block.cs | calculateSignatureChecksum() | block signatures | 44 bytes | For block version 2, the squared/truncated hash is used to generated the signature freeze checksum. |\r\n| Activity.cs | id property | activity data | 44 bytes | The hash is used as a unique identifier for each Activity record. |\r\n| CoreNetworkProtocol.cs | prepareProtocolMessage() | 32 bytes | The hash is used by nodes on block version 2 to ensure network message integrity during transmission. |\r\n| CoreNetworkProtocol.cs | readProtocolMessage() | 32 bytes | The hash is used by nodes on block version 2 to ensure network message integrity during transmission. |\r\n| NetworkRemoteEndpoint.cs | sendData() | 32 bytes | The hash is used to ensure network message integrity during transmission by nodes on block version 2. |\r\n| Transaction.cs | generateID() | 44 bytes | The hash is used as a part of the unique transaction identifier in version 2. |\r\n| Transaction.cs | calculateChecksum() | 44 bytes | The hash is used as the transaction checksum, in order to protect the integrity of the data in version 2. This checksum is then used as the input data for the transaction sender signature. |\r\n| Wallet.cs | calculateChecksum() | 44 bytes | The hash is used as the wallet checksum for version 2 wallets in order to prevent tampering and ensure integrity. |\r\n| WalletState.cs | calculateWalletStateChecksum() | 64 bytes | The hash is used as the checksum for all wallet data in the WalletState. This is included in each block to validate a certain point-in-time state of all wallets. |\r\n| WalletStorage.cs | generateNewAddress() | 16 bytes | The hashing algorithm is used to derive additional wallet version 1 addresses from the same public key, thus allowing the user to create new wallets and associate them with a single public/private key pair. |\n\n## Hashing - SHA512qu\n\nSee [SHA512Managed](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha512managed?view=netframework-4.7.2)\n\nNote: Ixian uses a quad/truncated version of the SHA512 algorithm. It is calculated as follows:\n\n```\nh1 = sha512(input_data);\r\nh2 = sha512(h1);\r\nh3 = sha512(h2);\r\nh4 = sha512(h3);\r\nreturn h4.First(hash_len);\n```\n\n### Used for\n\n| Code file | Function | Input data | Truncated length | Reason |\r\n| --- | --- | --- | --- | --- |\r\n| Address.cs | constructAddress\\_v0 | public\\_key | 44 bytes | For addressees version 0, the quad/truncated hash value was used as the base of the address. |\r\n| Block.cs | calculateChecksum() | block raw data | 44 bytes | For block version 0 and 1, the quad/truncated hash was used as the block checksum. |\r\n| Block.cs | calculateSignatureChecksum() | block signatures | 44 bytes | For block version 0 and 1, the quad/truncated hash was used to generated the signature freeze checksum. |\r\n| Activity.cs | id property | activity data | 44 bytes | The hash was used as a unique identifier for each Activity record. |\r\n| CoreNetworkProtocol.cs | prepareProtocolMessage() | 32 bytes | The hash was used by nodes on block version 0 and 1 to ensure network message integrity during transmission. |\r\n| CoreNetworkProtocol.cs | readProtocolMessage() | 32 bytes | The hash was used by nodes on block version 0 and 1 to ensure network message integrity during transmission. |\r\n| NetworkRemoteEndpoint.cs | sendData() | 32 bytes | The hash was used to ensure network message integrity during transmission by nodes on block version 0 and 1. |\r\n| Transaction.cs | generateID() | 44 bytes | The hash was used as a part of the unique transaction identifier in version 0 and 1. |\r\n| Transaction.cs | calculateChecksum() | 44 bytes | The hash was used as the transaction checksum, in order to protect the integrity of the data in version 0 and 1. This checksum is then used as the input data for the transaction sender signature. |\r\n| Wallet.cs | calculateChecksum() | 44 bytes | The hash was used as the wallet checksum for version 0 and 1 wallets in order to prevent tampering and ensure integrity. |\r\n| WalletState.cs | calculateWalletStateChecksum() | 64 bytes | The hash was used as the checksum for all wallet data in the WalletState before block version 2. This is included in each block to validate a certain point-in-time state of all wallets. |\r\n| WalletStorage.cs | generateNewAddress() | 16 bytes | The hashing algorithm is used to derive additional wallet version 0 addresses from the same public key, thus allowing the user to create new wallets and associate them with a single public/private key pair. |\n"
  },
  {
    "slug": "/tech-docs/data-formats",
    "title": "Data formats",
    "description": "",
    "content": "## Notes\n\n### Used conventions\n\nThe vertical line symbol `|` indicates concatenation, either string or byte array.\r\nE.g.: \"abcd\"|\"efgh\" = \"abcdefgh\", and\r\n{ 0x01, 0x02, 0x03 } | { 0x04, 0x05, 0x06} = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 }\n\n### Relevant functions\n\n* **sha512(data)** represents calculating a SHA-512 hash on the input `data`.\n* **sha512sq(data)** represents calculating a SHA-512 hash twice on the input `data` - equivalent to sha512(sha512(data)).\n* **sha512qu(data)** represents calculating a SHA-512 hash four times on the input `data` - equivalent to sha512(sha512(sha512(sha512(data)))).\n* **truncate(value, n)** returns the first `n` elements of `value`. If the `value` is an ASCII string, it returns the first `n` ASCII characters. If `value` is a byte array, it returns the first `n` bytes.\n\n***\n\n## Address Format\n\n### Relevant C# objects:\n\n`IXICore.Address`\n\n### v0 Addresses:\n\n#### Description\n\nA v0 address always start with the byte 0. The address itself is represented by a truncated sha512qu hash of the wallet's public key (pubkey length may vary). The hash is truncated to 32 bytes. Finally, another sha512sq hash is calculated from the 33-byte array (version|address) and truncated to 3 bytes, which are appended to the address, thus yielding 36 total bytes for a complete address.\n\n#### Specification\n\n```\nLength = 36 bytes\r\nFormat = version | raw_address | checksum\r\n\r\nversion = 1 byte, always 0x0 for addresses v0\r\nraw_address = 32 bytes, `truncate(sha512qu(pubkey) , 32)`\r\nchecksum = 3 bytes, `truncate(sha512sq(version|raw_address), 3)`\r\n\r\nFor the primary address (the first address generated from a specific public key):\r\nraw_address = 32 bytes, `truncate(sha512qu(public_key), 32)`\r\n\r\nFor subsequent addresses:\r\nraw_address = 32 bytes, `truncate(sha512qu(primay_address|nonce), 32)`\n```\n\n### v1 Addresses:\n\n#### Description\n\nThe wallet's public key is used to generate a 44-byte truncated sha512sq hash, which is designated the `primary address`. This address is implied to have a `nonce` value of 0.\r\nWhen a subsequent address is required for the same public key, the `nonce` value is incremented and a new address is generated from the `primary address` and the new `nonce` value. Implementations might decide to use random `nonce` values, rather than sequential, but make sure that `nonce` values do not repeat - same `nonce` value will produce the same address.\n\nThis enables Ixian to rapidly generate as many new addresses as required with a low computational impact. Verification of the new addresses requires the original public key, but since that may be cached, transactions need only include the `primary address` and the `nonce` value, reducing network requirements.\n\nNote: A `nonce` value is exactly 16 bytes long, with the only exception when the address being generated represents the `Primary Address` for that specific public key. This Primary Address is calculated with a null `nonce` value.\n\nThe `nonce` is generated as follows:\n\n```\nbase_nonce = sha512SqTrunc(private_key)\r\nnew_nonce = sha512SqTrunc(base_nonce | last_nonce)\n```\n\nWhere `last_nonce` is the most recently used nonce value. This method generates repeatable, deterministic addresses, which can only be computed by whoever has the corresponding private key. A full wallet backup is not required whenever a new address is generated, because all possible addresses can be deduced from only the private and public keys.\n\n#### Specification\n\n```\nLength = 48 bytes\r\nFormat = version | raw_address | checksum\r\n\r\nversion = 1 byte, always 0x1 for addresses v1\r\nraw_address = 44 bytes, `truncate(sha512sq(pubkey_or_address), 44)`\r\nchecksum = 3 bytes, `truncate(sha512sq(version|raw_address), 3)`\r\n\r\nFor the primary address (the first address generated from a specific public key):\r\nraw_address = 44 bytes, `truncate(sha512sq(public_key), 44)`\r\n\r\nFor subsequent addresses:\r\nraw_address = 44 bytes, `truncate(sha512sq(primay_address|nonce), 44)`\n```\n\n***\n\n## Key format\n\n### Relevant C# objects:\n\n`IXICore.IxianKeyPair`\r\n`IXICore.CryptoLib`\n\n### v0 Public key\n\n#### Description\n\nThe v0 public key does not have any headers and is always 523 bytes long (4096-bit keys)\n\n#### Specification\n\n```\nLength = 523 bytes\r\nFormat = raw_pubkey (see v1 raw_pubkey)\n```\n\n### v1 Public key (and v0 Public key with header)\n\n#### Description\n\nv1 Pubkey includes the minimum version of address it is able to generate, as well as the version of the pubkey record.\r\nNote: v0 and v1 pubkeys have exactly the same raw layout, the only difference is the prepended header for v1.\n\n#### Specification\n\n```\nLength = variable\r\nFormat = address_version | pubkey_version | raw_pubkey\r\n\r\naddress_version = 1 byte, always 0x1 (future use)\r\npubkey_version = 4 bytes, always 0x0 (future use)\r\nraw_pubkey =   mod_len | modulus\r\n             | pub_exp_len | pub_exponent\n```\n\n### v0 Private key\n\n#### Description\n\nThe v0 private key does not have any headers. The length varies and is represented by an `int` field before each data element.\n\n#### Specification\n\n```\nLength = 523 bytes\r\nFormat = raw_privkey (see v1 raw_privkey)\n```\n\n### v1 Private key (and v0 Private key with header)\n\n#### Description\n\nv1 Privkey includes the minimum version of address it is able to generate, as well as the version of the privkey record.\r\nNote: v0 and v1 privkeys have exactly the same raw layout, the only difference is the prepended header for v1.\r\nNote: The beginning of the private and public key structures is exactly the same. Therefore, a public key can be quickly extracted from the private key.\n\n#### Specification\n\n```\nLength = variable\r\nFormat = address_version | privkey_version | raw_privkey\r\n\r\naddress_version = 1 byte, always 0x1 (future use)\r\nprivkey_version = 4 bytes, always 0x0 (future use)\r\nraw_privkey =  mod_len | modulus\r\n             | pub_exp_len | pub_exponent\r\n             | p_len | p_prime\r\n             | q_len | q_prime\r\n             | dp_len | dp_exponent1\r\n             | dq_len | dq_exponent2\r\n             | iq_len | inverse_q\r\n             | d_len | d_private_exponent\n```\n\n***\n\n## Presence\n\n### Relevant C# objects:\n\n`IXICore.PresenceList`\r\n`IXICore.Presence`\n\n### Description\n\nPresences are how Ixian DLT network keeps track of which nodes and clients are online or offline.\n\n### Specification\n\n```\nLength = varies, depending on contents\r\nFormat = version\r\n         | wallet_len | wallet\r\n         | pubkey_len | pubkey\r\n         | meta_len | metadata\r\n         | num_addresses | address_record\r\n         | owner\n```\n\nNote: For a description of the `address_record` format, see [Presence Address](/tech_docs/data_formats.html#presence-address) in the next section.\n\n## Presence Address\n\n### Relevant C# objects:\n\n`IXICore.PresenceAddress`\n\n### Description\n\nA presence address represents a network endpoint on which the specific node or client device may be reached.\n\n### Specification\n\n```\nLength = varies, depending on contents\r\nFormat = version\r\n         | device\r\n         | address\r\n         | type\r\n         | nodeVersion\r\n         | lastSeenTime\r\n         | sig_len | signature\n```\n\n***\n\n## Transaction\n\n### Relevant C# objects:\n\n`IXICore.Transaction`\r\n`IXICore.Transction.Type`\r\n`IXICore.Transaction.MultisigWalletChangeType`\r\n`IXICore.Transaction.MultisigAddrAdd`\r\n`IXICore.Transaction.MultisigAddrDel`\r\n`IXICore.Transaction.MultisigChSig`\r\n`IXICore.Transaction.MultisigTxData`\n\n### Description\n\nThe `Transction` object is the cornerstone of any DLT network. It represents a single, atomic operation in much the same way as a transactional database.\r\nIn most cases, a `Transaction` represents the transfer of funds between two wallets, but it may also signify some other change in the network.\n\n### Specification\n\n```\nLength = varies, depending on contents\r\nFormat = version\r\n         | type\r\n         | amount\r\n         | fee\r\n         | to_list_count | to_list_entry[]\r\n         | from_list_count | from_list_entry[]\r\n         | data_len | data\r\n         | block_height\r\n         | nonce\r\n         | time_stamp\r\n         | checksum_len | checksum\r\n         | signature_len | signature\r\n         | pubkey_len | pubkey\r\n\r\nto_list_entry = address_len | address | amount\r\nfrom_list_entry = address_len | address | amount\n```\n\nNote: The amounts are sent as strings with decimal representation of IxiNumber values.\r\nNote: address in to\\_list\\_entry or from\\_list\\_entry is either a full address or a special address nonce value. Use the functions in the class `DLT.Address` to convert them into a proper format.\r\nSee also: [Address Format](/tech_docs/data_formats.html#address-format)\n\n***\n\n## Wallet\n\n### Relevant C# objects:\n\n`IXICore.WalletType`\r\n`IXICore.Wallet`\n\n### Description\n\nThe `Wallet` object contains primarily the amount of funds for a specific Ixian DLT wallet. This structure is held and synchronized by the DLT Master nodes and checked using the field `walletStateChecksum` in the `Block` object.\n\n### Specification\n\n```\nLength = varies, depending on contents\r\nFormat = id_len | id\r\n         | balance\r\n         | data_len | data\r\n         | type\r\n         | required_sigs\r\n         | num_allowed_signers | allowed_signer[]\r\n         | pubkey_len | pubkey\r\n\r\nallowed_signer = address_len | address\n```\n\nNote: balance is encoded as a string with the decimal representation of IxiNumber.\n\n***\n\n## Block\n\n### Relevant C# objects:\n\n`IXICore.Block`\n\n### Description\n\nThe `Block` object describes a single, coherent unit of work for the DLT network. The specific invariant is that applying a block to a known WalletState (the WalletState as described by the previous block), a new WalletState is produced which:\r\na. Has all the transactions in the block applied to Wallets.\r\nb. Matches the checksum in the block.\n\nA block uniquely identifies the previous block (and thus, previous WalletState) through a `lastBlockChecksum` field and specifies a list of transaction identifiers (txid) which should be applied next to the WalletState.\n\nNote: Some blocks (every 1000th block) do not contain the usual transactions and signatures, but is a `Superblock` and contains a summary of the previous 999 blocks.\n\n### Specification\n\n```\nLength = varies, depending on contents\r\nFormat = version | block_number\r\n         | num_transactions | transaction[]\r\n         | num_signatures | signature[]\r\n         | checksum_len | checksum\r\n         | previous_checksum_len | previous_checksum\r\n         | walletstate_checksum_len | walletstate_checksum\r\n         | signature_freeze_checksum_len | signature_freeze_checksum\r\n\t\t | difficulty\r\n\t\t | timestamp\r\n\t\t | previous_superblock_height\r\n\t\t | previous_superblock_checksum_len | previous_superblock_checksum\r\n\t\t | num_superblock_segments | superblock_segment[]\r\n\r\nsignature = signature_len | signature | address_len | address\r\nsuperblock_segment = block_number | block_checksum_len | block_checksum\n```\n\nNote: balance is encoded as a string with the decimal representation of IxiNumber.\n"
  },
  {
    "slug": "/tech-docs",
    "title": "Technical Documents",
    "description": "tech docs",
    "content": ""
  },
  {
    "slug": "/tech-docs/ixi-token-details",
    "title": "IxiCash Details",
    "description": "",
    "content": "Offering a strong incentive to run Ixian Nodes is essential in maintaining the Ixian network. This incentive arrives in the form of IxiCash, a cryptocurrency designed for micro transactions.\r\nUsing IxiCash you are able to send money to friends and pay for premium content. Whether you are providing tech support, performing a live show and broadcasting it to paying viewers, you can charge a service fee in IxiCash.\n\n## Premine\n\nGenesis block (#1) contains 7 transactions that can be considered as pre-mine:\n\n* transaction to 1AAF8ZagTw6UqiQPUoiKjmoAN45jvR8tdmSmeev4uNzq45QWB for 240000 Ixis, intended for setting up extra 12 initial seed nodes as required - this wallet was used by seed1.ixian.io\n* transaction to 1NpizdRi5rmw586Aw883CoQ7THUT528CU5JGhGomgaG9hC3EF for 20000 Ixis, intended for running an Ixian DLT seed node - this wallet was used by seed2.ixian.io\n* transaction to 1Dp9bEFkymhN8PcN7QBzKCg2buz4njjp4eJeFngh769H4vUWi for 20000 Ixis, intended for running an Ixian DLT seed node - this wallet was used by seed3.ixian.io\n* transaction to 1SWy7jYky8xkuN5dnr3aVMJiNiQVh4GSLggZ9hBD3q7ALVEYY for 20000 Ixis, intended for running an Ixian DLT seed node - this wallet was used by seed4.ixian.io\n* transaction to 1R2WxZ7rmQhMTt5mCFTPhPe9Ltw8pTPY6uTsWHCvVd3GvWupC for 20000 Ixis, intended for running an Ixian DLT seed node - this wallet was used by seed5.ixian.io\n* transaction to 13fiCRZHPqcCFvQvuggKEjDvFsVLmwoavaBw1ng5PdSKvCUGp for 1000000000 Ixis, intended to be used as a reward for developers\n* transaction to 16LUmwUnU9M4Wn92nrvCStj83LDCRwvAaSio6Xtb3yvqqqCCz 1000000000 Ixis, intended to be used by the foundation to further evolve Ixian technology\n\nThe genesis funds or the so called premine amounts to roughly 2 billion IxiCash (2,000,320,000), of which 1 billion is locked as a team reward for a vesting period\r\nof 5 years (20% to be released at the end of each year). The other 1 billion IxiCash is intended for funding further development and all other important activities.\n\n## Total inflation\n\nA hybrid IxiCash distribution model is in place. For initial distribution, mining seems to be the best way for various reasons.\r\nAs more users set up their nodes, the network itself will become more resilient against attackers and increase its capability for handling large numbers of users.\r\nThis means that more users will participate in the distribution of IxiCash as well. After a sufficient amount of IxiCash has been mined, the mining mechanism will be permanently switched off and new currency will only be generated through other means.\n\nThe Ixian economy differs substantially from what we are used to in the crypto space. Most cryptocurrencies out there rely on a capped supply and smaller and smaller\r\nemissions over time to increase value for investors and early adopters, whether it be PoW related with reducing block rewards or PoS. We have decided to start with a minimum\r\nsupply and gradually increase the rate of new IxiCash generated for the first 1802000 blocks (roughly two years), the idea here is to have a more even distribution of IxiCash\r\namong miners/users. On block #105120000 (roughly 100 years), mining will stop and we expect the total supply at that point to be about 21 billion IxiCash. After block #105120000,\r\nthe only way to generate new IxiCash is by running a Master Node, which will inflate the total supply at 36 IXIs per block (or 38 million IXIs per year). By not capping the\r\nsupply after 21 billion IxiCash in circulation, we are trying to compensate for coins that get lost over time (i.e. by users losing their keys, sending to invalid addresses, ...).\n\nFor IxiCash emission charts and other details visit [https://explorer.ixian.io/?p=emissions](https://explorer.ixian.io/?p=emissions).\n\n## Mining only inflation\n\nThe target mining inflation rate is as follows (you must include a 50% target ratio between solved and unsolved blocks when doing inflation calculations. Only every 2nd block should be solved on average):\n\n* starts with 10 IXI and increases by 0.009 IXI with every block until block height #1051200 (roughly 1 year from genesis block). Target mining inflation is 1.2 billion additional IXIs.\n* 4740 IXI per block until block height #1802000.\n* 2304 IXI per block until block height #6307200.\n* 1152 IXI per block until block height #9460800.\n* 576 IXI per block until block height #12614400.\n* 18 IXI per block until block height #105120000.\n\n## Masternode/Signing only inflation\n\nEach masternode that signs a newly generated block receives a portion of the signing reward and a portion of the transaction fees.\r\nSigning reward and transaction fees are split between all signers of the block (up to 1000) equally.\n\nSigning inflation rate is as follows:\n\n* 0.1% per year until block #86400 (blockheight was reached in less than 2 months)\n* 5% per year until block #1802000\n* 576 IXI per block until block #6307200\n* 288 IXI per block until block #9460800\n* 144 IXI per block until block #12614400\n* 72 IXI per block until block #15768000\n* 36 IXI per block after block #15768000\n\nThis effectively means that after a certain period of time, and sufficient amount of IxiCash is generated, the staking reward will be locked. This way we will replenish the supply to compensate for lost coins,\r\nbut not over inflate the circulating supply. By setting the inflation rates at these levels, we are ensuring the long term sustainability of the Ixian platform.\n\n## Transaction Fees\n\nTransaction fees are collected by masternodes when the transaction is added to the block and the block is accepted by the Ixian network.\n\nAt the time of writing minimum transaction fees are set to 0.00005000 IXI per kilobyte of data.\n"
  },
  {
    "slug": "/tech-docs/ixian-dlt-whitepaper",
    "title": "Ixian DLT Whitepaper",
    "description": "",
    "content": "title: Ixian DLT Whitepaper\n"
  },
  {
    "slug": "/tech-docs/ixian-network-protocol",
    "title": "Ixian network protocol",
    "description": "",
    "content": ""
  },
  {
    "slug": "/tech-docs/optional-pow-mining",
    "title": "Optional PoW - Mining",
    "description": "",
    "content": "## Introduction\n\nDuring the start up of the Ixian project, a large amount of currency must be generated quickly and awarded to the most active participants. A pre-mined amount would partially solve this problem, but the distribution relies too much on the Ixian team's discretion and does not inspire confidence. The pre-mine amount has therefore been kept relatively small and an additional, temporary way was created to allow the community to generate their own currency.\n\nMining in Ixian is optional for the first five years of operation, after which it will be switched off and new PoW solutions will no longer be accepted by Master Nodes. This document provides a technical description of how the Ixian's optional PoW algorithm works.\n\n## Technical Implementation\n\n### Active History\n\nBecause Ixian DLT is a redacted blockchain, the entire block history is not saved with every node, but only on a few 'Full History Nodes'. The part\r\nof the blockchain, which must be held in memory by each participating node is called the 'Active History', and can be dynamically determined by\r\nthe network after a suitable algorithm is decided. The default window for the \"Active History\" (called the \"Redacted Window Size\"), is 7 days\r\n(20000 blocks).\n\n### Blank Proof-of-Work field\n\nEach block in the chain includes a field for a possible Proof-of-Work solution. This space consists of a solution to the block puzzle and a\r\nsignature from the node which has calculated the challenge.\r\nBlock signatures are still sufficient for validating the transactions in the block. The blank PoW solution field is not included in the\r\nverifying signature for the block, which means that the PoW field can be changed at any time.\r\nA simplified chain with the blank PoW field is represented below:\n\n![Sample Ixian Chain](https://projectixian.github.io/assets/images/hpow_image1.png)\n\n### Transaction Type: Puzzle-Solved\n\nA new transaction type is introduced for the Proof-of-Work operations. This transaction consists of a PoW solution for any block, which is\r\npresent in the Active History at the moment when the transaction is processed, as shown in the image below.\n\n![Active History](https://projectixian.github.io/assets/images/hpow_image2.png)\n\nThe targeted block must currently have no solution for the PoW puzzle.\r\nOnce this transaction is verified by a DLT node and the containing block is accepted by the network, the details are added to the Active History\r\ninto the blank PoW field. That block now has a filled PoW field, and is confirmed by a transaction in an accepted block. Based on this, new\r\ncurrency is generated and awarded to the node which calculated the puzzle.\n\nGraphical representation of the PoW award process:\n\n![PoW Award](https://projectixian.github.io/assets/images/hpow_image3.png)\n\n### Solution Details - Technical\n\nThe PoW solution is formed in the following manner:\n\n![PoW Solution](https://projectixian.github.io/assets/images/hpow_d1.png)\n\nWhere PoW is the solution to the PoW problem using the \"Argon2ID\" hashing functions, whose input message, called \"pwd\" in the reference Argon\r\nimplementation is the combination of the target block checksum - BlockChecksum - and the address of the walled which will receive the reward for\r\nsolving the puzzle - SolverAddress.\r\nThe solution is found by inserting a random, 128-bit value as Nonce, until a hash is found which meets certain criteria based on the *difficulty*\r\nBlock parameter.\n\n### Difficulty Adjustments\n\nBecause new nodes join the network and start searching for the PoW solution, while other nodes stop, the difficulty must be adjusted to reflect the\r\ncurrent network's total hashing power. If the difficulty is too easy, too many Blocks will have their PoW solution. Conversely, if the difficulty\r\nis too high, too few Blocks will be solved.\r\nThe difficulty should be selected such, that roughly 50% of all Blocks in the active history are solved before they are redacted.\n\nThe Block difficulty is an 8-byte unsigned integer, which represents the characteristic of the PoW solution value to which a valid solution must\r\nconform. In Ixian, the entire solution range (a solution is a 256-bit number) is split into 2^64 sub-ranges. The difficulty number, being a 64-bit\r\nunsigned integer, selects one of the sub-ranges, which is interpreted as the absolute ceiling.\r\nA valid PoW solution must be numerically below the chosen ceiling.\n\nIn order to convert the difficulty number into a 'hash-ceiling', the following method is used:\n\n1. A bitwise inverse of the difficulty value is calculated (one's complement)\n2. A zero-value, 256-bit number is generated.\n3. Bits from the inverted difficulty are inserted into the empty 256-bit number at bit positions 13 - 76 (bit 1 is the most significant bit).\n4. Bits before the inserted value are set to zero.\n5. Bits after the inserted value are set to one.\n\nThe resulting hash-ceiling value represents the upper limit of the 256-bit PoW solution. Solutions, which are numerically less than the\r\nhash-ceiling are considered valid for the given difficulty.\n\nThe exact distribution of the sub-ranges allow Ixian to set a wide range of difficulties. In order to prevent some possible exploits, a lower\r\nlimit has been set on the difficulty value.\r\nThe lowest possible difficulty is therefore defined to be 0xA2CB1211629F6141, which equates to (on average) 180000 hashes required in order to\r\nfind a valid solution. The number can be achieved by 10 miners, with 300 H/s each - this was defined as an approximation of the minimum network\r\nsize. With the total hashing power of 3000 H/s, a block solution should be found approximately every 60 seconds.\r\nSince the blocks are generated at 30-second intervals, the resulting solution ratio should be near 50%.\n\nUpper bound on the difficulty is not specified, so the theoretical maximum difficulty could be 0xFFFFFFFFFFFFFFFF, which would require 1.15\r\nzetta-hashes on average to find a block solution. This number was deemed sufficiently large. It would require about 16 quintillion miners at\r\n1200 H/s each) to keep up with the 50% solution ratio.\n"
  },
  {
    "slug": "/tech-docs/programming-objects",
    "title": "Programming Objects",
    "description": "",
    "content": ""
  }
]